[
    {
        "instruction": "Create a C# program which takes two strings as parameters, and returns true if the two strings are anagrams of each other.",
        "input": "'listen', 'silent'",
        "output": "bool AreAnagrams(string s1, string s2)\n{\n    if (s1.Length != s2.Length)\n        return false;\n \n    int[] a = new int[256];\n    int n = s1.Length;\n    for (int i = 0; i < n; i++)\n    {\n        int c1 = (int)s1[i];\n        int c2 = (int)s2[i];\n \n        a[c1]++;\n        a[c2]--;\n    }\n \n    for (int i = 0; i < 256; i++)\n    {\n        if (a[i] != 0)\n            return false;\n    }\n \n    return true;\n}",
        "abap": "CLASS lcl_anagram DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      are_anagrams\n        IMPORTING\n          im_s1   TYPE string\n          im_s2   TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_anagram IMPLEMENTATION.\n  METHOD are_anagrams.\n    IF length( val = im_s1 ) <> length( val = im_s2 ).\n      rv_result = abap_false.\n      RETURN.\n    ENDIF.\n\n    DATA: lt_array TYPE STANDARD TABLE OF i,\n          lv_n     TYPE i,\n          ls_stat  TYPE STANDARD TABLE OF string WITH DEFAULT SY-SYDATE\n                                             WITH KEY value FOR sy-datum.\n\n    \" Create an array to count character occurrences\n    DO length( val = im_s1 ) TIMES.\n      lv_n = sy-index - 1.\n      READ TEXT-255 INTO DATA(lv_char) FROM im_s1 INDEX lv_n + 1.\n      READ TEXT-255 INTO DATA(lv_char2) FROM im_s2 INDEX lv_n + 1.\n\n      IF ls_stat[ sy-cdate ][ lv_char ] IS INITIAL.\n        APPEND '0' TO ls_stat[ sy-cdate ][ lv_char ].\n      ENDIF.\n\n      IF ls_stat[ sy-cdate ][ lv_char2 ] IS INITIAL.\n        APPEND '0' TO ls_stat[ sy-cdate ][ lv_char2 ].\n      ENDIF.\n\n      ls_stat[ sy-cdate ][ lv_char ] = ls_stat[ sy-cdate ][ lv_char ] + 1.\n      ls_stat[ sy-cdate ][ lv_char2 ] = ls_stat[ sy-cdate ][ lv_char2 ] - 1.\n\n    ENDDO.\n\n    \" Check if all counts are zero\n    LOOP AT ls_stat INTO DATA(ls_item).\n      IF ls_item-value <> '0'.\n        rv_result = abap_false.\n        RETURN.\n      ENDIF.\n    ENDLOOP.\n\n    rv_result = abap_true.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a function in Python to evaluate if a given number is prime.",
        "input": "",
        "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num//2 + 1): \n        if num % i == 0: \n            return False\n    return True",
        "abap": "CLASS lcl_prime NUMBER DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_prime IMPORTING p_num TYPE i\n                RETURNING VALUE(r_result) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS lcl_prime NUMBER IMPLEMENTATION.\n  METHOD is_prime.\n    IF p_num <= 1.\n      r_result = abap_false.\n    ELSEIF p_num < 2.\n      r_result = abap_false.\n    ELSE.\n      DATA: lv_i TYPE i.\n\n      LOOP AT SY-TABIX INTO lv_i FROM 2 TO ( p_num / 2 ).\n        IF p_num MOD lv_i = 0.\n          r_result = abap_false.\n          EXIT.\n        ENDIF.\n      ENDLOOP.\n      IF sy-subrc <> 0.\n        r_result = abap_true.\n      ENDIF.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Formulate an equation to calculate the height of a triangle given the angle, side lengths and opposite side length.",
        "input": "",
        "output": "Height of triangle = opposite side length * sin (angle) / side length",
        "abap": "DATA: lv_opposite_side_length TYPE f,\n      lv_angle TYPE f,\n      lv_side_length TYPE f.\n\nlv_height = lv_opposite_side_length * ( lv_angle / 57.295779513082323 ).\n"
    },
    {
        "instruction": "Determine the type of the given variable.",
        "input": "var age = 20",
        "output": "Number.",
        "abap": "Here is the equivalent ABAP code:\n\n`DATA: lv_number TYPE i.`\n\n`lv_number = 42.`\n\nAlternatively, you can also declare a class with a method to return the number:\n\n`CLASS lcl_number DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get\n        RETURNING\n          VALUE(rv_number) TYPE i.\nENDCLASS.\n\nCLASS lcl_number IMPLEMENTATION.\n  METHOD get.\n    rv_number = 42.\n  ENDMETHOD.\nENDCLASS.`\n\nOr even shorter:\n\n`CONSTANTS: lv_number TYPE i VALUE 42.`"
    },
    {
        "instruction": "Merge the two lists below together.",
        "input": "list_a = [1,2,3] \nlist_b = [4,5,6]",
        "output": "[1, 2, 3, 4, 5, 6]",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\n\nINITIALIZATION.\nlv_array = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ( 6 ) ).\n\nWRITE: / lv_array.\n"
    },
    {
        "instruction": "Write code to retrieve data from a given MySQL table.",
        "input": "Table Name: Books",
        "output": "SELECT * FROM Books;",
        "abap": "REPORT zbooks.\n\nTYPES: BEGIN OF ty_books,\n         \" Add fields here if needed\n       END OF ty_books.\n\nDATA: lt_books TYPE STANDARD TABLE OF ty_books.\n\nSELECT *\n  INTO CORRESPONDING FIELDS OF TABLE lt_books\n  FROM books.\n"
    },
    {
        "instruction": "classify the following sentence using a sentiment analysis model.",
        "input": "The movie is awesome.",
        "output": "\"\"\"\nClassify the following sentence using a sentiment analysis model.\nSentence: The movie is awesome.\n\"\"\"\n\nfrom textblob import TextBlob\n\nsentence = \"The movie is awesome.\"\n\n# convert the sentence to a TextBlob object\nblob = TextBlob(sentence)\n\n# get the sentiment\nsentiment = blob.sentiment\n\nif sentiment.polarity > 0:  # positive sentiment\n    print(\"This sentence is classified as Positive.\")\nelif sentiment.polarity == 0:  # neutral sentiment\n    print(\"This sentence is classified as Neutral.\")\nelse:  # negative sentiment\n    print(\"This sentence is classified as Negative.\")",
        "abap": "REPORT zsentiment_analysis.\n\nCLASS lcl_sentiment_analysis DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      classify_sentiment\n        IMPORTING\n          VALUE(iv_sentence) TYPE string\n        RETURNING\n          VALUE(rv_sentiment) TYPE string.\nENDCLASS.\n\nCLASS lcl_sentiment_analysis IMPLEMENTATION.\n  METHOD classify_sentiment.\n    DATA: lv_blob TYPE REF TO cl_textblob,\n          ls_sentiment TYPE ty_sentiment.\n\n    CREATE OBJECT lv_blob\n      EXPORTING\n        iv_sentence = iv_sentence.\n\n    ls_sentiment-polarity = lv_blob->sentiment polarity .\n    IF ls_sentiment-polarity > 0.\n      rv_sentiment = 'Positive'.\n    ELSEIF ls_sentiment-polarity < 0.\n      rv_sentiment = 'Negative'.\n    ELSE.\n      rv_sentiment = 'Neutral'.\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SECTION.\n\n  DATA: lv_sentence TYPE string,\n        lv_sentiment TYPE string.\n\n  lv_sentence = \"The movie is awesome.\".\n\n  CALL METHOD cl_lcl_sentiment_analysis=>classify_sentiment\n    EXPORTING\n      iv_sentence = lv_sentence\n    RECEIVING\n      rv_sentiment = lv_sentiment.\n\n  WRITE:/ lv_sentiment.\n\nEND-OF-SECTION.\n"
    },
    {
        "instruction": "Create a function that takes in a string and replaces all punctuation with a space",
        "input": "",
        "output": "import string\n\ndef replace_punctuation(string):\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, \" \")\n    return string",
        "abap": "CLASS lcl_punctuation_replacer DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      replace_punctuation\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_string TYPE string.\nENDCLASS.\n\nCLASS lcl_punctuation_replacer IMPLEMENTATION.\n  METHOD replace_punctuation.\n    DATA: lv_char TYPE c.\n    DO strlen( iv_string ) TIMES.\n      MOVE-CORRESPONDING iv_string+sy-index TO lv_char.\n      IF lv_char IN so_0020-punctu. \" SO_0020 is the ABAP character set\n        REPLACE ALL OCCURRENCES OF lv_char WITH ' ' INTO ev_string.\n      ENDIF.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lv_string TYPE string.\nlv_string = 'Hello, World!'.\nev_string = lcl_punctuation_replacer=>replace_punctuation( lv_string ).\nWRITE: ev_string. \" Outputs: Hello  World\n"
    },
    {
        "instruction": "Build a Python program to transform a string in a dictionary.",
        "input": "String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\"",
        "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}",
        "abap": "TYPES: BEGIN OF ty_person,\n          age TYPE i,\n          hobby TYPE string,\n        END OF ty_person.\n\nDATA: ls_people TYPE TABLE OF ty_person.\n\nls_people = VALUE #( (\n  name = 'John' age = 26 hobby = 'Movie Watch' )\n  ( name = 'Jane' age = 31 hobby = 'Book Reader' )\n  ( name = 'Charlotte' age = 25 hobby = 'Music Listener' ) ).\n\nCLASS lcl_example DEFINITION.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD constructor.\n    ls_people = VALUE #( (\n      name = 'John' age = 26 hobby = 'Movie Watch' )\n      ( name = 'Jane' age = 31 hobby = 'Book Reader' )\n      ( name = 'Charlotte' age = 25 hobby = 'Music Listener' ) ).\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\nDATA: lo_example TYPE REF TO lcl_example,\n       ls_person   TYPE ty_person.\n\nCREATE OBJECT lo_example.\nDO. \" Iterate over the table\n    LOOP AT lo_example->ls_people INTO ls_person.\n        WRITE: / ls_person-name, ls_person-age, ls_person-hobby.\n    ENDLOOP.\nENDDO.\n"
    },
    {
        "instruction": "Create a regex expression that captures a valid URL.",
        "input": "",
        "output": "^(https?:\\/\\/)([\\da-zA-Z\\.-]+)\\.([a-zA-Z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
        "abap": "DATA: lv_url TYPE string.\n\nlv_url = 'http://example.com/path/to/page'.\" Example URL\n\nIF lv_url MATCHES '^((https?://)([\\da-zA-Z\\.-]+)\\.(a-zA-Z\\.){2,6})([\\/\\w \\.-]*)*$'.\n  WRITE: / 'Valid URL!'.\nELSE.\n  WRITE: / 'Invalid URL!'.\nENDIF.\n"
    },
    {
        "instruction": "Find the power of a number using an iterative approach in Java.",
        "input": "",
        "output": "public static int power(int base, int exp) \n{ \n    int result = 1; \n    while (exp != 0) \n    { \n        result *= base; \n        --exp; \n    } \n    return result; \n}",
        "abap": "FORM power\n  USING\n    p_base TYPE i\n    p_exp  TYPE i\n  EXPORTING\n    value TYPE i.\n\n  DATA: lv_result TYPE i.\n\n  DO.\n    lv_result = lv_result * p_base.\n    p_exp = p_exp - 1.\n    IF sy-carr1 = '.'.\n      EXIT.\n    ENDIF.\n  ENDDO.\n  MOVE-CORRESPONDING p_exp TO lv_result.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a Java program to reverse a given string.",
        "input": "",
        "output": "public class ReverseString\n{ \n\n    public static void main(String[] args) \n    { \n        String input = \"Hello\"; \n        StringBuilder input1 = new StringBuilder(); \n  \n        // append a string into StringBuilder input1 \n        input1.append(input); \n  \n        // reverse StringBuilder input1 \n        input1 = input1.reverse(); \n  \n        // print reversed String \n        System.out.println(input1); \n    } \n}",
        "abap": "REPORT zreverse_string.\n\nCLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: method reverse_string.\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_input TYPE string,\n          lv_reversed TYPE string.\n\n    lv_input = 'Hello'.\n\n    lv_reversed = reversal( val = lv_input ).\n\n    WRITE: / lv_reversed.\n\n  ENDMETHOD.\n\nFORM reversal\n  USING\n    p_val TYPE string.\n\n  DATA: lv_reversed TYPE string.\n\n  DO.\n    IF p_val IS INITIAL.\n      EXIT.\n    ELSE.\n      lv_reversed = p_val+ strlen(p_val)-1(1) && lv_reversed.\n      p_val = p_val- 1.\n    ENDIF.\n  ENDDO.\n\n  rv_reversed = lv_reversed.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a Python function to generate the powerset of a given list.",
        "input": "list = [2, 4, 6]",
        "output": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0",
        "abap": "CLASS zcl_powerset_generator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_powerset\n        IMPORTING\n          VALUE(iv_list) TYPE STANDARD TABLE OF i\n        EXPORTING\n          VALUE(ev_powerset) TYPE STANDARD TABLE OF ty_subset ).\n\nENDCLASS.\n\nCLASS zcl_powerset_generator IMPLEMENTATION.\n  METHOD generate_powerset.\n    DATA: lv_mask TYPE i,\n          lt_powerset TYPE TABLE OF ty_subset,\n          ls_subset LIKE LINE OF lt_powerset,\n          lv_bit TYPE i,\n          lv_bit_count TYPE i.\n\n    lv_bit_count = lines( iv_list ).\n\n    DO.\n      \" Generate all bit masks from 0 to 2^lv_bit_count - 1\n      WHILE lv_mask < 2 ** lv_bit_count .\n\n        CLEAR: ls_subset.\n\n        \" Iterate over the bits of the current mask\n        LOOP AT iv_list INTO DATA(ls_item) FROM 0 LEAST lv_bit_count.\n          IF ( lv_mask & ( 1 << ls_item ) ) <> 0.\n            APPEND ls_item TO ls_subset.\n          ENDIF.\n        ENDLOOP.\n\n        \" Add the subset to the powerset\n        INSERT VALUE( ls_subset ) INTO TABLE lt_powerset.\n\n        ADD 1 TO lv_mask .\n      ENDDO.\n\n    UNTIL sy-datum = '00001231'.\n\n    ev_powerset[] = lt_powerset.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Given a person's name and the current time, print the difference in time from the person's birthday.",
        "input": "name = \"John\"\ntime = datetime.datetime(2021, 3, 25, 10, 0, 0)",
        "output": "birthday = datetime.datetime.strptime(name + \" birthdate\", \"%Y-%m-%d\")\ntime_diff = time - birthday\nprint(\"The difference in time from \" + name + \"'s birthday is \" + str(time_diff))",
        "abap": "DATA: lv_name TYPE string,\n       lv_time  TYPE i,\n       lv_birthday TYPE dats.\n\nlv_name = 'Your Name'.\nlv_birthday = cl_abap_context_info=>get_system_date( ) - sy-dbnfn.\nlv_time = cl_abap_context_info=>get_current_date( ).\n\nDATA(birthday) = VALUE #( year = abap_component_type-component_type-int8( lv_birthday+4 )\n                          month = abap_component_type-component_type-int8( lv_birthday+2 )\n                          day   = abap_component_type-component_type-int8( lv_birthday ) ).\n\nDATA(time_diff) = VALUE #( VALUE #( year = abap_component_type-component_type-int8( lv_time+4 - birthday-year )\n                                   month = abab_component_type-component_type-int8( lv_time+2 - birthday-month )\n                                   day   = abap_component_type-component_type-int8( lv_time - birthday-day ) )\n                              ).\n\nWRITE: 'The difference in time from ', lv_name, \"'s birthday is \", time_diff.\n"
    },
    {
        "instruction": "Create a JavaScript variable to store the current date and time.",
        "input": "",
        "output": "let datetime = new Date();",
        "abap": "DATA: lv_datetime TYPE timestampl.\n\nlv_datetime = cl_abap_context_info=>get_jdate( ).\n"
    },
    {
        "instruction": "Construct a query in PostgreSQL to find the names and emails of all users who have \"google.com\" in their emails.",
        "input": "",
        "output": "SELECT name, email\nFROM users\nWHERE email LIKES '%google.com%';",
        "abap": "REPORT z_example.\n\nTYPES: ty_user TYPE RECORD OF STRUCTURE s_user.\n\nDATA: lt_users LIKE TABLE OF ty_user,\n      ls_user  LIKE LINE OF lt_users.\n\nSELECT name, email\n  INTO CORRESPONDING FIELDS OF TABLE lt_users\n  FROM users\n  WHERE email LIKES '%google.com%'.\n\nLOOP AT lt_users INTO ls_user.\n  WRITE: / ls_user-name, ls_user-email.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a code to merge two given lists of equal size.",
        "input": "list1 = [1,2,3]\nlist2 = [4,5,6]",
        "output": "\"\"\"\nWrite a code to merge two given lists of equal size\n\"\"\"\n\n# Given lists\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n# Initialising an empty list\nmerged_list = []\n\n# Merging the lists\nfor i in range(len(list1)):\n    merged_list.append(list1[i])\n    merged_list.append(list2[i])\n\n# Printing the merged list\nprint(\"Merged list is\", merged_list)",
        "abap": "REPORT zmerge_lists.\n\n\" Define two internal tables of equal size\nDATA: lt_table1 TYPE STANDARD TABLE OF i VALUE 1,\n      lt_table2 TYPE STANDARD TABLE OF i VALUE 4,\n\n      lt_merged_table TYPE STANDARD TABLE OF i.\n\n\" Initialize an empty internal table for merging\nAPPEND LINES OF lt_merged_table TO lt_merged_table.\n\n\" Merge the tables\nLOOP AT lt_table1 INTO DATA(ls_item).\n  APPEND ls_item TO lt_merged_table.\n  APPEND sy-index * 2 - 1 TO lt_merged_table. \" equivalent to list2[i]\nENDDO.\n\n\" Print the merged internal table\nWRITE: / 'Merged table is:', lt_merged_table.\n"
    },
    {
        "instruction": "Build a linear regression model using Python's scikit learn library.",
        "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1)",
        "output": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)",
        "abap": "REPORT zlinear_regression.\n\nCLASS lcl_linear_regression DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      constructor,\n      fit IMPORTING\n              VALUE( iv_training_set_x ) TYPE abap_int_table\n                       VALUE( iv_training_set_y ) TYPE abap_int_table,\n      predict IMPORTING\n                VALUE( iv_test_set_x ) TYPE abap_int_table\n               RETURNING\n                 VALUE( ev_predictions ) TYPE STANDARD TABLE.\nENDCLASS.\n\nCLASS lcl_linear_regression IMPLEMENTATION.\n  METHOD constructor.\n  ENDMETHOD.\n\n  METHOD fit.\n    DATA: lo_model TYPE REF TO cl_linalg,\n          lv_slope TYPE f.\n\n    lo_model = cl_linalg=>create( ).\n\n    \" Fit the linear regression model\n    lo_model->fit(\n      EXPORTING\n        iv_x     = iv_training_set_x[]\n        iv_y     = iv_training_set_y[]\n        iv_method = 'lm' ).  \" Linear Model\n\n    \" Get the slope of the fitted line\n    lv_slope = lo_model->get_slope( ).\n\n    cl_abap_logger=>log( text = 'Slope: ' && lv_slope ).\n  ENDMETHOD.\n\n  METHOD predict.\n    DATA: lt_coefficients TYPE STANDARD TABLE OF abap_int8,\n          ls_coefficient LIKE LINE OF lt_coefficients,\n          lv_y         TYPE f.\n\n    FIELD-SYMBOL(<ls_x>).\n    LOOP AT iv_test_set_x ASSIGNING <ls_x>.\n      \" Get the coefficients from the linear regression model\n      SELECT SINGLE slope INTO ls_coefficient FROM cl_linalg=>get_model( ).\n      cl_abap_logger=>log( text = 'Coefficient: ' && ls_coefficient ).\n\n      \" Calculate y value\n      lv_y = <ls_x> * ls_coefficient.\n\n      APPEND lv_y TO ev_predictions.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n\nDATA:\n  lo_model TYPE REF TO lcl_linear_regression,\n  lt_training_set_x TYPE abap_int_table,\n  lt_training_set_y TYPE abap_int_table,\n  lt_test_set_x     TYPE abap_int_table,\n  lt_test_set_y     TYPE STANDARD TABLE OF f.\n\n\" Prepare the data\nlt_training_set_x = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\nlt_training_set_y = VALUE #( ( 2 ) ( 4 ) ( 6 ) ).\n\nlt_test_set_x = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\n\n\" Create the model\nlo_model = NEW lcl_linear_regression( ).\n\n\" Train the model\nlo_model->fit(\n  EXPORTING\n    iv_training_set_x = lt_training_set_x[]\n    iv_training_set_y = lt_training_set_y[] ).\n\n\" Make predictions\nlt_test_set_y = lo_model->predict(\n  EXPORTING\n    iv_test_set_x     = lt_test_set_x[]\n  IMPORTING\n    ev_predictions   = lt_test_set_y ).\n"
    },
    {
        "instruction": "Write a code to find the maximum in a given list of integers.",
        "input": "mylist = [1,2,3,4,5]",
        "output": "\"\"\"\nWrite a code to find the maximum in a given list of integers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Finding the maximum element\nmax = mylist[0]\n\n# Looping through each element to find if it is the maximum\nfor i in range(1,len(mylist)):\n    # Comparing the element with the maximum\n    if mylist[i] > max:\n        max = mylist[i]\n\n# Printing the maximum element\nprint(\"Maximum element of the list is\", max)",
        "abap": "REPORT zmax_element.\n\nDATA: lv_list TYPE standard table OF i,\n      lv_max  TYPE i.\n\n\" List containing the elements\nlv_list = value #( 1 2 3 4 5 ).\n\n\" Finding the maximum element\nlv_max = lv_list[ 0 ].\n\n\" Looping through each element to find if it is the maximum\nLOOP AT lv_list INTO DATA(lv_element) FROM 1.\n  IF lv_element > lv_max.\n    lv_max = lv_element.\n  ENDIF.\nENDLOOP.\n\n\" Printing the maximum element\nWRITE: 'Maximum element of the list is', lv_max.\n"
    },
    {
        "instruction": "Add a new element to the end of a list.",
        "input": "mylist=[2,5,7]",
        "output": "mylist.append(9)",
        "abap": "APPEND 9 TO mylist."
    },
    {
        "instruction": "Given a list of strings, write a program to sort the strings in alphabetical order.",
        "input": "lst = [\"apple\", \"orange\", \"grapes\"]",
        "output": "def sort_in_alphabetical_order(lst): \n    lst.sort()\n    return lst\n\nprint(sort_in_alphabetical_order([\"apple\", \"orange\", \"grapes\"]))",
        "abap": "REPORT zsort_test.\n\nCLASS lcl_sorter DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_in_alphabetical_order\n        IMPORTING\n          it_list TYPE STANDARD TABLE OF string\n        RETURNING\n          VALUE(ri_sorted) TYPE standard table of string.\nENDCLASS.\n\nCLASS lcl_sorter IMPLEMENTATION.\n  METHOD sort_in_alphabetical_order.\n    SORT it_list BY line.\n    ri_sorted = it_list.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_words TYPE STANDARD TABLE OF string.\n  APPEND 'apple' TO lt_words.\n  APPEND 'orange' TO lt_words.\n  APPEND 'grapes' TO lt_words.\n  PERFORM sort_in_alphabetical_order CHANGING lt_words[].\n  WRITE: / sy-datum, lt_words.\n"
    },
    {
        "instruction": "Change this existing Java code to generate the \"Jesus Christ\" string.",
        "input": "String str = \"Holy\";",
        "output": "String str = \"Holy\";\nString jesusChrist = str + \" \" + \"Jesus Christ\";\nSystem.out.println(jesusChrist);",
        "abap": "DATA: lv_str TYPE string VALUE 'Holy',\n      lv_jc  TYPE string.\n\nlv_jc = lv_str && ' ' && 'Jesus Christ'.\nWRITE: / lv_jc.\n"
    },
    {
        "instruction": "Generate a string of 5 random characters from the characters A through Z.",
        "input": "",
        "output": "import random\n\ndef random_string():\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    random_string = ''.join(random.choice(chars) for i in range(5))\n    return random_string\n\nprint(random_string())",
        "abap": "REPORT zrandom_string.\n\nDATA: lv_chars TYPE string VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n      lv_random_string TYPE string,\n      lv_length TYPE i VALUE 5.\n\nDATA: lr_random TYPE REF TO cl_abap_char_utilities.\n\nlr_random = cl_abap_char_utilities=>create( ).\nlv_random_string = lr_random->random_characters(\n  length    = lv_length\n  character = lv_chars ).\n\nWRITE : lv_random_string.\n"
    },
    {
        "instruction": "Write a SQL query to find the most expensive item in the table.",
        "input": "",
        "output": "SELECT * FROM items ORDER BY price DESC LIMIT 1;",
        "abap": "SELECT *\nINTO TABLE @DATA(lt_items)\nFROM items\nORDER BY price DESC\nLIMIT 1.\n"
    },
    {
        "instruction": "Sum all the prices in the list of dictionaries and output the result as an integer.",
        "input": "list_of_dictionaries = [{\"price\": 5}, {\"price\": 7}, {\"price\": 9}]",
        "output": "21",
        "abap": "It seems like you provided a number, but I'm ready to help with translating code into ABAP.\n\nHowever, if you're looking for an equivalent of the number 21 in ABAP, it would simply be written as:\n\n\"21\"\n\nIf you could provide more context or code that needs to be translated, I'd be happy to assist further."
    },
    {
        "instruction": "For the following two arrays, create a code snippet to return the intersecting element.",
        "input": "arr1 = [1, 9, 4, 10]\narr2 = [2, 4, 7, 8]",
        "output": "intersect_arr = [] \nfor i in arr1:\n    if i in arr2:\n        intersect_arr.append(i)\nreturn intersect_arr",
        "abap": "DATA: lt_intersect TYPE STANDARD TABLE OF string.\nLOOP AT it_arr1 INTO DATA(ls_item).\n  IF ls_item IN it_arr2[].\n    APPEND ls_item TO lt_intersect.\n  ENDIF.\nENDLOOP.\nlt_intersect = VALUE #( UNIQUE it_intersect ).\nRETURN.\n"
    },
    {
        "instruction": "Find the top 5 most common words in a given string.",
        "input": "s = \"Hello world, this is a sample string for the task\"",
        "output": "\"\"\"\nFind the top 5 most common words in a given string\n\"\"\"\n\nfrom collections import Counter\n\ndef get_top_five_words(s):\n    \"\"\"Get the top five most common words in a given string.\n    \n    Args:\n        s (str): The string to process.\n        \n    Returns:\n        list: A list of (word, count) tuples sorted in descending order\n            of the most common words.\n    \"\"\"\n    words = s.split()\n    counts = Counter(words).most_common(5)\n    return counts\n    \nif __name__ == '__main__':\n    s = \"Hello world, this is a sample string for the task\"\n    print(get_top_five_words(s))",
        "abap": "REPORT ztop_5_most_common_words.\n\nTYPES: BEGIN OF ty_word,\n         word TYPE string,\n         count TYPE i,\n       END OF ty_word.\n\nDATA: lt_word TYPE TABLE OF ty_word,\n      ls_word TYPE ty_word,\n      lv_string TYPE string VALUE 'Hello world, this is a sample string for the task'.\n\n\" Split the input string into words\nSPLIT lv_string AT space INTO TABLE DATA(lt_words).\n\n\" Create a table of word frequencies using a loop and a hash table\nDATA: lt_freqs TYPE STANDARD TABLE OF ty_word,\n      ls_freq  LIKE LINE OF lt_freqs.\n\nLOOP AT lt_words INTO ls_word.\n  READ TABLE lt_freqs WITH KEY word = ls_word-word BINARY SEARCH RESULTS DATA(lf_found).\n  IF sy-subrc <> 0.\n    ls_freq-word = ls_word-word.\n    ls_freq-count = 1.\n    APPEND ls_freq TO lt_freqs.\n  ELSE.\n    ADD 1 TO lf_found-count.\n  ENDIF.\nENDLOOP.\n\n\" Sort the word frequencies in descending order and limit to top 5\nSORT lt_freqs BY count DESCENDING.\nDELETE lt_freqs INDEX 5(6).\n\n\" Print the result\nLOOP AT lt_freqs INTO ls_word.\n  WRITE: ls_word-word, ls_word-count.\n  APPEND space TO cv_output.  \" Append newline character\nENDLOOP.\n\nWRITE:/.\n"
    },
    {
        "instruction": "Create a code that sorts element in an array.",
        "input": "",
        "output": "def sort_elements(arr):\n    return sorted(arr)",
        "abap": "CLASS lcl_sorting DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_elements\n        IMPORTING\n          iv_arr TYPE STANDARD TABLE OF ty_element\n        EXPORTING\n          ev_sorted TYPE STANDARD TABLE OF ty_element ).\n\nENDCLASS.\n\nCLASS lcl_sorting IMPLEMENTATION.\n  METHOD sort_elements.\n    DATA: lt_sorted TYPE STANDARD TABLE OF ty_element,\n          lv_index TYPE i.\n\n    SORT iv_arr INTO lt_sorted.\n\n    \" Alternative implementation using internal table with key\n    \" MODIFY iv_arr FROM ( VALUE #( ) )\n    \"    LOOP AT iv_arr ASSIGNING FIELD-SYMBOL(<ls_item>) .\n    \"      INSERT <ls_item> INTO TABLE iv_arr INDEX sy-index.\n    \"    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: BEGIN OF ty_element,\n         value TYPE string,\n       END OF ty_element.\n\nDATA: lt_input TYPE STANDARD TABLE OF ty_element,\n      lt_sorted TYPE STANDARD TABLE OF ty_element.\n\n\" Example usage\nlt_input = VALUE #( ( 'c' ) ( 'b' ) ( 'a' ) ).\nCALL METHOD lcl_sorting=>sort_elements\n  EXPORTING\n    iv_arr   = lt_input\n  IMPORTING\n    ev_sorted = lt_sorted.\nLOOP AT lt_sorted INTO DATA(ls_item).\n  WRITE: ls_item-value. \" Outputs: a, b, c\nENDLOOP.\n"
    },
    {
        "instruction": "Write a Java method that takes a string and prints out the number of occurrences of each letter in the string.",
        "input": "String = \"adda123de3f\"",
        "output": "public static void printLetterOccurrences(String str) {\n    int[] alphabet = new int[26];\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')\n            alphabet[str.charAt(i) - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (alphabet[i] > 0) {\n            System.out.println(\"Number of Occurrences of \" + (char)(i + 'a') \n                    + \" is \" + alphabet[i]); \n        }\n    }\n}\n\n// Output\n// Number of Occurrences of a is 2 \n// Number of Occurrences of d is 2 \n// Number of Occurrences of e is 1 \n// Number of Occurrences of f is 1",
        "abap": "CLASS lcl_print_letter_occurrences DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! <p>\n      \"! This class method prints the number of occurrences of each letter in a given string.\n      \"! </p>\n      \"! @parameter str\n      \"!\n      \"! String for which to calculate the letter occurrences.\n      CLASS-METHOD:\n        \"! <p>\n        \"! @parameter str\n        \"!\n        \"! Input parameter: a string for which to calculate the number of letter occurrences.\n        CLASS-METHOD:\n          \"! <p>\n          \"! @parameter str\n          \"!\n          \"! Input parameter: a string for which to calculate the number of letter occurrences.\n          IMPORTING\n            VALUE( iv_str ) TYPE string\n          EXPORTING\n            \"! <p>\n            \"! Number of letter occurrences for each letter in the input string.\n            DATA: lt_occurrences TYPE STANDARD TABLE OF ty_letter_occurrence ).\n\n    CLASS-METHOD:\n      METHOD printLetterOccurrences.\n\nENDCLASS.\n\nCLASS lcl_print_letter_occurrences IMPLEMENTATION.\n  METHOD printLetterOccurrences.\n    DATA: lv_alphabet TYPE i,\n          ls_occurrence LIKE LINE OF me->lt_occurrences,\n          lt_alphabet TYPE STANDARD TABLE OF i,\n          lv_counter TYPE i.\n\n    \" Create an alphabet of size 26\n    DO 26 TIMES.\n      APPEND 0 TO lt_alphabet.\n    ENDDO.\n\n    \" Iterate through the input string to count letter occurrences\n    LOOP AT iv_str INTO DATA(lv_char).\n      IF lv_char >= 'a' AND lv_char <= 'z'.\n        lv_counter = lv_char - 'a'.\n        lv_alphabet+lv_counter = lv_alphabet+lv_counter + 1.\n      ENDIF.\n    ENDLOOP.\n\n    \" Create a table of letter occurrences\n    DO 26 TIMES.\n      IF lv_alphabet+i = 0.\n        CONTINUE.\n      ENDIF.\n      ls_occurrence-letter = chr(97 + i).\n      ls_occurrence-count = lv_alphabet+i.\n      APPEND ls_occurrence TO lt_occurrences.\n    ENDDO.\n\n    \" Print the letter occurrences\n    LOOP AT lt_occurrences INTO DATA(ls_occurrence).\n      WRITE: / |Number of Occurrences of { ls_occurrence-letter } is { ls_occurrence-count }|.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Generate a random number between 0 and 1 (inclusively).",
        "input": "",
        "output": "Math.random(); // a random number between 0 and 1 (inclusively)",
        "abap": "Here's the equivalent code in ABAP:\n\n`DATA: lv_random TYPE f.\n\nlv_random = cl_abap_random=>create( seed => cl_abap_random=>get_seed( ) )->random_number( ).`\n\nThis will generate a random number between 0 and 1, inclusively. \n\nHowever, if you want it to be exactly the same as Math.random(), which generates numbers in the range [0, max), where 'max' is roughly the square root of the max value for the type (2^53 - 1) you should use:\n\n`DATA: lv_random TYPE f.\n\nlv_random = cl_abap_random=>create( seed => cl_abap_random=>get_seed( ) )->random( ).`\n\nNote that this will produce numbers up to approximately `3.14159265358979e+38`."
    },
    {
        "instruction": "Edit the provided CSS rule to make all elements with the class \"myClass\" have a bold font-weight.",
        "input": ".myClass { \n  font-size: 16px;\n}",
        "output": ".myClass { \n  font-size: 16px;\n  font-weight: bold;\n}",
        "abap": "Here is the equivalent ABAP code:\n\n```\nCLASS lcl_my_class DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      get_style\n        IMPORTING\n          it_attributes TYPE ty_attributes\n        EXPORTING\n          et_styles     TYPE STANDARD TABLE OF ty_style.\nENDCLASS.\n\nCLASS lcl_my_class IMPLEMENTATION.\n  METHOD get_style.\n    DATA: ls_style TYPE ty_style.\n\n    ls_style-font_size = 16.\n    ls_style-font_weight = 'bold'.\n\n    APPEND ls_style TO et_styles.\n  ENDMETHOD.\n\nTYPES: BEGIN OF ty_style,\n          font_size TYPE i,\n          font_weight TYPE string,\n        END OF ty_style.\n\nDATA: ty_attributes TYPE STANDARD TABLE OF STANDARD TABLE OF line TYPE string.\n\nCLASS lcl_my_class DEFINITION."
    },
    {
        "instruction": "Explain what is wrong with the following SQL statement.",
        "input": "SELECT column1, column2 FROM myTable;",
        "output": "The statement does not specify which records in MyTable it is attempting to retrieve, so it will return all columns of all records in the table.",
        "abap": "DATA: lr_table TYPE REF TO data.\n\nSELECT * FROM MyTable INTO CORRESPONDING FIELDS OF lr_table.\n"
    },
    {
        "instruction": "Estimate the time complexity of the following algorithm.",
        "input": "for i in range(n):\n    for j in range(n):\n        print(i + j)",
        "output": "O(n^2)",
        "abap": "REPORT ztime_complexity_example.\n\nTYPES: BEGIN OF ty_data,\n         value TYPE i,\n       END OF ty_data.\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_data.\n\n\" Generate some sample data to simulate a large list\nDO 10 TIMES.\n  APPEND VALUE #( value = _ ) TO lt_data.\nENDDO.\n\nLOOP AT lt_data INTO DATA(ls_data) FROM 1 LEAST 1000.\n  \" Perform a calculation on each element of the list\n  WRITE: / ls_data-value * ls_data-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a loop in Python to print all the numbers from 0 to 10",
        "input": "",
        "output": "for i in range(0, 11):\n  print(i)",
        "abap": "DATA: lv_index TYPE i.\n\nDO 11 TIMES.\n  WRITE: / lv_index.\n  ADD 1 TO lv_index.\nENDDO.\n"
    },
    {
        "instruction": "Design a function in Python that returns the median of an array of integers.",
        "input": "",
        "output": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]",
        "abap": "FORM median .\n  DATA: lv_sorted TYPE STANDARD TABLE OF i,\n        lv_length TYPE i.\n\n  SORT arr INTO lv_sorted.\n  lv_length = lines( arr ).\n\n  IF sy-dbcnt MOD 2 = 0.\n    \" even number of elements, take average of two middle values\n    DATA: lr_median TYPE REF TO data.\n    lr_median = NEW #( ( lv_sorted[ ( lv_length - 1 ) / 2 ] ).\n    lr_median = lr_median + lv_sorted[ ( lv_length - 1 ) / 2 + 1 ].\n    median = lr_median / 2 .\n  ELSE.\n    \" odd number of elements, take middle value\n    median = lv_sorted[ sy-dbcnt / 2 ].\n  ENDIF.\n\nENDFORM. \n"
    },
    {
        "instruction": "Create a script for sorting the given array in decreasing order.",
        "input": "const array = [5, 10, 8, 6, 4, 9, 2]",
        "output": "const sortedArray = array.sort((a, b) => b - a);",
        "abap": "DATA: lv_sorted_array TYPE STANDARD TABLE OF i.\n\nSORT SORTED ARRAY.\n"
    },
    {
        "instruction": "Create a function to calculate the area of a given circle.",
        "input": "",
        "output": "def area_circle(radius):\n    return 3.14 * (radius**2)",
        "abap": "FORM area_circle USING\n       p_radius TYPE f LENGTH 10.\n\nDATA: lv_area TYPE f.\n\nlv_area = 3.14 * ( p_radius ** 2 ).\nRETURN.\n"
    },
    {
        "instruction": "Create a function to convert Celsius to Fahrenheit.",
        "input": "",
        "output": "def celsius_to_fahrenheit(c):\n    f = c * (9/5) + 32\n    return f",
        "abap": "FORM fahrenheit_from_celsius USING p_celsius TYPE f VALUE(celsius),\n                            CHANGING p_fahrenheit TYPE f.\n\n  p_fahrenheit = ( p_celsius * ( 9 / 5 ) + 32 ).\n\nENDFORM.\n"
    },
    {
        "instruction": "Compare the performance of Grover's algorithm and classical search algorithms.",
        "input": "",
        "output": "Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms.",
        "abap": "CLASS zcl_grovers_algorithm DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      perform_search IMPORTING\n        database_size TYPE i DEFAULT 1000\n        target_value  TYPE i.\n\n  PROTECTED SECTION.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zcl_grovers_algorithm IMPLEMENTATION.\n  METHOD perform_search.\n    DATA: lv_target_found TYPE abap_bool.\n\n    \" Initialize database size and target value\n    DATA: lv_database_size TYPE i VALUE database_size,\n          lv_target_value   TYPE i VALUE target_value.\n\n    \" Create a temporary database (not actually used in this simplified example)\n    DATA: lt_temp_database TYPE STANDARD TABLE OF i.\n    DO lv_database_size TIMES.\n      APPEND sy-index TO lt_temp_database.\n    ENDDO.\n\n    \" Initialize number of iterations\n    DATA: lv_iterations TYPE i VALUE 8.\n\n    \" Start Grover's algorithm iteration loop\n    DO lv_iterations TIMES.\n      \" Apply Hadamard gate to all database entries\n      \" (In ABAP, we'll simulate this with a simple multiplication)\n\n      \" Calculate amplitude for target value\n      DATA: lv_amplitude_target TYPE f,\n            lv_amplitude_all    TYPE f.\n\n      \" Initialize amplitudes\n      lv_amplitude_target = 1.\n      lv_amplitude_all    = 1.\n\n      \" Update amplitudes after each iteration\n      lv_amplitude_all *= 0.5.\n      lv_amplitude_target *= -1 * (lv_database_size / lv_iterations).\n\n      \" Apply Grover's iteration formula\n      DATA: lv_result TYPE i,\n            lt_result TYPE STANDARD TABLE OF i.\n\n      DO lv_database_size TIMES.\n        DATA(ls_entry) = VALUE #( key sy-index ).\n        IF ls_entry-key  = lv_target_value.\n          APPEND -1 TO lt_result. \" Target value found, negate amplitude\n        ELSE.\n          APPEND 1 TO lt_result. \" Other values keep their amplitude\n        ENDIF.\n\n      ENDDO.\n\n      \" Calculate new amplitudes based on result\n      DATA: lv_new_amplitude_target TYPE f,\n            lv_new_amplitude_all    TYPE f.\n\n      DO lines( lt_result ) TIMES.\n        lv_new_amplitude_target *= -1 * (lv_database_size / lv_iterations).\n        lv_new_amplitude_all   *= 0.5.\n      ENDDO.\n\n      \" Update target value amplitude\n      lv_amplitude_target = lv_new_amplitude_target.\n\n      \" Check if target value found\n      IF lv_amplitude_target < -1 OR lv_amplitude_target > 1.\n        lv_target_found = abap_true.\n      ENDIF.\n\n    ENDDO.\n\n    IF NOT lv_target_found.\n      RAISE exception TYPE cx_static_check_message. \" Target value not found\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Create a program that can filter out words of a string that contain a specific character.",
        "input": "string = \"This is a sentence\"\ncharacter = 's'",
        "output": "def filter_string(string, character):\n    \"\"\"Filter out words of a string that contain a specific character.\"\"\"\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)",
        "abap": "REPORT zfilter_string.\n\nCLASS lcl_filter_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      filter_string\n        IMPORTING\n          string         TYPE string\n          character      TYPE c\n        RETURNING\n          VALUE(result) TYPE string .\nENDCLASS.\n\nCLASS lcl_filter_string IMPLEMENTATION.\n  METHOD filter_string.\n    DATA: words  TYPE STANDARD TABLE OF string,\n          filtered_words TYPE STANDARD TABLE OF string.\n\n    SPLIT string AT space INTO TABLE words.\n    LOOP AT words INTO DATA(word).\n      IF character NOT LIKE word.\n        APPEND word TO filtered_words.\n      ENDIF.\n    ENDLOOP.\n\n    TRANSFER filtered_words[] TO result SEPARATED BY space.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA(string TYPE string) = 'Hello World!'.\n  DATA(character TYPE c) = '!'.\n\n  DATA(result TYPE string) = lcl_filter_string=>filter_string( val = string char = character ).\n\n  WRITE: / result.\n"
    },
    {
        "instruction": "You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.",
        "input": "\"This , is an example string %\"",
        "output": "def remove_symbols(string):\n  text_string = ''\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  \n  return text_string\n\nprint(remove_symbols(\"This , is an example string %\"))",
        "abap": "CLASS z_remove_symbols DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_symbols\n        IMPORTING\n          iv_input  TYPE string\n        EXPORTING\n          ev_output TYPE string.\nENDCLASS.\n\nCLASS z_remove_symbols IMPLEMENTATION.\n  METHOD remove_symbols.\n    DATA: lv_text TYPE string VALUE '',\n          lv_char TYPE c.\n\n    LOOP AT iv_input INTO lv_char.\n      IF lv_char CS 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.\n        CONCATENATE lv_text lv_char INTO lv_text.\n      ENDIF.\n    ENDLOOP.\n\n    ev_output = lv_text.\n  ENDMETHOD.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD main.\n    DATA: lr_string TYPE string.\n\n    lr_string = 'This , is an example string %'.\n    PERFORM remove_symbols USING lr_string CHANGING result = lr_string.\n\n    WRITE: / lr_string.\n\n  ENDMETHOD.\n\nINITIALIZATION.\n  CALL METHOD lcl_main=>main.\n\nFORM remove_symbols\n  USING\n    iv_input TYPE string\n  CHANGING\n    cv_output TYPE string.\nENDFORM.\n"
    },
    {
        "instruction": "Connect to a MySQL database and select all rows from Customers where Phone is greater than 1000.",
        "input": "",
        "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"\",\n  passwd=\"\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers WHERE phone > 1000\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\n  print(x)",
        "abap": "REPORT zexample.\n\nDATA: lr_conn TYPE REF TO ifoconnection,\n       lo_sql TYPE REF TO clsql statement,\n       lt_result TYPE STANDARD TABLE OF ty_customer.\n\nTYPES: BEGIN OF ty_customer,\n         phone TYPE i,\n       END OF ty_customer.\n\nlr_conn = clodbc connection=>ifoadbcconnection~connect(\n  i_database = 'MYDATABASE'\n  i_username = ''\n  i_password = ''\n  i_host      = 'localhost' ).\n\nlo_sql = lr_conn->sql( )->create_statement( ).\nlo_sql->execute( \"SELECT * FROM customers WHERE phone > 1000\" ).\nlt_result = lo_sql->fetch_all( ).\n\nLOOP AT lt_result INTO DATA(ls_customer).\n  WRITE: ls_customer-phone.\nENDLOOP.\n\nlr_conn->close( ).\n"
    },
    {
        "instruction": "Write a code to remove the oldest elements from a list until the list contains at most 10 elements.",
        "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "def remove_old_elements(lst):\n  for i in range(len(lst) - 10):\n    lst.pop(0)\n  return lst\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "abap": "CLASS lcl_remove_old_elements DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_old_elements\n        IMPORTING\n          VALUE(iv_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_remove_old_elements IMPLEMENTATION.\n  METHOD remove_old_elements.\n    DATA: li_index TYPE i,\n          lt_result TYPE STANDARD TABLE OF i.\n\n    WHILE lines( iv_list ) GE 10.\n      DELETE table = iv_list INDEX '1'.\n    ENDWHILE.\n\n    rv_result = iv_list.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_list TYPE STANDARD TABLE OF i VALUE ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ).\n\nWRITE: remove_old_elements( lv_list ) .\n"
    },
    {
        "instruction": "Design an algorithm that creates a random password of 8 characters.",
        "input": "",
        "output": "def generate_password():\n    \"\"\"Generate a random password of 8 characters.\"\"\"\n    import random\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'\n    password = ''\n    for i in range(8):\n        password += random.SystemRandom().choice(chars)\n    return password",
        "abap": "CLASS lcl_password_generator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_password\n        IMPORTING\n          VALUE(iv_length) TYPE i DEFAULT 8\n        RETURNING\n          VALUE(rv_password) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_password_generator IMPLEMENTATION.\n  METHOD generate_password.\n    DATA: lv_chars TYPE string,\n          lv_random TYPE i,\n          lv_password TYPE string.\n\n    \" Define the character set for password generation\n    lv_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*('.\n\n    \" Initialize an empty password\n    lv_password = ''.\n\n    \" Generate a random password of specified length\n    DO iv_length TIMES.\n      lv_random = sy-tcline.\n      MOVE-CORRESPONDING lv_chars+lv_random(1) TO lv_char.\n      CONCATENATE lv_password lv_char INTO lv_password.\n    ENDDO.\n\n    \" Return the generated password\n    rv_password = lv_password.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a sorting algorithm that sorts an array using a bubble sort.",
        "input": "nums=[3,4,1,2,9,6]",
        "output": "def bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums",
        "abap": "FORM bubble_sort\n  USING\n    it_array TYPE SORTED TABLE OF i.\n\n  DATA: lv_i TYPE i,\n        lv_j TYPE i.\n\n  DO.\n    DATA(lv_found) = abap_true.\n    DO it_array[] TIMES.\n      lv_i = sy-index - 1.\n      TRANSLATE lv_i TO UPPER CASE.\n      DO it_array[] TIMES.\n        lv_j = sy-index - 1.\n        TRANSLATE lv_j TO UPPER CASE.\n\n        IF it_array[lv_i] > it_array[lv_j].\n          DATA(lv_temp) = it_array[lv_i].\n          it_array[lv_i] = it_array[lv_j].\n          it_array[lv_j] = lv_temp.\n        ENDIF.\n      ENDDO.\n    ENDDO.\n\n    IF abap_true = lv_found. EXIT. ENDIF.\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create a Java class to represent a TV show.",
        "input": "",
        "output": "public class TVShow {\n  private String title; \n  private String network;\n  private String genre;\n  private int episodes;\n  \n  public TVShow(String t, String n, String g, int e) {\n    title = t;\n    network = n;\n    genre = g;\n    episodes = e;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public String getNetwork() {\n    return network;\n  }\n  \n  public String getGenre() {\n    return genre;\n  }\n  \n  public int getEpisodes() {\n    return episodes;\n  }\n}",
        "abap": "CLASS tv_show DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor\n        IMPORTING\n          title TYPE string\n          network TYPE string\n          genre TYPE string\n          episodes TYPE i\n        RAISING\n          cx_no_check.\n\n    METHODS:\n      get_title\n        RETURNING\n          VALUE(title) TYPE string,\n\n      get_network\n        RETURNING\n          VALUE(network) TYPE string,\n\n      get_genre\n        RETURNING\n          VALUE(genre) TYPE string,\n\n      get_episodes\n        RETURNING\n          VALUE(episodes) TYPE i.\n\n  PRIVATE SECTION.\n    DATA: title TYPE string,\n          network TYPE string,\n          genre TYPE string,\n          episodes TYPE i.\n\nENDCLASS.\n\nCLASS tv_show IMPLEMENTATION.\n  METHOD constructor.\n    CHECK ita_check. \" Dummy check to mimic Java's private visibility modifier\n    title = title.\n    network = network.\n    genre = genre.\n    episodes = episodes.\n  ENDMETHOD.\n\n  METHOD get_title.\n    title = title.\n  ENDMETHOD.\n\n  METHOD get_network.\n    network = network.\n  ENDMETHOD.\n\n  METHOD get_genre.\n    genre = genre.\n  ENDMETHOD.\n\n  METHOD get_episodes.\n    episodes = episodes.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Find the longest palindrome in a given string using Python.",
        "input": "string = \"My name is John\"",
        "output": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome",
        "abap": "CLASS lcl_longest_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      longest_palindrome\n        IMPORTING\n          iv_string TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_longest_palindrome IMPLEMENTATION.\n  METHOD longest_palindrome.\n    DATA: lv_palindrome TYPE string,\n          lv_length TYPE i,\n          ls_substring LIKE LINE OF ty_substrings.\n\n    DATA: lt_substrings TYPE STANDARD TABLE OF ty_substrings,\n          ls_substrings LIKE LINE OF ty_substrings.\n\n    FIELD-SYMBOLS:\n      <fs_substring> LIKE ls_substring.\n\n    \" Generate all possible substrings\n    DO.\n      \" Loop over the string from start to end\n      LOOP AT iv_string INTO DATA(lv_char) FROM i = 1 TO strlen( iv_string ).\n        lv_length = strlen( iv_string ) - i + 1.\n        DO lv_length TIMES.\n          \" Create substring from current index to end of string\n          ls_substring = CONV #( iv_string+i-1 lv_length ).\n          APPEND ls_substring TO lt_substrings.\n        ENDDO.\n      ENDDO.\n    ENDDO.\n\n    \" Find longest palindrome substring\n    DATA: lv_index TYPE i.\n\n    SORT lt_substrings BY length DESCENDING.\n    DO.\n      <fs_substring> = VALUE #( BASE lt_substrings[ 1 ] ).\n      IF <fs_substring> <> <fs_substring>[]-<fs_substring>[]*-1.\n        \" Check if substring is palindrome\n        DATA(lv_reversed) = reverse( val = <fs_substring> ).\n\n        IF <fs_substring> = lv_reversed AND <fs_substring>[] > strlen( palindrome ).\n          palindrome = <fs_substring>.\n        ENDIF.\n\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    rv_result = palindrome.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "What is the difference between a for loop and a while loop in Java?",
        "input": "",
        "output": "The main difference between for and while loop is that for loop is used when we already know the number of times the loop should iterate, while a while loop is used when the number of iterations is not known in advance. Another difference is that for loop is more convenient for looping through arrays/collections of objects, while a while loop is used for performing more complex computations.",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\n\n\" Initialize the array\nlv_array = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\n\n\" For loop to iterate through the array\nFOR i FROM 0 LEAVING SPACE\n    UNTIL sy-index > size( lv_array ).\n    WRITE: / lv_array[ sy-index ].\nENDFOR.\n"
    },
    {
        "instruction": "Write a Python function to format a specified string to limit the number of characters to 6.",
        "input": "string = \"Hello world\"",
        "output": "def limit_char(string):\n    if len(string) > 6 :\n        return string[:6]\n    else:\n        return string",
        "abap": "CLASS lcl_limit_char DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      limit_char IMPORTING\n          iv_string TYPE string\n        RETURNING\n          rv_result TYPE string .\nENDCLASS.\n\nCLASS lcl_limit_char IMPLEMENTATION.\n  METHOD limit_char.\n    IF strlen( iv_string ) > 6.\n      rv_result = iv_string+0(6).\n    ELSE.\n      rv_result = iv_string.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Given the following two lists, create a new list containing the elements of both lists",
        "input": "list1 = [1, 2, 3]\nlist2 = [4, 5]",
        "output": "list3 = list1 + list2\nprint(list3)",
        "abap": "DATA: lv_list1 TYPE standard table OF i,\n      lv_list2 TYPE standard table OF i,\n      lv_list3 TYPE STANDARD TABLE OF I.\n\nlv_list1 = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\nlv_list2 = VALUE #( ( 4 ) ( 5 ) ).\n\nAPPEND LINES OF lv_list1 TO lv_list3.\nAPPEND LINES OF lv_list2 TO lv_list3.\n\nWRITE: lv_list3.\n"
    },
    {
        "instruction": "Find the closest decimal approximation of 0.875.",
        "input": "",
        "output": "0.88",
        "abap": "Here's the ABAP equivalent of the number `0.88`:\n\nDATA: lv_number TYPE p DECIMALS 2 VALUE '0.88'."
    },
    {
        "instruction": "Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0.",
        "input": "",
        "output": "import numpy as np\nnp.random.RandomState(0).rand(3, 3)",
        "abap": "DATA: lr_random_state TYPE REF TO cl_random,\n       lt_matrix TYPE STANDARD TABLE OF i VALUE.\n\nCREATE OBJECT lr_random_state TYPE cl_random.\nlr_random_state->set_seed( 0 ).\n\nLOOP AT 3 INTO DATA(lv_row) TIMES.\n  LOOP AT 3 INTO DATA(lv_col) TIMES.\n    APPEND lv_row + lv_col TO lt_matrix.\n  ENDLOOP.\nENDLOOP.\n\nDATA: lo_rnd TYPE REF TO cl_abap_random_generator,\n      li_value TYPE i.\n\nCREATE OBJECT lo_rnd TYPE cl_abap_random_generator.\nlo_rnd->set_seed( lr_random_state->get_seed() ).\n\nLOOP AT 3 INTO DATA(lv_row) TIMES.\n  LOOP AT 3 INTO DATA(lv_col) TIMES.\n    CALL METHOD lo_rnd->uniform_int4\n      IMPORTING\n        p_value = li_value.\n    APPEND li_value TO lt_matrix.\n  ENDLOOP.\nENDLOOP.\n\nCL_SYS_SERIALIZER=>serialize( lt_matrix ).\n\n\n\" or\n\nDATA: lr_matrix TYPE STANDARD TABLE OF i VALUE,\n      lv_row TYPE i,\n      lv_col TYPE i,\n      ls_random TYPE i.\n\nDO 3 TIMES.\n  DO 3 TIMES.\n    CALL METHOD cl_abap_random=>random_int4\n      IMPORTING\n        p_value = ls_random.\n    APPEND ls_random TO lr_matrix.\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Create a SQL query to find the average salary of all employees in the department labeled \"sales\".",
        "input": "",
        "output": "SELECT AVG(salary) \nFROM Employees \nWHERE department = 'sales';",
        "abap": "REPORT zavg_salary.\n\nTYPES: BEGIN OF ty_employees,\n         salary TYPE f,\n       END OF ty_employees.\n\nDATA: lt_employees TYPE STANDARD TABLE OF ty_employees,\n      lv_avg_salary TYPE f.\n\nSELECT salary FROM employees INTO CORRESPONDING FIELDS OF TABLE lt_employees WHERE department = 'sales'.\n\nIF sy-dbcnt > 0.\n  DO.\n    DATA(lv_sum) = 0.\n    LOOP AT lt_employees INTO DATA(ls_employees).\n      ADD ls_employees-salary TO lv_sum.\n    ENDLOOP.\n\n    lv_avg_salary = lv_sum / sy-dbcnt.\n    EXIT.\n  ENDDO.\nENDIF.\n\nWRITE: / 'Average Salary:', lv_avg_salary.\n"
    },
    {
        "instruction": "Write an HTML code to create a horizontal line.",
        "input": "",
        "output": "<hr>",
        "abap": "No code to translate yet. What do you need help with?"
    },
    {
        "instruction": "Write a Ruby program to search for a specific item in an array of strings.",
        "input": "array = [\"Apple\",\"Banana\",\"Mango\",\"Orange\"]",
        "output": "def search_array(array, item) \n  return array.include?(item)\nend\n  \nputs search_array(array, \"Mango\") #true",
        "abap": "REPORT zsearch_array.\n\nCLASS lcl_search_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      search_array\n        IMPORTING\n          it_array TYPE STANDARD TABLE OF string\n          item     TYPE string\n        RETURNING\n          VALUE(rv_bool) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_search_array IMPLEMENTATION.\n  METHOD search_array.\n    DATA: lv_found TYPE abap_bool.\n\n    FIND item IN it_array TRANSPORTING NO FIELDS MATCH BINARY EQ INTO lv_found.\n    rv_bool = lv_found.\n  ENDMETHOD.\n\nSTART-OF-SELECTION.\n  DATA: array TYPE STANDARD TABLE OF string,\n        bool  TYPE abap_bool.\n\n  APPEND \"Mango\" TO array.\n  APPEND \"Apple\" TO array.\n  APPEND \"Banana\" TO array.\n\n  bool = lcl_search_array=>search_array( it_array = array item = \"Mango\" ).\n\n  WRITE: / bool. \" true\n"
    },
    {
        "instruction": "Convert the following nested for loop into a single line list comprehension.",
        "input": "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nresult = []\nfor i in a:\n    for j in b:\n        result.append((i, j))",
        "output": "result = [(i,j) for i in a for j in b]",
        "abap": "DATA: lt_result TYPE STANDARD TABLE OF ty_coordinates.\n\nTYPES: BEGIN OF ty_coordinates,\n         i TYPE i,\n         j TYPE i,\n       END OF ty_coordinates.\n\nLOOP AT a INTO DATA(ls_i).\n  LOOP AT b INTO DATA(ls_j).\n    APPEND VALUE #( i = ls_i-j\n                   j = ls_j ) TO lt_result.\n  ENDLOOP.\nENDLOOP.\n\ncl_abap_char_utilities=>cr_line( itab = lt_result ).\n"
    },
    {
        "instruction": "Create a for loop to print the numbers from 1 to 100.",
        "input": "",
        "output": "for i in range(1, 101):\n    print(i)",
        "abap": "DO.\n  DATA: lv_counter TYPE i.\n\n  lv_counter = 1.\n  WHILE lv_counter LE 100.\n    WRITE: lv_counter.\n    ADD 1 TO lv_counter.\nENDDO.\n"
    },
    {
        "instruction": "Using Python, create a list containing the first 20 prime numbers.",
        "input": "",
        "output": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "abap": "DATA: ls_primes TYPE STANDARD TABLE OF i.\n\nls_primes = VALUE #( ( 2 ) ( 3 ) ( 5 ) ( 7 )\n                     ( 11 ) ( 13 ) ( 17 ) ( 19 )\n                     ( 23 ) ( 29 ) ( 31 ) ( 37 )\n                     ( 41 ) ( 43 ) ( 47 ) ( 53 )\n                     ( 59 ) ( 61 ) ( 67 ) ( 71 ) ).\n\nCLASS lcl_primes DEFINITION.\nENDCLASS.\n\nCLASS lcl_primes IMPLEMENTATION.\n  METHOD get_primes.\n    \" no implementation needed here\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: ls_primes TYPE STANDARD TABLE OF i,\n        obj_primes TYPE REF TO lcl_primes.\n\n  CREATE OBJECT obj_primes TYPE lcl_primes.\n  CALL METHOD obj_primes->get_primes( IMPORTING et_primes = ls_primes ).\n\n  LOOP AT ls_primes INTO DATA(la_prime).\n    WRITE: / la_prime.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Improve the following code to handle an input which is an empty list.",
        "input": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)",
        "output": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    elif not arr:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)",
        "abap": "CLASS lcl_check_even DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_even\n        IMPORTING\n          iv_array TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_check_even IMPLEMENTATION.\n  METHOD check_even.\n    IF iv_array IS INITIAL.\n      rv_result = 'The list is empty!'.\n    ELSEIF iv_array[] IS NOT ASSIGNED.\n      rv_result = 'The list is empty!' .\n    ELSE.\n      DATA: lv_bool TYPE abap_bool.\n\n      LOOP AT iv_array INTO DATA(ls_element).\n        lv_bool = ls_element MOD 2 = 0 AND lv_bool.\n      ENDLOOP.\n\n      IF lv_bool = abap_true.\n        rv_result = 'All elements in the list are even.' .\n      ELSEIF sy-subrc <> 0.\n        rv_result = 'Not all elements in the list are even.' .\n      ENDIF.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a dictionary for counting the occurrence of each letter in the given string.",
        "input": "string = \"hello world\"\n#TODO",
        "output": "string = \"hello world\"\nletter_counts = {}\n\nfor letter in string:\n    if letter in letter_counts:\n       letter_counts[letter] += 1\n    else:\n        letter_counts[letter] = 1\n\nprint(letter_counts)",
        "abap": "DATA: lv_string TYPE string VALUE 'hello world',\n      lt_letter_counts TYPE ty_table_of_character_with_key.\n\nLOOP AT lv_string INTO DATA(lv_char).\n  READ TABLE lt_letter_counts FROM lv_char IF FOUND.\n    MODIFY lt_letter_counts INDEX sy-tabix WITH VALUE #( count = lt_letter_counts[ sy-tabix-idx ][ count ] + 1 ).\n  ELSE.\n    INSERT lv_char INTO TABLE lt_letter_counts.\n  ENDIF.\nENDLOOP.\n\nSORT lt_letter_counts BY key.\n\nWRITE: / 'Letter Counts:'.\nLOOP AT lt_letter_counts INTO DATA(lv_key_value).\n  WRITE: / lv_key_value-key, ':', lv_key_value-count.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a bash script that prints out \"Hello World\" five times.",
        "input": "",
        "output": "#!/bin/bash\n \nfor i in `seq 1 5`;\ndo\n  echo \"Hello World!\"\ndone",
        "abap": "REPORT zhello_world.\n\nDATA: lv_counter TYPE i VALUE 1.\nDO 5 TIMES.\n  WRITE:/ 'Hello World!'.\n  ADD 1 TO lv_counter.\nENDDO.\n"
    },
    {
        "instruction": "Write a function to get the mean of the given list of numbers.",
        "input": "lst = [1, 4, 5, 9, 3]",
        "output": "def mean(lst):\n    # calculate the sum\n    total = 0\n    for item in lst:\n        total += item\n    \n    # calculate the mean\n    mean = total / len(lst)\n    return mean\n\nprint(mean(lst))",
        "abap": "CLASS lcl_mean DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      mean IMPORTING it_list TYPE STANDARD TABLE OF f.\n\nENDCLASS.\n\nCLASS lcl_mean IMPLEMENTATION.\n  METHOD mean.\n    DATA: total TYPE p DECIMALS 2,\n          lv_mean TYPE p DECIMALS 2.\n\n    LOOP AT it_list INTO DATA(lv_item).\n      total += lv_item.\n    ENDLOOP.\n\n    IF lines( it_list ) = 0.\n      RAISE EXCEPTION TYPE cx_static_check message 'List is empty'.\n    ENDIF.\n\n    lv_mean = total / lines( it_list ).\n    ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "How do you count the number of specific characters in a given string?",
        "input": "",
        "output": "You can use the count() method in Python to count the number of specific characters in a given string. For example:\n\ns = 'My name is John'\n\nnum_of_char = s.count('o')\n\nprint(num_of_char) #Output: 2",
        "abap": "REPORT zcount_chars_in_string.\n\nDATA:\n  lv_string TYPE string VALUE 'My name is John',\n  lv_count  TYPE i.\n\nlv_count = strlen( val = lv_string ) - strlen(\n  condense( val = lv_string except '' )\n  ).\n\nWRITE: / lv_count.\n"
    },
    {
        "instruction": "Generate a unique and random password for a user using python.",
        "input": "",
        "output": "import random \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.choices(characters, k = 16) \nprint(\"\".join(password))",
        "abap": "TYPES: BEGIN OF ty_character,\n         char TYPE c LENGTH 1,\n       END OF ty_character.\n\nDATA: lr_characters TYPE TABLE OF ty_character,\n      lv_password    TYPE string.\nDATA: ls_char TYPE ty_character.\n\nDATA: lt_random_chars TYPE STANDARD TABLE OF i.\n\n\" Define the set of characters\nDATA: lt_characters TYPE STANDARD TABLE OF ty_character.\nAPPEND VALUE #( char = 'a' ) TO lt_characters.\nAPPEND VALUE #( char = 'A' ) TO lt_characters.\nAPPEND VALUE #( char = '1' ) TO lt_characters.\nAPPEND VALUE #( char = '2' ) TO lt_characters.\n\" ... add all the other characters to the table\n\n\" Generate random choices\nDO 16 TIMES.\n  INSERT value -1 INTO TABLE lt_random_chars. \" Reserve space for random numbers\nENDDO.\n\nLOOP AT lt_random_chars ASSIGNING FIELD-SYMBOL(<fs_index>).\n  MOVE-CORRESPONDING VALUE #( random = sy-index ) TO <fs_index>.\nENDLOOP.\n\n\" Generate the password by selecting a random character from the list\nDATA: lv_length TYPE i.\n\nCLEAR: lt_random_chars.\n\nDO 16 TIMES.\n  lv_length += 1.\n  READ TABLE lt_characters INDEX lt_random_chars[ <fs_index> ] INTO ls_char.\n  APPEND ls_char TO lv_password.\nENDDO.\n\n\" Print the password\nWRITE: / lv_password.\n"
    },
    {
        "instruction": "Suggest a data structure to store the following data.",
        "input": "Names of fruits and vegetables in an online grocery store",
        "output": "A HashMap could be a suitable data structure to store the names of fruits and vegetables in an online store. The keys should be the names of the fruits and vegetables, and the values should store a description or additional information about them. For example, the key could be \"Banana\" and the value could be \"A yellow-skinned fruit with a sweet taste\".",
        "abap": "TYPES: BEGIN OF ty_fruit,\n          name TYPE string,\n          description TYPE string,\n        END OF ty_fruit.\n\nDATA: lt_fruits TYPE STANDARD TABLE OF ty_fruit.\n\nINITIALIZATION.\n  APPEND VALUE #( name = 'Banana' description = 'A yellow-skinned fruit with a sweet taste' ) TO lt_fruits.\n  APPEND VALUE #( name = 'Apple' description = 'A crunchy red or green fruit' ) TO lt_fruits.\n\nCLASS lcl_data_structure DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_fruit_description IMPORTING\n        p_name TYPE string\n        CHANGING\n          cp_description TYPE string.\nENDCLASS.\n\nCLASS lcl_data_structure IMPLEMENTATION.\n  METHOD get_fruit_description.\n    READ TABLE lt_fruits INTO DATA(ls_fruit) WITH KEY name = p_name.\n    IF sy-subrc <> 0.\n      cp_description = 'Fruit not found'.\n    ELSE.\n      cp_description = ls_fruit-description.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  lcl_data_structure=>get_fruit_description( 'Banana' CHANGING cp_description = DATA(lv_description) ).\n  WRITE: / lv_description.\n\n  lcl_data_structure=>get_fruit_description( 'Apple' CHANGING cp_description = lv_description ).\n  WRITE: / lv_description.\n"
    },
    {
        "instruction": "Create a JavaScript function that converts all the characters in a string to uppercase.",
        "input": "",
        "output": "function toUpperCase(string) {\n return string.toUpperCase();\n}",
        "abap": "FORM z_upper_case\n  USING\n    p_string TYPE string.\n  RETURN\n    value string.\n\n  WRITE TO p_string UP TO p_string.\n  TRANSLATE p_string TO UPPER CASE.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Write a code to print the current date and time in ISO format.",
        "input": "",
        "output": "from datetime import datetime\n\ndate_time_obj = datetime.now()\n\nprint(date_time_obj.isoformat()) # prints \"2020-07-29T15:10:01.584131\"",
        "abap": "REPORT zdatetime_example.\n\nDATA: lt_date_time TYPE i,\n       lv_date_time TYPE time.\n\nlt_date_time = sy-uzeit.\nlv_date_time = sy-datum && 'T' && sy-uzeit.\n\nWRITE: / lv_date_time. \" prints date and time in the format \"YYYY-MM-DDTHH:MM:SS\"\n"
    },
    {
        "instruction": "Design a function in Python to delete duplicates from a list.",
        "input": "The list is: [2, 3, 2, 4, 5, 5, 6]",
        "output": "def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]",
        "abap": "REPORT zremove_duplicates.\n\nTYPES: BEGIN OF ty_list,\n         value TYPE i,\n       END OF ty_list.\n\nDATA: list TYPE STANDARD TABLE OF ty_list.\n\nINITIALIZATION.\n  APPEND VALUE #( value = 2 ) TO list.\n  APPEND VALUE #( value = 3 ) TO list.\n  APPEND VALUE #( value = 2 ) TO list.\n  APPEND VALUE #( value = 4 ) TO list.\n  APPEND VALUE #( value = 5 ) TO list.\n  APPEND VALUE #( value = 5 ) TO list.\n  APPEND VALUE #( value = 6 ) TO list.\n\nSTART-OF-SELECTION.\n  DATA(unique_list) = VALUE ty_list[ ].\n\nLOOP AT list INTO DATA(line).\n  IF line-value NOT IN unique_list.\n    APPEND line TO unique_list.\n  ENDIF.\n  MODIFY unique_list FROM line.\nENDLOOP.\n\nWRITE: / 'Original List:', LIST lines( list ).\nWRITE: / 'Unique List:', LIST lines( unique_list ).\n"
    },
    {
        "instruction": "Modify the code below to make it calculate the sum of all the numbers from 1 to n.",
        "input": "num = 5\nsum = 0\nfor i in range(num):\n  sum += i",
        "output": "num = 5\nsum = 0\nfor i in range(1, num+1):\n  sum += i",
        "abap": "DATA: lv_num TYPE i VALUE 5,\n      lv_sum TYPE i.\n\nDO lv_num TIMES.\n  ADD sy-index TO lv_sum.\nENDDO.\n"
    },
    {
        "instruction": "Name three types of looping structures in Java.",
        "input": "",
        "output": "The three types of looping structures in Java are for-loops, while-loops, and do-while loops.",
        "abap": "DATA: lv_index TYPE i.\nDO 5 TIMES.\n  WRITE: / lv_index.\n  ADD 1 TO lv_index.\nENDDO.\n"
    },
    {
        "instruction": "Create a function to collect all the alphabets from a given string.",
        "input": "The string is \"My name is John!\"",
        "output": "//Function to collect all the alphabets\nfunction getAlphabets(str) {\n  const result = [];\n  for(let i=0; i < str.length; i++) {\n    if(str[i].match(/[a-z]/i)) {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n\n//Call function and pass the string as parameter\nlet alphabets = getAlphabets(\"My name is John!\"); \nconsole.log(alphabets); // Output: [\"M\", \"y\", \"n\", \"a\", \"m\", \"e\", \"i\", \"s\", \"J\", \"o\", \"h\"]",
        "abap": "CLASS lcl_alphabet_collector DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_alphabets\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          et_result TYPE stringt.\n\nENDCLASS.\n\nCLASS lcl_alphabet_collector IMPLEMENTATION.\n  METHOD get_alphabets.\n    DATA: lt_result TYPE STANDARD TABLE OF string.\n\n    LOOP AT string INTO DATA(lv_char).\n      IF lv_char MATCHES '[a-z]' IGNORING CASE .\n        APPEND lv_char TO et_result.\n      ENDIF.\n    ENDLOOP.\n\n    et_result = VALUE #( it_body = it_result ).\n  ENDMETHOD.\nENDCLASS.\n\n\" Call function and pass the string as parameter\nDATA: lo_collector TYPE REF TO lcl_alphabet_collector,\n       lt_alphabets TYPE STANDARD TABLE OF string.\nlo_collector = NEW lcl_alphabet_collector( ).\nlt_alphabets = lo_collector->get_alphabets( 'My name is John!' ).\n\nWRITE: / lt_alphabets. \" Output: [\"M\", \"y\", \"n\", \"a\", \"m\", \"e\", \"i\", \"s\", \"J\", \"o\", \"h\"]\n"
    },
    {
        "instruction": "Create a JavaScript function which takes a string as a parameter and returns the most frequent character in the string.",
        "input": "'Hello World!'",
        "output": "function mostFrequentChar(string) {\n    let charMap = {};\n    let maxCount = 0;\n    let freqChar = '';\n  \n    for (let char of string) {\n        if (charMap[char]) {\n            charMap[char]++;\n        } else {\n            charMap[char] = 1;\n        }\n    }\n  \n    for (let char in charMap) {\n        if (charMap[char] > maxCount) {\n            maxCount = charMap[char];\n            freqChar = char;\n        }\n    }\n  \n    return freqChar;\n}",
        "abap": "CLASS lcl_most_frequent_char DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      mostFrequentChar IMPORTING string TYPE string\n                        RETURNING value(result) TYPE char1.\nENDCLASS.\n\nCLASS lcl_most_frequent_char IMPLEMENTATION.\n  METHOD mostFrequentChar.\n    DATA: lv_char_map TYPE STANDARD TABLE OF i,\n          lv_max_count TYPE i,\n          lv_freq_char TYPE char1.\n\n    \" Create a map to store the frequency of each character\n    DO strlen( string ) TIMES.\n      lv_char_map = VALUE #( ( sy-index1( string ) ) ).\n      \" Count the occurrences of each character in the input string\n      DO strlen( string ) TIMES.\n        IF sy-index1( string ) = lv_char_map[ sy-index - 1 ].\n          lv_char_map+0(1) += 1.\n        ENDIF.\n      ENDDO.\n\n      \" Find the maximum frequency and the corresponding character\n      READ TABLE lv_char_map WITH KEY table_line > max_count INTO DATA(ls_tmp).\n      IF sy-subrc = 0.\n        max_count = ls_tmp-table_line.\n        freq_char = ls_tmp-key.\n      ELSE.\n        BREAK statement 'No max count found'.\n      ENDIF.\n\n    ENDDO.\n\n    result = freq_char.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Parse the string and return the number of unique alphabets in the string.",
        "input": "StringInput = \"apple\"",
        "output": "int count = 0;\nfor (int i = 0; i < StringInput.length(); i++) {\n  if ((StringInput.charAt(i) >= 'a' && StringInput.charAt(i) <= 'z') || (StringInput.charAt(i) >= 'A' && StringInput.charAt(i) <= 'Z')) {\n   count++;\n  }\n}\nSystem.out.println(\"Number of unique alphabets: \" + count);",
        "abap": "DATA: lv_input TYPE string,\n      lv_count TYPE i.\n\nlv_input = stringInput. \" assuming StringInput is a character field in ABAP\nLOOP AT lv_input INTO DATA(lv_char) FROM 1 LEVEN IN CHARACTER MODE.\n  IF lv_char CS 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    ADD 1 TO lv_count.\n  ENDIF.\nENDLOOP.\n\nWRITE: / |Number of unique alphabets:|, lv_count.\n"
    },
    {
        "instruction": "Sort this list in ascending order",
        "input": "lst = [7, 11, 4, 9, 2, 10]",
        "output": "lst.sort()\nprint(lst)",
        "abap": "DATA: lt_list TYPE STANDARD TABLE OF i.\n\nAPPEND 1 TO lt_list.\nAPPEND 3 TO lt_list.\nAPPEND 2 TO lt_list.\n\nSORT lt_list.\n\nWRITE: / lt_list.\n"
    },
    {
        "instruction": "Edit the Java code to filter out the persons whose age is less than 18.",
        "input": "List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    System.out.println(person.getName());\n}",
        "output": "List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    if (person.getAge() >= 18) {\n        System.out.println(person.getName());\n    }\n}",
        "abap": "DATA: lt_persons TYPE STANDARD TABLE OF ty_person.\n\nLOOP AT lt_persons INTO DATA(ls_person).\n  IF ls_person-age >= 18.\n    WRITE: / ls_person-name.\n  ENDIF.\nENDLOOP.\n\nTYPES: BEGIN OF ty_person,\n          name TYPE string,\n          age  TYPE i,\n        END OF ty_person.\nDATA: ls_person TYPE ty_person.\n"
    },
    {
        "instruction": "Print the first 5 elements of the following list.",
        "input": "my_list = [2, 4, 6, 8, 10, 12, 14]",
        "output": "for elem in my_list[:5]:\n    print(elem)",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i,\n      wa TYPE i.\n\n\" Populate lv_list with data (replace this with your actual data)\nlv_list = VALUE #( 1 2 3 4 5 ).\n\nLOOP AT lv_list INTO wa.\n  WRITE: / wa.\nENDLOOP.\n"
    },
    {
        "instruction": "Design an algorithm to find the shortest path in a maze using JavaScript.",
        "input": "",
        "output": "function findShortestPath(maze) {\n    let visited = new Set();\n\n    let queue = [];\n    queue.push({\n        row: 0,\n        col: 0\n    });\n\n    let minLength = Number.POSITIVE_INFINITY;\n\n    while (queue.length > 0) {\n        let node = queue.shift();\n        let row = node.row;\n        let col = node.col;\n        let length = node.length;\n\n        // Reached the end\n        if (row === maze.length - 1 && col === maze[0].length - 1) {\n            minLength = Math.min(minLength, length);\n        }\n\n        // Add neighbors\n        if (row - 1 >= 0 && maze[row - 1][col] === 0\n            && !visited.has(row - 1 + '_' + col)) {\n            queue.push({\n                row: row - 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row - 1 + '_' + col);\n        }\n\n        if (row + 1 < maze.length && maze[row + 1][col] === 0\n            && !visited.has(row + 1 + '_' + col)) {\n            queue.push({\n                row: row + 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row + 1 + '_' + col);\n        }\n\n        if (col - 1 >= 0 && maze[row][col - 1] === 0\n            && !visited.has(row + '_' + (col - 1))) {\n            queue.push({\n                row: row,\n                col: col - 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col - 1));\n        }\n\n        if (col + 1 < maze[0].length && maze[row][col + 1] === 0\n            && !visited.has(row + '_' + (col + 1))) {\n            queue.push({\n                row: row,\n                col: col + 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col + 1));\n        }\n    }\n\n    return minLength;\n}",
        "abap": "REPORT zfind_shortest_path.\n\nCLASS lcl_maze DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n    CLASS-METHODS:\n      findShortestPath IMPORTING maze TYPE ty_matrix\n                           RETURNING value(minLength) TYPE i.\nENDCLASS.\n\nCLASS lcl_maze IMPLEMENTATION.\n  METHOD findShortestPath.\n    DATA: lv_visited TYPE htbl,\n          ls_queue   TYPE t_queue.\n\n    \" Initialize the visited set and queue\n    CLEAR: lv_visited,\n           ls_queue.\n\n    APPEND INITIAL LINE TO ls_queue ASSIGNING FIELD-SYMBOL(<ls_node>).\n    <ls_node>-row = 0.\n    <ls_node>-col = 0.\n    <ls_node>-length = 0.\n\n    \" Set the visited set\n    INSERT VALUE #( key = ( 0 ) ) INTO TABLE lv_visited.\n\n    \" Perform BFS until queue is empty\n    WHILE ls_queue IS NOT INITIAL.\n      SORT: ls_queue BY length ASCENDING.\n\n      DATA(lv_min_length) = sy-dbcnt.\n\n      LOOP AT ls_queue ASSIGNING <ls_node>.\n        \" Reached the end\n        IF ( <ls_node>-row = maze-rows AND <ls_node>-col = maze-cols ).\n          minValue = MIN( min_value, <ls_node>-length ).\n        ENDIF.\n\n        \" Add neighbors to queue if not visited\n        IF <ls_node>-row > 0 AND maze(<ls_node>-row)(<ls_node>-col) = 0\n          AND NOT line_exists( lv_visited[ key = ( <ls_node>-row ) ] ) ).\n\n          DATA(ls_neighbor) =\n          VALUE #( row = <ls_node>-row - 1\n                     col = <ls_node>-col\n                     length = <ls_node>-length + 1 ).\n          INSERT ls_neighbor INTO TABLE ls_queue.\n          INSERT VALUE #( key = ( <ls_node>-row - 1 ) ) INTO TABLE lv_visited.\n\n        ENDIF.\n\n        IF <ls_node>-row < maze-rows AND maze(<ls_node>-row)(<ls_node>-col) = 0\n          AND NOT line_exists( lv_visited[ key = ( <ls_node>-row + 1 ) ] ).\n\n          DATA(ls_neighbor) =\n          VALUE #( row = <ls_node>-row + 1\n                     col = <ls_node>-col\n                     length = <ls_node>-length + 1 ).\n          INSERT ls_neighbor INTO TABLE ls_queue.\n          INSERT VALUE #( key = ( <ls_node>-row + 1 ) ) INTO TABLE lv_visited.\n\n        ENDIF.\n\n        IF <ls_node>-col > 0 AND maze(<ls_node>-row)(<ls_node>-col) = 0\n          AND NOT line_exists( lv_visited[ key = ( <ls_node>-row + '_' + ( <ls_node>-col - 1 ) ] ).\n\n          DATA(ls_neighbor) =\n          VALUE #( row = <ls_node>-row\n                     col = <ls_node>-col - 1\n                     length = <ls_node>-length + 1 ).\n          INSERT ls_neighbor INTO TABLE ls_queue.\n          INSERT VALUE #( key = ( <ls_node>-row + '_' + ( <ls_node>-col - 1 ) ) ) INTO TABLE lv_visited.\n\n        ENDIF.\n\n        IF <ls_node>-col < maze-cols AND maze(<ls_node>-row)(<ls_node>-col) = 0\n          AND NOT line_exists( lv_visited[ key = ( <ls_node>-row + '_' + ( <ls_node>-col + 1 ) ] ).\n\n          DATA(ls_neighbor) =\n          VALUE #( row = <ls_node>-row\n                     col = <ls_node>-col + 1\n                     length = <ls_node>-length + 1 ).\n          INSERT ls_neighbor INTO TABLE ls_queue.\n          INSERT VALUE #( key = ( <ls_node>-row + '_' + ( <ls_node>-col + 1 ) ) ) INTO TABLE lv_visited.\n\n        ENDIF.\n\n      ENDLOOP.\n\n      CLEAR: ls_queue,\n             lv_min_length.\n\n    ENDDO.\n\n    \" Return the minimum length\n    returnValue = min_value.\n  ENDMETHOD.\nENDCLASS.\n\nINITIALIZATION.\nDATA: BEGIN OF ty_matrix,\n         rows TYPE i,\n         cols TYPE i,\n       END OF ty_matrix,\n       maze TYPE STANDARD TABLE OF ty_matrix.\nmaze = VALUE #( ( rows = 10 cols = 15 ) ( rows = 20 cols = 30 ) ).\n\nDATA: min_value TYPE i.\n\nCALL METHOD lcl_maze=>findShortestPath\n  EXPORTING\n    maze        =\n  IMPORTING\n    minValue    =\n\n  EXCEPTIONS\n    .\n"
    },
    {
        "instruction": "Create a function in Java for computing the factorial of a positive integer number.",
        "input": "",
        "output": "public static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
        "abap": "CLASS lcl_factorial DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      factorial IMPORTING\n                  VALUE( iv_n ) TYPE i\n          EXPORTING\n                  value( ev_result ) TYPE i.\nENDCLASS.\n\nCLASS lcl_factorial IMPLEMENTATION.\n  METHOD factorial.\n    DATA: lv_result TYPE i.\n\n    IF iv_n = 0.\n      ev_result = 1.\n    ELSE.\n      lv_result = 1.\n      DO.\n        WHEN OTHERS.\n          lv_result *= sy-index - sy-stc+1.\n          IF sy-index > iv_n.\n            EXIT.\n          ENDIF.\n      ENDDO.\n      ev_result = lv_result.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an algorithm to check if an array contains a given value",
        "input": "arr = [1, 7, 5, 8, 44]\nvalue = 5",
        "output": "def check_value(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False",
        "abap": "FORM check_value USING p_arr TYPE STANDARD TABLE OF any\n                             p_value TYPE any\n                             CHANGING cv_result TYPE abap_bool.\n\n  LOOP AT p_arr INTO DATA(line).\n    IF line = p_value.\n      cv_result = abap_true.\n      EXIT.\n    ENDIF.\n  ENDDO.\n"
    },
    {
        "instruction": "What is the output of the following code?",
        "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\nfor x, y in zip(list1, list2):\n    print(x * y)",
        "output": "a\nbb\nccc",
        "abap": "REPORT ztest.\n\n\" Your original text\nDATA: lv_original  TYPE string,\n      lv_translated TYPE string.\nlv_original = 'a'.\nlv_translated = lv_original.\nWRITE: / lv_translated.\n"
    },
    {
        "instruction": "When should the `break` keyword be used in a loop?",
        "input": "",
        "output": "The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop.",
        "abap": "DO 5 TIMES.\n  WRITE: 'Hello World'.\n  IF sy-cd = 'M'. \" Check if it's Monday\n    BREAK-LOOP. \" Exit loop immediately if it's Monday\n  ENDIF.\nENDDO.\n\n\" Alternatively, you can also use the EXIT statement to break out of a loop:\nDO 5 TIMES.\n  WRITE: 'Hello World'.\n  IF sy-cd = 'M'. \n    EXIT. \n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "What is the command to print \"Hello World\" twelve times in Python?",
        "input": "",
        "output": "for i in range(12):\n    print(\"Hello World\")",
        "abap": "DO 12 TIMES.\n  WRITE: / 'Hello World'.\nENDDO.\n"
    },
    {
        "instruction": "Create an HTML form with a textbox, a submit button, and two radio buttons.",
        "input": "",
        "output": "<form>\n  <input type=\"text\" id=\"textbox\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"radio\" name=\"choice\" value=\"yes\">Yes\n  <input type=\"radio\" name=\"choice\" value=\"no\">No\n</form>",
        "abap": "DATA: lv_choice TYPE string.\n\nFORM submit.\n  DATA: lv_textbox TYPE string.\n\n  lv_textbox = TEXT-12. \" get text from textbox\n  IF sy-datum > '20220101'. \" some condition\n    lv_choice = 'yes'.\n  ELSE.\n    lv_choice = 'no'.\n  ENDIF.\n\n  WRITE: lv_textbox, lv_choice.\n\nENDFORM.\n\nDATA: lt_form TYPE form,\n      ls_form LIKE LINE OF lt_form.\n\nlt_form = VALUE #( ( name = 'SUBMIT' type = 'USER_COMMAND_EVENT' ) ).\n\nDATA: lt_data TYPE STANDARD TABLE OF string.\n\nls_form-form = 'submit'. \" assign the submit function\nAPPEND ls_form TO lt_form. \" add the form to data\n\nat selection-screen on.\n  PERFORM submit. \" call the submit function\nENDAT SELECTION-SCREEN ON.\n\nSELECT SINGLE * FROM Demo INTO @DATA(ls_demo) WHERE textbox = @ls_textbox-text. \" some database query\n\nls_data(1) = ls_demo-text. \" get text from database\n\nls_form-form = 'submit'. \" assign the submit function\nAPPEND ls_form TO lt_form. \" add the form to data\n\nAT SELECTION-SCREEN ON.\n  PERFORM submit. \" call the submit function\n\nSELECT SINGLE * FROM Demo INTO @DATA(ls_demo) WHERE choice = 'yes'. \" some database query\n\nls_data(1) = ls_demo-text. \" get text from database\n"
    },
    {
        "instruction": "Update the existing HTML structure to add a new div class named \"container\".",
        "input": "<body>\n    <h1> My First Webpage </h1>\n</body>",
        "output": "<body>\n    <div class=\"container\"></div>\n    <h1>My First Webpage</h1>\n</body>",
        "abap": "REPORT zmy_first_webpage.\n\nDATA: lv_html TYPE string.\n\nlv_html = '<html>'.\nlv_html = lv_html && '<head>'.\nlv_html = lv_html && '<title>My First Webpage</title>'.\nlv_html = lv_html && '</head>'.\nlv_html = lv_html && '<body>'.\nlv_html = lv_html && '<div class=\"container\"></div>'.\nlv_html = lv_html && '<h1>My First Webpage</h1>'.\nlv_html = lv_html && '</body>'.\nlv_html = lv_html && '</html>'.\n\nWRITE: / lv_html.\n"
    },
    {
        "instruction": "Construct a SQL query to find all columns in a table called \"customers\" where the first name is equal to 'John'.",
        "input": "",
        "output": "SELECT * FROM customers WHERE firstName = 'John';",
        "abap": "REPORT zcustomers.\n\nDATA: ls_customers TYPE customers.\nSELECT SINGLE *\n  INTO ls_customers\n  FROM customers\n  WHERE first_name = 'John'.\nIF sy-subrc <> 0.\n  WRITE: / 'No customer found with the name John.'.\nENDIF.\nPAUSE.\n"
    },
    {
        "instruction": "Write a function in HTML for creating a table of n rows and m columns.",
        "input": "",
        "output": "<table>\n  <tbody>\n    <% for (let i = 0; i < n; i++) { %>\n      <tr>\n        <% for (let j = 0; j < m; j++) { %>\n          <td>Cell Content</td>\n        <% } %>\n      </tr>\n    <% } %>\n  </tbody>\n</table>",
        "abap": "DATA: n TYPE i VALUE '10', \" replace 'n' with your desired value\n      m TYPE i VALUE '5',  \" replace 'm' with your desired value\n\nLOOP AT sy-cntl INTO DATA(lv_row).\n  WRITE:/ |<tr>|.\n  LOOP AT sy-cntl INTO lv_row.\n    WRITE:/ |<td>Cell Content</td>|.\n  ENDLOOP.\n  WRITE:/ |</tr>|.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a Python program to print out the list of even numbers from 0 to given limit.",
        "input": "limit = 10",
        "output": "# declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]",
        "abap": "DATA: ls_numbers TYPE STANDARD TABLE OF i,\n      lt_even_numbers TYPE STANDARD TABLE OF i.\n\n\" Generate list of numbers from 0 to limit+1\nDO limit + 1 TIMES.\n  APPEND sy-index TO ls_numbers.\nENDDO.\n\n\" Filter out even numbers\nLOOP AT ls_numbers INTO DATA(ls_num).\n  IF ls_num MOD 2 = 0.\n    APPEND ls_num TO lt_even_numbers.\n  ENDIF.\nENDLOOP.\n\n\" Print even numbers\nWRITE: / lt_even_numbers.\n"
    },
    {
        "instruction": "Transform the following sentence into a declarative sentence.",
        "input": "Do your homework every day.",
        "output": "You should do your homework every day.",
        "abap": "A reminder from my teacher!\n\nTo be honest, I'm a large language model, I don't have homework like humans do. However, I can help you with translating code into ABAP (Advanced Business Application Programming) if that's what you're looking for.\n\nWhich programming language would you like me to translate into ABAP?"
    },
    {
        "instruction": "Write a function in Java that takes a string consisting of brackets and output true if the brackets are properly nested, else output false.",
        "input": "",
        "output": "public static boolean isBalanced(String str) \n{ \n    if(str.length() == 0) \n        return true; \n      \n    Stack<Character> stack  = new Stack<Character>(); \n  \n    for(int i = 0; i < str.length(); i++) \n    { \n        char current = str.charAt(i); \n          \n        if(current == '{' || current == '(' || current == '[') \n        { \n        stack.push(current); \n        } \n  \n        if(current == '}' || current == ')' || current == ']') \n        { \n            if(stack.isEmpty()) \n                return false; \n  \n            char last = stack.peek(); \n            if(current == '}' && last == '{' || current == ')' && last == '(' || current == ']' && last == '[') \n                stack.pop(); \n            else \n                return false; \n        }\n    } \n \n    return stack.isEmpty(); \n}",
        "abap": "CLASS lcl_balanced_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: method IS_BALANCED\n      IMPORTING\n        !iv_str TYPE string\n      RETURNING\n        value(rv_result TYPE abap_bool).\nENDCLASS.\n\nCLASS lcl_balanced_string IMPLEMENTATION.\n  METHOD is_balanced.\n    DATA: lv_length TYPE i,\n          lv_stack TYPE std03.\n    FIELD-SYMBOLS:\n      <lv_char> LIKE LINE OF lv_stack.\n\n    lv_length = xstrlen( iv_str ).\n    IF lv_length EQ 0.\n      rv_result = abap_true.\n      RETURN.\n    ENDIF.\n\n    CREATE DATA: lv_stack TYPE STANDARD TABLE OF char1.\n\n    DO lv_length TIMES.\n      ASSIGN lv_stack[ sy-index ] TO <lv_char>.\n      <lv_char> = iv_str+sy-index(1).\n\n      IF <lv_char> EQ '{' OR <lv_char> EQ '(' OR <lv_char> EQ '['.\n        APPEND <lv_char> TO lv_stack.\n      ELSEIF <lv_char> EQ '}' OR <lv_char> EQ ')' OR <lv_char> EQ ']'.\n        IF line_exists( table = lv_stack[ 1 ] WHERE char1 = '{' ) OR\n           line_exists( table = lv_stack[ 1 ] WHERE char1 = '(' ) OR\n           line_exists( table = lv_stack[ 1 ] WHERE char1 = '[' ).\n          DELETE lv_stack INDEX sy-index - 1.\n        ELSE.\n          rv_result = abap_false.\n          RETURN.\n        ENDIF.\n      ENDIF.\n    ENDDO.\n\n    IF line_exists( table = lv_stack ). \" stack is not empty\n      rv_result = abap_false.\n    ELSE.\n      rv_result = abap_true.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Read a code and find all the function calls that are made.",
        "input": "print('Hello world!')\nmy_function()\nmy_function2(2, 3)",
        "output": "The two function calls made are \"my_function()\" and \"my_function2(2, 3)\".",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      my_function,\n      my_function2 IMPORTING par1 TYPE i par2 TYPE i.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD my_function.\n    WRITE: 'my_function() called'.\n  ENDMETHOD.\n\n  METHOD my_function2.\n    WRITE: / |my_function2( , ) called with parameters { par1 } and { par2 }|.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_test TYPE REF TO lcl_test.\n\nCREATE OBJECT lo_test.\nlo_test->my_function( ).\nCREATE OBJECT lo_test.\nlo_test->my_function2( p1 = 2 p2 = 3 ).\n"
    },
    {
        "instruction": "Write a JavaScript code to calculate the factorial of a number",
        "input": "",
        "output": "function factorial(n){\n    if (n == 0){\n        return 1;\n    }\n    else{\n        return n * factorial(n - 1);\n    }\n}",
        "abap": "FUNCTION FACTORIAL.\n*\"----------------------------------------------------------------------\n*\"*\"Local Interface:\n*\"  IMPORTING\n*\"     VALUE(I_N) TYPE  I\n*\"  EXPORTING\n*\"     VALUE(E_FACTORIAL) TYPE F\n*\"----------------------------------------------------------------------\n\n  DATA: lv_factorial TYPE f.\n\n  IF i_n = 0.\n    e_factorial = 1.\n  ELSE.\n    lv_factorial = i_n.\n    DO .\n      TRANSPORT-COMMAND = 'MULTIPLY'.\n      ULINE-COUNT = lv_factorial / ( lv_factorial - 1 ).\n      TRANSFER lv_factorial TO lv_factorial.\n      IF lv_factorial < 1.\n        EXIT.\n      ENDIF.\n    ENDO.\n    e_factorial = lv_factorial.\n  ENDIF.\n\nENDFUNCTION.\n"
    },
    {
        "instruction": "Design a class in Java that can store a list of books and their associated authors.",
        "input": "",
        "output": "public class BookCollection {\n  private ArrayList<Book> books;\n  private ArrayList<String> authors;\n\n  public BookCollection() {\n    this.books = new ArrayList<Book>();\n    this.authors = new ArrayList<String>();\n  }\n\n  public void addBook(Book book) {\n    this.books.add(book);\n  }\n  \n  public void addAuthor(String author) {\n    this.authors.add(author);\n  }\n  \n  public ArrayList<Book> getBooks() {\n    return this.books;\n  }\n  \n  public ArrayList<String> getAuthors() {\n    return this.authors;\n  }\n}",
        "abap": "CLASS zbook_collection DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n    TYPES:\n      BEGIN OF ty_book,\n        title TYPE string,\n        author TYPE string\n      END OF ty_book.\n\n    CLASS-METHODS:\n      add_book IMPORTING p_book TYPE ty_book,\n      get_books RETURNING r_result TYPE TABLE OF ty_book,\n      get_authors RETURNING r_result TYPE TABLE OF string.\nENDCLASS.\n\nCLASS zbook_collection IMPLEMENTATION.\n  METHOD if_oo_adt_classrun~main.\n    DATA: lr_books TYPE TABLE OF ty_book,\n          lr_authors TYPE TABLE OF string.\n\n    CALL METHOD me->add_book( p_book = VALUE #( title = 'Book Title' author = 'Author Name' ) ).\n    CALL METHOD me->get_books( IMPORTING e_result = lr_books ).\n    CALL METHOD me->get_authors( IMPORTING e_result = lr_authors ).\n\n    WRITE: / 'Books:'.\n    LOOP AT lr_books INTO DATA(ls_book).\n      WRITE: / ls_book-title, ls_book-author.\n    ENDLOOP.\n\n    WRITE: / 'Authors:'.\n    LOOP AT lr_authors INTO DATA(ls_author).\n      WRITE: / ls_author.\n    ENDLOOP.\n\n  ENDMETHOD.\n\n  METHOD add_book.\n    INSERT p_book INTO TABLE me->books.\n  ENDMETHOD.\n\n  METHOD get_books.\n    r_result = books.\n  ENDMETHOD.\n\n  METHOD get_authors.\n    r_result = authors.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a query in MongoDB to find all the documents in the collection \"Books\".",
        "input": "",
        "output": "db.Books.find({})",
        "abap": "TYPES: BEGIN OF ty_book,\n          id TYPE i,\n          title TYPE string,\n          author TYPE string,\n          pages TYPE i,\n          published_at TYPE dats,\n        END OF ty_book.\n\nDATA: ls_book LIKE LINE OF ty_book.\nDATA: lt_books TYPE STANDARD TABLE OF ty_book.\n\nSELECT * FROM db.Books INTO CORRESPONDING FIELDS OF TABLE @lt_books.\n"
    },
    {
        "instruction": "Redesign the following Python program with functions.",
        "input": "my_list = [5, 10, 15, 20]\nsum = 0\nfor number in my_list:\nsum = sum + number",
        "output": "def sum_of_list(my_list):\n  sum = 0\n  for number in my_list:\n    sum = sum + number\n  return sum\n\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)",
        "abap": "REPORT zdemo.\n\nCLASS lcl_demo DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_of_list\n        IMPORTING\n          VALUE(iv_my_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_sum) TYPE i.\nENDCLASS.\n\nCLASS lcl_demo IMPLEMENTATION.\n  METHOD sum_of_list.\n    DATA: lv_sum TYPE i,\n          ls_number TYPE i.\n\n    DO.\n      IF iv_my_list IS INITIAL.\n        EXIT.\n      ELSE.\n        READ TABLE iv_my_list INTO ls_number INDEX sy-index.\n        IF sy-subrc <> 0.\n          EXIT.\n        ENDIF.\n        lv_sum = lv_sum + ls_number.\n      ENDIF.\n    ENDDO.\n\n    rv_sum = lv_sum.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: my_list TYPE STANDARD TABLE OF i,\n        result TYPE i.\n\n  APPEND 5 TO my_list.\n  APPEND 10 TO my_list.\n  APPEND 15 TO my_list.\n  APPEND 20 TO my_list.\n\n  result = lcl_demo=>sum_of_list( my_list ).\n"
    },
    {
        "instruction": "Write a function in Python for calculating the area of a circle.",
        "input": "",
        "output": "def area_circle(r):\n  return 3.14 * r**2",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      area_circle IMPORTING p_radius TYPE f OUTPUT VALUE(p_area) TYPE f.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD area_circle.\n    p_area = 3.14 * p_radius ** 2.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: l_radius TYPE f,\n       l_area   TYPE f.\n\nSTART-OF-SELECTION.\n  l_radius = 5.\n  CALL METHOD lcl_test=>area_circle\n    EXPORTING\n      p_radius     = l_radius\n    IMPORTING\n      p_area       = l_area.\n\n  WRITE:/ 'Area of circle:', l_area.\n"
    },
    {
        "instruction": "Count the number of words in this sentence using Python.",
        "input": "This sentence has a total of eight words.",
        "output": "8",
        "abap": "Since you mentioned translating code, I'll assume it's a programming-related task. You entered the number 8, which could be related to several areas of ABAP (Advanced Business Application Programming) development.\n\nCould you please provide more context or information about what specific piece of code you'd like me to translate or work with? This will help me better understand your request and assist you accordingly.\n\nFor example, are you looking for a translation of:\n\n* A line of code\n* A block of code (e.g., 8 lines)\n* An entire function/module\n* Or perhaps something related to a specific ABAP topic (e.g., data types, control structures)?\n\nPlease let me know how I can assist you!"
    },
    {
        "instruction": "Given a list, write code to convert the list into a dictionary.",
        "input": "list1 = [\"John\", \"Doe\", 23]",
        "output": "dict1 = dict(zip(['name', 'surname', 'age'], list1))\nprint(dict1) # prints {'name': 'John', 'surname': 'Doe', 'age': 23}",
        "abap": "DATA: ls_type TYPE ty_type.\n\nTYPES: BEGIN OF ty_type,\n         name    TYPE string,\n         surname TYPE string,\n         age     TYPE i,\n       END OF ty_type.\n\nDATA: list1 TYPE STANDARD TABLE OF ty_type.\nDATA: dict1 TYPE STANDARD TABLE OF ty_type WITH DEFAULT KEY.\n\nAPPEND LINES OF list1 TO dict1. \" assuming list1 has values\n\n\" equivalent to dict(zip(['name', 'surname', 'age'], list1))\nLOOP AT list1 INTO DATA(ls_line).\n  INSERT ls_line INTO dict1.\nENDLOOP.\n\nOUT-LENDEN dict1.\n"
    },
    {
        "instruction": "Calculate the sum of all the numbers in a list named 'mylist'.",
        "input": "mylist = [1,2,3,4,5]",
        "output": "total_sum = 0\nfor num in mylist:\n total_sum += num\nprint(total_sum)",
        "abap": "DATA: lv_total_sum TYPE i.\n\nLOOP AT itab INTO DATA(ls_num).\n  lv_total_sum = ls_num + lv_total_sum.\nENDLOOP.\n\nWRITE: / lv_total_sum.\n"
    },
    {
        "instruction": "Write a PHP program to find the largest number from an array.",
        "input": "array = [10, 25, 2, 39]",
        "output": "<?php\n$arr = array(10, 25, 2, 39);\n$max = $arr[0];\n \nforeach ($arr as $value) {\n   if ($value > $max) {\n      $max = $value;\n   }\n}\n \necho $max; // Output: 39\n?>",
        "abap": "REPORT zfind_max.\n\nDATA:\n  lv_arr TYPE STANDARD TABLE OF i,\n  lv_max TYPE i.\n\nAPPEND 10 TO lv_arr.\nAPPEND 25 TO lv_arr.\nAPPEND 2 TO lv_arr.\nAPPEND 39 TO lv_arr.\n\nlv_max = lv_arr[ 1 ].\n\nLOOP AT lv_arr INTO DATA(lv_value) FROM 1.\n  IF lv_value > lv_max.\n    lv_max = lv_value.\n  ENDIF.\nENDLOOP.\n\nWRITE: / lv_max. \" Output: 39\n"
    },
    {
        "instruction": "Identify the most frequent word in a given sentence.",
        "input": "This is a beautiful summer day",
        "output": "The most frequent word in the sentence is \"a\".",
        "abap": "REPORT ztest.\n\nDATA: lv_sentence TYPE string,\n      lv_word     TYPE string,\n      lv_freq     TYPE i,\n      lt_words    TYPE STANDARD TABLE OF string.\n\nPARAMETERS: p_sentence LIKE LINE OF lt_words DEFAULT 'The most frequent word in the sentence is \"a\".'.\n\n\nLOOP AT p_sentence INTO DATA(lv_line).\n  SPLIT lv_line AT space INTO TABLE lt_words.\nENDLOOP.\n\n sorts lt_words ASCENDING BY strlen( val ) .\n DO .\n   READ TABLE lt_words INTO lv_word INDEX sy-index.\n   IF lv_word IS NOT INITIAL AND lv_word CA 'aA'.\n     ADD 1 TO lv_freq.\n   ENDIF.\n ENDDO.\n\n WRITE:/ 'The most frequent word in the sentence is', lv_freq, '\"a\".'.\n"
    },
    {
        "instruction": "Create a class to represent a two-dimensional vector.",
        "input": "",
        "output": "class Vector2D(object):\n  '''Class to represent a two-dimensional vector'''\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)",
        "abap": "CLASS lcl_vector DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ixml_modifiable.\n    METHODS:\n      constructor IMPORTING value( x ) TYPE f\n                         value( y ) TYPE f,\n      add IMPORTING iv_other TYPE REF TO lcl_vector\n           RETURNING VALUE(rv_result) TYPE REF TO lcl_vector,\n      subtract IMPORTING iv_other TYPE REF TO lcl_vector\n           RETURNING VALUE(rv_result) TYPE REF TO lcl_vector,\n      multiply IMPORTING iv_scalar TYPE f\n               RETURNING VALUE(rv_result) TYPE REF TO lcl_vector.\nENDCLASS.\n\nCLASS lcl_vector IMPLEMENTATION.\n  METHOD constructor.\n    self->x = x.\n    self->y = y.\n  ENDMETHOD.\n\n  METHOD add.\n    DATA: lv_x TYPE f,\n          lv_y TYPE f.\n    lv_x = self->x + iv_other->x.\n    lv_y = self->y + iv_other->y.\n    rv_result = NEW #( lv_x, lv_y ).\n  ENDMETHOD.\n\n  METHOD subtract.\n    DATA: lv_x TYPE f,\n          lv_y TYPE f.\n    lv_x = self->x - iv_other->x.\n    lv_y = self->y - iv_other->y.\n    rv_result = NEW #( lv_x, lv_y ).\n  ENDMETHOD.\n\n  METHOD multiply.\n    rv_result = NEW #( self->x * iv_scalar,\n                       self->y * iv_scalar ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a function in Python to calculate the factorial of a number.",
        "input": "",
        "output": "def factorial(n):\n    \"\"\"This function returns the factorial of a given integer\"\"\"\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)",
        "abap": "CLASS lcl_factorial DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      factorial IMPORTING value( i_n ) RETURNING value( r_result ).\nENDCLASS.\n\nCLASS lcl_factorial IMPLEMENTATION.\n  METHOD factorial.\n    IF i_n = 0.\n      r_result = 1.\n    ELSE.\n      r_result = i_n * CALL METHOD CAST class(lcl_factorial) => factorial( n = i_n - 1 ) .\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: l_result TYPE i.\n\nSTART-OF-SELECTION.\n  l_result = lcl_factorial=>factorial( i_n = 5 ).\n  WRITE: / 'Factorial of 5 is:', l_result.\n"
    },
    {
        "instruction": "Write a Python program to split special characters with a given string.",
        "input": "string = \"Hello@#World\"",
        "output": "string = \"Hello @# World\"",
        "abap": "DATA: lv_string TYPE string VALUE 'Hello !@# World'.\n"
    },
    {
        "instruction": "Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.",
        "input": "string = \"Hello, world!\"\ncharset = [\"o\", \"!\"]",
        "output": "def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\treturn result",
        "abap": "CLASS lcl_remove_chars DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_chars\n        IMPORTING\n          iv_string       TYPE string\n          iv_charset      TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string .\nENDCLASS.\n\nCLASS lcl_remove_chars IMPLEMENTATION.\n  METHOD remove_chars.\n    DATA: lv_char TYPE char1,\n          lv_index TYPE i,\n          lt_chars TYPE STANDARD TABLE OF char1.\n\n    \" Split the charset into a internal table for better performance\n    SPLIT iv_charset AT space INTO TABLE lt_chars.\n\n    \" Create result string\n    rv_result = iv_string.\n\n    DO.\n      IF sy-index > strlen( iv_string ).\n        EXIT.\n      ENDIF.\n\n      lv_char = rv_result+sy-index(1).\n\n      IF NOT line_exists( lt_chars[ table_line = lv_char ] ).\n        \" Remove the character from the result string\n        TRANSLATE rv_result WITHOUT REPLACEMENTS lv_char.\n      ELSE.\n        CONTINUE.\n      ENDIF.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_string TYPE string,\n      lv_charset TYPE string.\n\nlv_string = 'Hello, World!'.\nlv_charset = 'abc'.\n\nWRITE: ( lcl_remove_chars=>remove_chars( EXPORTING iv_string = lv_string\n                                       IMPORTING rv_result = DATA(lv_result)\n                                         iv_charset  = lv_charset ) ).\n"
    },
    {
        "instruction": "What is a callback function in JavaScript?",
        "input": "",
        "output": "A callback function in JavaScript is a function that is passed as an argument to another function and is executed after the outer function has finished executing.",
        "abap": "\" Define an interface for a callback function\nINTERFACE lif_callback.\n  METHODS: execute IMPORTING iv_param TYPE i .\nENDINTERFACE.\n\n\" Define a function that takes a callback function as argument\nCLASS lcl_main DEFINITION PUBLIC FINAL .\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main IMPORTING\n        it_params  TYPE STANDARD TABLE OF i\n        iv_callback TYPE REF TO lif_callback OPTIONAL .\n\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD main.\n    \" Execute the callback function if provided\n    IF iv_callback IS BOUND.\n      iv_callback->execute( iv_param = 42 ).\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a code to find the square of the first n numbers.",
        "input": "",
        "output": "def square_of_first_n_number(n):\n    \"\"\"Find the square of the first n numbers\"\"\"\n    \n    # Initialize an empty list\n    squares = []\n\n    # Iterate to the first n numbers\n    for i in range(n):\n        # Compute the square and append to the list\n        squares.append(i * i)\n\n    return squares",
        "abap": "REPORT zsquare_of_first_n_number.\n\nCLASS lcl_square_of_first_n_number DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      square_of_first_n_number IMPORTING\n        VALUE( i_n ) TYPE i\n        RETURNING\n        VALUE( rt_squares ) TYPE STANDARD TABLE OF f DECIMAL DIGITS 18  AS TIME-DEPENDENT.\nENDCLASS.\n\nCLASS lcl_square_of_first_n_number IMPLEMENTATION.\n  METHOD square_of_first_n_number.\n    DATA: lv_i TYPE i,\n          lt_squares TYPE STANDARD TABLE OF f DECIMAL DIGITS 18.\n\n    DO i_n TIMES.\n      DATA(lv_square) = sy-index * sy-index.\n      APPEND lv_square TO lt_squares.\n    ENDDO.\n\n    rt_squares = lt_squares.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_square TYPE REF TO lcl_square_of_first_n_number,\n      lt_squares TYPE STANDARD TABLE OF f DECIMAL DIGITS 18.\n\nCREATE OBJECT lo_square.\nlt_squares = lo_square->square_of_first_n_number( i_n = 5 ).\n\nWRITE: / 'Squares of first n numbers:'.\nLOOP AT lt_squares INTO DATA(lv_square).\n  WRITE: / lv_square.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a JavaScript function to validate a given URL.",
        "input": "",
        "output": "function isValidURL(url) {\n    const regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n    return regex.test(url);\n}",
        "abap": "CLASS lcl_url_validator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_valid_url\n        IMPORTING\n          iv_url TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS lcl_url_validator IMPLEMENTATION.\n  METHOD is_valid_url.\n    DATA: lv_regex TYPE string,\n          lr_regex TYPE i.\n\n    \" Regular expression to match URLs (slightly modified version of the original regex)\n    lv_regex = '^(?:https?)?:\\/\\/[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-._~:/?#[\\]@!\\$&\\'\\(\\\"\\)\\*\\+,;=.]*$'.\n\n    lr_regex = REGEX_PATTERNS_CREATE(\n      p_pattern     = lv_regex\n      p_flags        = 0\n      p_case_sensitive = abap_true ).\n\n    rv_result = reg_exp_match( iv_url lr_regex ).\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Create a Swift function to find the sum of elements in an array of integers.",
        "input": "let arr = [1,2,3,4,5]",
        "output": "func sumOfElements(arr: [Int]) -> Int {\n let sum = arr.reduce(0, +)\n return sum\n}",
        "abap": "FUNCTION z_sum_of_elements.\n*\"----------------------------------------------------------------------\n*\"*\"Local Interface:\n*\"  IMPORTING\n*\"     VALUE(IRRAY) TYPE  STANDARD TABLE OF I\n*\"  EXPORTING\n*\"      VALUE(RSUMP) TYPE I\n*\"----------------------------------------------------------------------\n\nDATA: lv_sum TYPE i.\n\nLOOP AT irray INTO DATA(ls_element).\nlv_sum = ls_element + lv_sum.\nENDLOOP.\n\nRSUMP = lv_sum.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Given a two-dimensional array, write a code to sum the values in each row.",
        "input": "A = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]]",
        "output": "row_sum = []\nfor row in A:\n    row_sum.append(sum(row))\n    \nprint(row_sum) # prints [6, 15, 24]",
        "abap": "TYPES: BEGIN OF ty_table,\n          col1 TYPE i,\n          col2 TYPE i,\n        END OF ty_table.\n\nDATA: lt_table TYPE STANDARD TABLE OF ty_table.\nDATA: ls_row LIKE LINE OF lt_table.\nDATA: lv_sum TYPE i.\n\nlt_table = VALUE #( ( col1 = 1 col2 = 5 )\n                     ( col1 = 4 col2 = 6 )\n                     ( col1 = 7 col2 = 3 ) ).\n\nLOOP AT lt_table INTO ls_row.\n  lv_sum = ls_row-col1 + ls_row-col2.\n  APPEND lv_sum TO row_sum.\nENDLOOP.\n\nWRITE: / row_sum. \" prints [9, 10, 10]\"\n"
    },
    {
        "instruction": "Write a code to reverse the order of a data structure such as array, list, or stack.",
        "input": "list1 = [1, 3, 5, 7, 9]",
        "output": "list1.reverse() # [9, 7, 5, 3, 1]",
        "abap": "DATA: list TYPE standard table OF i,\n      tmp   TYPE STANDARD TABLE OF i.\n\nSELECT FROM c01 INTO CORRESPONDING FIELDS OF TABLE list.\nSORT list IN DESCENDING ORDER ASSIGNING tmp = list.\n"
    },
    {
        "instruction": "Create an empty set in Python and add the following items into it: \"A\", \"B\", \"C\"",
        "input": "",
        "output": "mySet = {\"A\", \"B\", \"C\"}",
        "abap": "In ABAP, this would be equivalent to:\n\nDATA: ls_set TYPE standard table OF string VALUE (( 'A' 'B' 'C' ) ).\n\nor alternatively\n\nDATA: lt_set TYPE STANDARD TABLE OF string.\n\nlt_set = value #( ( 'A' ) ( 'B' ) ( 'C' ) )."
    },
    {
        "instruction": "Write an algorithm to remove vowels from a string.",
        "input": "",
        "output": "def remove_vowels(string): \n      \n    # vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u']  \n    stringWithoutVowels = \"\" \n      \n    for x in string: \n        if x not in vowels: \n            stringWithoutVowels += x \n              \n    return stringWithoutVowels",
        "abap": "REPORT zremove_vowels.\n\nCLASS lcl_remove_vowels DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_vowels IMPORTING p_string TYPE string RETURNING VALUE(r_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_remove_vowels IMPLEMENTATION.\n  METHOD remove_vowels.\n    DATA: lv_vowels TYPE STANDARD TABLE OF c,\n          lv_withoutvowels TYPE string.\n\n    \" Define vowels\n    lv_vowels = VALUE #( ( 'a' )\n                         ( 'e' )\n                         ( 'i' )\n                         ( 'o' )\n                         ( 'u' ) ).\n\n    \" Remove vowels from the input string\n    LOOP AT string INTO DATA(lv_char).\n      IF sy-tabix > 5. \" Ignore case sensitivity by ignoring first 6 characters\n        CONTINUE.\n      ENDIF.\n\n      READ TABLE lv_vowels WITH KEY table_line = lv_char INTO DATA(ls_found).\n      IF sy-subrc <> 0.\n        CONCATENATE r_result lv_char INTO r_result.\n      ELSE.\n        r_result = |{ r_result }|.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\nINITIALIZER.\n  cl_abap_char_utilities=>set_case_insensitivity( abap_true ).\n\nSTART-OF-SELECTION.\n  PERFORM remove_vowels USING 'hello world' CHANGING result = DATA(lv_string).\n  WRITE: lv_string.\n"
    },
    {
        "instruction": "Create a function in Python which takes two parameters and returns their product.",
        "input": "",
        "output": "def product(a, b):\n    return a*b",
        "abap": "FORM product\n  USING p_a TYPE i\n        p_b TYPE i\n  CHANGING p_result TYPE i.\n\n  p_result = p_a * p_b.\nENDFORM.\n"
    },
    {
        "instruction": "Write a code to add two linked lists of different sizes.",
        "input": "list1 = [2->4->3]\nlist2 = [5->6->4->1]",
        "output": "# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result",
        "abap": "TYPES: BEGIN OF ty_node,\n          data TYPE i,\n          next  TYPE REF TO data,\n        END OF ty_node.\n\nDATA: lr_first TYPE REF TO data,\n      lr_second TYPE REF TO data,\n      lr_prev   TYPE REF TO data,\n      ls_node   TYPE ty_node,\n      lv_carry  TYPE i,\n      lt_result TYPE TABLE OF ty_node.\n\nMETHOD add_two_lists IMPORTING\n    first TYPE REF TO data\n    second TYPE REF TO data\n    RETURNING VALUE(result) TYPE REF TO data.\n\n  DATA: lo_temp TYPE REF TO data.\n\n  \" Initialize current and previous node pointers\"\n  lv_carry = 0.\n  lr_prev = NEW #( ).\n\n  WHILE lr_first IS NOT BOUND OR lr_second IS NOT BOUND.\n    ls_node-data = lv_carry + ( lr_first->data - 0 ) + ( lr_second->data - 0 ).\n    \n    \" Update carry\n    IF ls_node-data >= 10.\n      ls_node-data = ls_node-data MOD 10.\n      lv_carry = 1.\n    ELSE.\n      lv_carry = 0.\n    ENDIF.\n\n    lo_temp = NEW #( ls_node ).\n\n    \" Move first, second pointers ahead\n    lr_first = lr_first->next.\n    lr_second = lr_second->next.\n\n    \" Attach the previous node to the current node\n    IF lr_prev IS BOUND.\n      lr_prev->next = lo_temp.\n    ENDIF.\n\n    lr_prev = lo_temp.\n\n  ENDDO.\n\n  \" Check if there is a carry left over after addition\"\n  IF lv_carry > 0.\n    lt_result = VALUE #( ( ls_node ) ).\n  ELSE.\n    lt_result = VALUE #( ( ls_node-data ) ).\n  ENDIF.\n\n  result = NEW #( lt_result ).\n\nENDMETHOD.  \n"
    },
    {
        "instruction": "Count the number of unique elements in the following list.",
        "input": "my_list = [1, 2, 3, 1]",
        "output": "unique_count = len(set(my_list))",
        "abap": "DATA: lv_unique_count TYPE i.\n\nlv_unique_count = lines( UNIQUE my_list ).\n"
    },
    {
        "instruction": "Write a CSS style to add a yellow background to the body of a webpage.",
        "input": "",
        "output": "body {\n  background-color: yellow;\n}",
        "abap": "`CLASS lcl_body DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      set_background_color IMPORTING\n        VALUE( iv_color ) TYPE string.\nENDCLASS.\n\nCLASS lcl_body IMPLEMENTATION.\n  METHOD set_background_color.\n    DATA: lo_html TYPE REF TO if_ixhtml_document,\n          li_node TYPE REF TO if_ixml_element.\n\n    \" create a new HTML document\n    CREATE OBJECT lo_html TYPE ixhtml_document.\n    \" get the body node\n    lo_html->get_document() = VALUE #( tag = 'HTML' ).\n    lo_html->append_child( NEW cxhtml_head( ) ).\n    lo_html->append_child( NEW cxhtml_body( ) ).\n\n    \" set the background color of the body\n    GET REFERENCE TO DATA(lo_body) INTO li_node.\n    li_node->set_attribute_name_value(\n      iv_name = 'style'\n      iv_value = `background-color: ${iv_color};` ).\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_document TYPE REF TO if_ixhtml_document,\n      lo_body     TYPE REF TO if_ixhtml_element.\n\nCREATE OBJECT lo_document TYPE ixhtml_document.\nlo_document->append_child( NEW cxhtml_html( ) ).\n\n\" get the body node\nGET REFERENCE TO DATA(lo_html) INTO lo_body.\nlcl_body=>set_background_color(\n  EXPORTING\n    iv_color = 'yellow' ).\n`"
    },
    {
        "instruction": "Write a Python code snippet to print the pyramid structure with the given number of lines.",
        "input": "4",
        "output": "*   \n   ***\n  *****\n *******",
        "abap": "DATA: lv_line TYPE i.\n\nDO.\n  lv_line = sy-index - 1.\n  WRITE: (lv_line) * ''.\n\n  DO.\n    WRITE: ' *'.\n    IF lv_line < sy-index - 2.\n      CONTINUE.\n    ELSE.\n      EXIT.\n    ENDIF.\n  ENDDO.\n\n  WRITE: .\n\n  IF sy-index < 5.\n    CONTINUE.\n  ELSE.\n    EXIT.\n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Design an HTML page with a table of products and their prices.",
        "input": "Table with 5 products and their prices",
        "output": "<html>\n <head>\n  <title>Product Prices</title>\n </head>\n <body>\n  <h1>Product Prices</h1>\n  <table>\n   <tr>\n    <th>Product Name</th><th>Price</th>\n   </tr>\n   <tr>\n    <td>Laptop</td><td>1000</td>\n   </tr>\n   <tr>\n    <td>Keyboard</td><td>50</td>\n   </tr>\n   <tr>\n    <td>Monitor</td><td>200</td>\n   </tr>\n   <tr>\n    <td>Mouse</td><td>30</td>\n   </tr>\n   <tr>\n    <td>Headphones</td><td>50</td>\n   </tr>\n  </table>\n </body>\n</html>",
        "abap": "REPORT zproduct_prices.\n\nCLASS lcl_product DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      display_product_prices IMPORTING\n        iv_product_name TYPE string\n        iv_price         TYPE i.\nENDCLASS.\n\nCLASS lcl_product IMPLEMENTATION.\n  METHOD display_product_prices.\n    WRITE: / iv_product_name, iv_price.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA:\n    ls_product TYPE ty_product,\n    lt_products LIKE STANDARD TABLE OF ls_product.\n\n  \" Define products\n  ls_product-product_name = 'Laptop'.\n  ls_product-price         = 1000.\n  APPEND ls_product TO lt_products.\n\n  ls_product-product_name = 'Keyboard'.\n  ls_product-price         = 50.\n  APPEND ls_product TO lt_products.\n\n  ls_product-product_name = 'Monitor'.\n  ls_product-price         = 200.\n  APPEND ls_product TO lt_products.\n\n  ls_product-product_name = 'Mouse'.\n  ls_product-price         = 30.\n  APPEND ls_product TO lt_products.\n\n  ls_product-product_name = 'Headphones'.\n  ls_product-price         = 50.\n  APPEND ls_product TO lt_products.\n\n  \" Display product prices\n  LOOP AT lt_products INTO DATA(ls_current).\n    display_product_prices:\n      EXPORTING\n        iv_product_name = ls_current-product_name\n        iv_price         = ls_current-price.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Create an array of size n filled with the string \"hello\".",
        "input": "",
        "output": "def fillWithHello(n):\n    arr = [] \n    for i in range(0, n): \n        arr.append(\"hello\") \n    return arr",
        "abap": "CLASS lcl_fill_with_hello DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fill_with_hellos\n        IMPORTING\n          iv_length TYPE i\n        RETURNING\n          VALUE(rv_result) TYPE standard table\n        RAISING\n          cx_sy_itab_init_size\n          cx_sy_string_to_table.\nENDCLASS.\n\nCLASS lcl_fill_with_hello IMPLEMENTATION.\n  METHOD fill_with_hellos.\n    DATA: lt_result TYPE STANDARD TABLE OF string.\n    DO iv_length TIMES.\n      APPEND \"hello\" TO lt_result.\n    ENDDO.\n    rv_result = lt_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Generate a sentence using the given array of words:",
        "input": "arr = ['This', 'is', 'a', 'sentence']",
        "output": "This is a sentence.",
        "abap": "DATA: lv_sentence TYPE string.\n\nlv_sentence = 'This is a sentence.'.\n\nWRITE: / lv_sentence."
    },
    {
        "instruction": "Generate a list of the first three even numbers",
        "input": "",
        "output": "[2, 4, 6]",
        "abap": "DATA: lt_numbers TYPE STANDARD TABLE OF i.\nlt_numbers = VALUE #( ( 2 ) ( 4 ) ( 6 ) ).\n"
    },
    {
        "instruction": "How do you declare a variable in Python?",
        "input": "",
        "output": "In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1.",
        "abap": "DATA: lv_x TYPE i VALUE '1'.\n"
    },
    {
        "instruction": "How to reverse a list in C++?",
        "input": "",
        "output": "You can reverse a list in C++ using the std::reverse algorithm. To reverse the list, pass the list as the first parameter and the beginning and end of the list as the second and third parameter, respectively. Alternatively, you can also reverse the list using a for loop and the operator [] to access each element of the list.",
        "abap": "#include <algorithm>\n#include <vector>\n\nvoid main() {\n    // create a vector of integers\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n\n    // print the original list\n    std::cout << \"Original List: \";\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    // reverse the list using std::reverse\n    std::reverse(numbers.begin(), numbers.end());\n\n    // print the reversed list\n    std::cout << \"Reversed List: \";\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n"
    },
    {
        "instruction": "Analyze the following text and produce the sentiment score.",
        "input": "Text: I am extremely disappointed with the customer service I received.",
        "output": "Sentiment score: -2.",
        "abap": "That doesn't sound good!\n\nSo you have some ABAP code and you'd like me to help with translation or interpretation? What specifically do you need assistance with? Do you have a piece of code that's not working as expected, or perhaps you're looking for guidance on how to refactor it?\n\nFeel free to share the code, and I'll do my best to assist you."
    },
    {
        "instruction": "Suggest an efficient data structure to store a list of words.",
        "input": "",
        "output": "A Trie (Prefix Tree) data structure is an efficient data structure for storing a list of words. It allows efficient insertion, deletion and search operations. It stores the words in a hierarchical structure by prefixing the words. This makes search operations very efficient since it involves only a single traversal of the Trie structure.",
        "abap": "TYPES: BEGIN OF ty_word,\n         word TYPE string,\n       END OF ty_word.\n\nCLASS lttrie DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      insert\n        IMPORTING\n          iv_word TYPE string\n        RAISING\n          cx_static_check,\n\n      search\n        IMPORTING\n          iv_word TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool,\n\n      delete\n        IMPORTING\n          iv_word TYPE string.\n\n    CLASS-METHODS:\n      get_words\n        RETURNING\n          VALUE(rt_words) TYPE TABLE OF ty_word.\nENDCLASS.\n\nCLASS lttrie IMPLEMENTATION.\n  METHOD insert.\n    DATA: lv_node TYPE REF TO data,\n          ls_node LIKE LINE OF rt_nodes.\n\n    IF node IS INITIAL.\n      CREATE OBJECT node.\n    ENDIF.\n\n    SPLIT iv_word AT '/' INTO TABLE : DATA(tv_parts) IN CHARACTER MODE EXCEPTIONS\n             no_assignment_specifier = 1 OTHERS = 2.\n    IF sy-subrc <> 0.\n      MESSAGE 'Invalid word' TYPE 'E'.\n      RAISE cx_static_check.\n    ENDIF.\n\n    LOOP AT tv_parts INTO DATA(ls_part).\n      IF node IS NOT BOUND.\n        node = VALUE #( children = [ ls_node ] ).\n      ELSE.\n        FIND ALL OCCURRENCES OF regex '[a-zA-Z]' IN ls_part MATCH COUNT DATA(lc_count) IN SOURCE ls_part.\n        IF sy-subrc <> 0.\n          MESSAGE 'Invalid character in word' TYPE 'E'.\n          RAISE cx_static_check.\n        ENDIF.\n\n        READ TABLE node->children INTO ls_node WITH KEY value = ls_part.\n        IF sy-subrc <> 0.\n          APPEND ls_node TO node->children.\n          READ TABLE node->children INDEX sy-tabix INTO ls_node.\n        ENDIF.\n      ENDIF.\n    ENDLOOP.\n\n    node = VALUE #( children = [ node ] ).\n\n    ENDMETHOD.\n\n  METHOD search.\n    DATA: lv_node TYPE REF TO data,\n          lt_children TYPE STANDARD TABLE OF ref_to_data,\n          ls_child LIKE LINE OF lt_children.\n\n    node = VALUE #( children = [ node ] ).\n    DO.\n      IF iv_word CA ' /'.\n        EXIT.\n      ENDIF.\n      FIND ALL OCCURRENCES OF regex '[a-zA-Z]' IN iv_word MATCH COUNT DATA(lc_count) IN SOURCE iv_word.\n      IF sy-subrc <> 0.\n        RETURN .\n      ENDIF.\n\n      READ TABLE node->children INTO ls_child WITH KEY value = iv_word+1(1).\n      IF sy-subrc <> 0.\n        RETURN .\n      ELSE.\n        APPEND ls_child TO lt_children.\n        iv_word = |{ iv_word+2 }|.\n      ENDIF.\n    ENDDO.\n\n    \" Traverse the children to find if word is in Trie\n    DO.\n      READ TABLE lt_children INTO ls_child INDEX sy-index - 1.\n      IF sy-subrc <> 0.\n        RETURN .\n      ELSE.\n        FIND ALL OCCURRENCES OF regex '[a-zA-Z]' IN iv_word MATCH COUNT DATA(lc_count) IN SOURCE iv_word.\n        IF sy-subrc <> 0 OR iv_word CA ' /'.\n          RETURN .\n        ENDIF.\n\n        READ TABLE ls_child->children INTO ls_child WITH KEY value = iv_word+1(1).\n        IF sy-subrc <> 0.\n          RETURN .\n        ELSE.\n          APPEND ls_child TO lt_children.\n          iv_word = |{ iv_word+2 }|.\n        ENDIF.\n      ENDIF.\n    ENDDO.\n\n    RETURN . \"Found the word\n  ENDMETHOD.\n\n  METHOD delete.\n    DATA: lv_node TYPE REF TO data,\n          ls_node LIKE LINE OF rt_nodes.\n\n    node = VALUE #( children = [ node ] ).\n\n    SPLIT iv_word AT '/' INTO TABLE : tv_parts IN CHARACTER MODE EXCEPTIONS\n             no_assignment_specifier = 1 OTHERS = 2.\n    IF sy-subrc <> 0.\n      MESSAGE 'Invalid word' TYPE 'E'.\n      RAISE cx_static_check.\n    ENDIF.\n\n    LOOP AT tv_parts INTO DATA(ls_part).\n      READ TABLE node->children INTO ls_node WITH KEY value = ls_part.\n      IF sy-subrc <> 0.\n        MESSAGE 'Word not found in Trie' TYPE 'W'.\n        RETURN .\n      ELSE.\n        DELETE node->children INDEX sy-tabix.\n      ENDIF.\n    ENDLOOP.\n\n    node = VALUE #( children = [ ] ).\n  ENDMETHOD.\n\n  METHOD get_words.\n    DATA: lt_nodes TYPE STANDARD TABLE OF ref_to_data,\n          ls_node LIKE LINE OF lt_nodes.\n\n    node = VALUE #( children = [ node ] ).\n\n    APPEND LINES OF node->children TO rt_words.\n\n  ENDMETHOD.\n\nINITIALIZER.\n  node = VALUE #( children = [ ] ).\n\nENDCLASS.\n"
    },
    {
        "instruction": "Reorganize the provided data into an HTML table.",
        "input": "students = [\n  {name: 'John', age: 23},\n  {name: 'Sarah', age: 26 },\n]",
        "output": "<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n </tr>\n <tr>\n  <td>Sarah</td>\n  <td>26</td>\n </tr>\n</table>",
        "abap": "DATA: lv_name TYPE string,\n      lv_age  TYPE i.\n\nlv_name = 'John'.\nlv_age = 23.\n\nWRITE:/ 'Name', '|', 'Age', '..' .\nWRITE:/.\nWRITE:/ lv_name, '|', lv_age .\n\nlv_name = 'Sarah'.\nlv_age = 26.\n\nWRITE:/ lv_name, '|', lv_age .\n"
    },
    {
        "instruction": "Determine the output of the given Python code.",
        "input": "x = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6",
        "output": "The output of the given Python code is [1, 2, 6, 4, 5].",
        "abap": "A challenge!\n\nTo translate the Python code that produces this output, I'll need to see what that code looks like. Can you please share it with me?\n\nOnce I have the code, I can attempt to translate it into ABAP (the programming language used by SAP systems)."
    },
    {
        "instruction": "Create a switch statement for the following string:",
        "input": "input = \u201ccat\u201d",
        "output": "switch(input) {\n    case 'cat':\n        console.log('meow'); \n        break;\n    default:\n        console.log('unknown input') \n        break;\n}",
        "abap": "DATA: lv_input TYPE c.\n\nlv_input = 'your input here'.\" Replace with actual value\n\nCASE lv_input.\n  WHEN 'CAT'.\n    WRITE: / 'meow'.\n  WHEN OTHERS.\n    WRITE: / 'unknown input'.\nENDCASE.\n"
    },
    {
        "instruction": "Create a CSS rule to make all h1 elements red in color.",
        "input": "",
        "output": "h1 {\n  color: red;\n}",
        "abap": "REPORT z_example.\n\nDATA: lv_color TYPE i.\n\nINITIALIZATION.\n  \" Define color constants\n  DATA: BEGIN OF ty_color OCCURS 1,\n    red     TYPE i VALUE 1,\n    green   TYPE i VALUE 2,\n    blue    TYPE i VALUE 3,\n  END OF ty_color.\n\n\" Set the color to red\nlv_color = ty_color-red.\nCLASS cl_abap_char_utilities DEFINITION LOAD.\nDATA: lv_html TYPE string.\n\n\" HTML header with red text\nlv_html = '<h1 style=\"color: ' || sy-ucomm || ';\">' || sy-ucomm || '</h1>'.\nWRITE lv_html.\n"
    },
    {
        "instruction": "Create a program that finds all the prime numbers less than or equal to a given number.",
        "input": "",
        "output": "def find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
        "abap": "CLASS lcl_prime NUMBER DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_primes\n        IMPORTING\n          VALUE( iv_num ) TYPE i\n        EXPORTING\n          VALUE( et_primes ) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_prime NUMBER IMPLEMENTATION.\n  METHOD find_primes.\n    DATA: lt_primes TYPE STANDARD TABLE OF i,\n          lv_num TYPE i,\n          lv_sqrt TYPE f.\n\n    \" Initialize the table of primes\n    CLEAR: lt_primes.\n\n    DO iv_num TIMES.\n      \" Calculate sqrt(num)\n      lv_sqrt = sqrt( val = sy-index * sy-index ).\n\n      \" Set flag to true, assume number is prime\n      DATA(lv_prime) = abap_true.\n\n      LOOP AT sy-tcfield FROM 2 UNTIL sy-index > lv_sqrt OR lv_prime IS INITIAL.\n        IF iv_num MOD sy-index EQ 0.\n          lv_prime = abap_false.\n          EXIT.\n        ENDIF.\n      ENDLOOP.\n\n      IF lv_prime IS INITIAL.\n        \" Number is not prime, skip it\n      ELSE.\n        \" Add number to the table of primes\n        APPEND sy-index TO lt_primes.\n      ENDIF.\n    ENDDO.\n\n    \" Return the list of prime numbers\n    et_primes = lt_primes.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a program to find all the factors of a given number",
        "input": "24",
        "output": "\"\"\"\nCreate a program to find all the factors of a given number \n\"\"\"\n\ndef find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\nif __name__ == '__main__':\n    print(find_factors(24))",
        "abap": "REPORT zfind_factors.\n\nCLASS lcl_factor DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_factors IMPORTING\n        iv_number TYPE i\n      RETURNING\n        VALUE(rv_factors) TYPE string_tab.\nENDCLASS.\n\nCLASS lcl_factor IMPLEMENTATION.\n  METHOD find_factors.\n    DATA: lv_num TYPE i,\n          lt_factors TYPE TABLE OF i.\n    lv_num = iv_number.\n    DO.\n      \" Check for factors from 1 to the given number\n      IF sy-index <= lv_num AND lv_num MOD sy-index = 0.\n        APPEND sy-index TO lt_factors.\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    \" Sort the list of factors\n    SORT lt_factors.\n\n    \" Convert the internal table to a string table\n    DATA: lo_string TYPE REF TO cl_abap_char_utilities,\n          lt_strings TYPE TABLE OF STRING.\n    CREATE OBJECT lo_string.\n    LOOP AT lt_factors INTO DATA(ls_factor).\n      lo_string->write( val = ls_factor format = 'I' ).\n      APPEND ls_factor TO lt_strings.\n    ENDLOOP.\n\n    rv_factors = lt_strings.\n  ENDMETHOD.\nENDCLASS.\n\nINITIALIZATION.\n  PERFORM find_factors USING 24 CHANGING DATA(lt_result) TYPE string_tab.\n  WRITE: / lt_result.\n\nCLASS lcl_factor DEFINITION INHERITING FROM cl_abap_objectdescr DEFERRED.\nCLASS lcl_factor IMPLEMENTATION.\nENDCLASS.\n"
    },
    {
        "instruction": "Explain what API stands for and what it does.",
        "input": "",
        "output": "API stands for Application Programming Interface, which is a set of routines, protocols, and tools used to build software applications. It defines how two applications can interact with each other and allows for data to be exchanged between them. APIs provide developers with predefined sets of code which can be used to perform a variety of tasks and help developers build applications quickly and easily.",
        "abap": "\" Define a program-level type for API interaction\nTYPE-DEFINITION TYPE group TYPE api_interaction.\n\nCLASS lcl_api DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" Interface to interact with the API\n      get_data IMPORTING\n                 VALUE(iv_api_url) TYPE string\n               EXPORTING\n                 VALUE(ev_data)   TYPE string.\nENDCLASS.\n\n\" Implement the class that handles the API interaction\nCLASS lcl_api IMPLEMENTATION.\n  METHOD get_data.\n    \" Make an HTTP request to retrieve data from the API\n    DATA: lo_rest_client TYPE REF TO if_rest_client,\n          lv_response    TYPE string.\n\n    CREATE OBJECT lo_rest_client.\n\n    lo_rest_client->set_url( iv_api_url ).\n    lo_rest_client->execute_request(\n      EXPORTING\n        iv_method  = if_rest_client=>method_get\n      IMPORTING\n        ev_response = lv_response ).\n\n    \" Parse the response to extract the data\n    DATA: lr_data TYPE string.\n    SPLIT lv_response AT `{'` INTO TABLE lr_data.\n    ev_data = lr_data[ 1 ].\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Explain the concept of inheritance in Python?",
        "input": "",
        "output": "Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.\n\nIn Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods.",
        "abap": "CLASS z_parent DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      method1 IMPORTING value1 TYPE i EXPORTING result TYPE string RAISING exceptions.\nENDCLASS.\n\nCLASS z_parent IMPLEMENTATION.\n  METHOD method1.\n    result = |Result: { value1 }|.\n  ENDMETHOD.\nENDCLASS.\n\nCLASS z_child DEFINITION INHERITING FROM z_parent.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      method2 IMPORTING value2 TYPE i EXPORTING result TYPE string RAISING exceptions.\nENDCLASS.\n\nCLASS z_child IMPLEMENTATION.\n  METHOD method2.\n    super->method1( value1 = value2 ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Explain what a for loop does in Python.",
        "input": "",
        "output": "A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.",
        "abap": "for variable in sequence:\n  # execute this code block\n"
    },
    {
        "instruction": "Generate a code snippet to convert a given string to uppercase",
        "input": "",
        "output": "function toUpperCase(str) {\n  return str.toUpperCase();\n}",
        "abap": "FORM to_upper_case\n  USING\n    p_str TYPE string.\n\n  DATA: lv_result TYPE string.\n\n  lv_result = p_str.\n  TRANSLATE lv_result TO UPPER CASE.\n  RETURN.\nENDFORM.\n"
    },
    {
        "instruction": "Write a function to generate the nth Fibonacci number.",
        "input": "< noinput >",
        "output": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)",
        "abap": "FORM fib USING p_n TYPE i RETURNING r_result TYPE i.\n  IF p_n = 0.\n    r_result = 0.\n  ELSEIF p_n = 1.\n    r_result = 1.\n  ELSE.\n    r_result = fib( p_n - 2 ) + fib( p_n - 1 ).\n  ENDIF.\nENDFORM.\n"
    },
    {
        "instruction": "Calculate the mean of a list of numbers.",
        "input": "lst = [1, 2, 3, 4, 5]",
        "output": "def calculate_mean(lst):\n    return sum(lst) / len(lst)\n\nprint(calculate_mean([1, 2, 3, 4, 5]))",
        "abap": "REPORT zcalculate_mean.\n\nCLASS lcl_calculate_mean DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_mean\n        IMPORTING\n          VALUE( it_numbers ) TYPE STANDARD TABLE OF i4\n        RETURNING\n          VALUE( ro_result ) TYPE f.\nENDCLASS.\n\nCLASS lcl_calulate_mean IMPLEMENTATION.\n  METHOD calculate_mean.\n    DATA: lv_sum TYPE i,\n          lv_count TYPE i.\n\n    LOOP AT it_numbers INTO DATA(ls_number).\n      lv_sum = lv_sum + ls_number.\n      lv_count = lv_count + 1.\n    ENDLOOP.\n\n    ro_result = lv_sum / lv_count.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_numbers TYPE STANDARD TABLE OF i4,\n      lv_mean TYPE f.\n\nlt_numbers = VALUE #( ( 1 )( 2 )( 3 )( 4 )( 5 ) ).\nlv_mean = lcl_calculate_mean=>calculate_mean( it_numbers = lt_numbers ).\n\nWRITE: / lv_mean.\n"
    },
    {
        "instruction": "Create an if-else statement in Python that checks if an integer is even or odd.",
        "input": "",
        "output": "if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")",
        "abap": "DATA: lv_num TYPE i.\n\nlv_num = num. \" assuming 'num' is a variable with an integer value\n\nIF lv_num MOD 2 = 0.\n    WRITE: / 'The number is even'.\nELSE.\n    WRITE: / 'The number is odd'.\nENDIF.\n"
    },
    {
        "instruction": "Construct a query in SQL to find the names of the customers who made purchase on a given date.",
        "input": "The table name is 'Orders' and the given date is '2020-06-25'.",
        "output": "SELECT customer FROM orders WHERE date = '2020-06-25';",
        "abap": "DATA: lv_date TYPE dats.\nlv_date = '20200625'.\n\nSELECT customer\n  INTO TABLE DATA(lt_customers)\n  FROM orders\n  WHERE date = lv_date.\n"
    },
    {
        "instruction": "Construct a for-loop to iterate over a list.",
        "input": "list = [1, 2, 3, 4]",
        "output": "for i in list:\n    print(i)",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF string.\n\n\" populate list with values (e.g. add items to lv_list)\n\nLOOP AT lv_list INTO DATA(lv_item).\n  WRITE: / lv_item.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a class in Python that implements a stack.",
        "input": "",
        "output": "class Stack: \n    def __init__(self): \n        self.stack = []\n\n    def push(self,element): \n        self.stack.append(element)  \n\n    def pop(self): \n        return self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]",
        "abap": "CLASS zcl_stack DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ixml_node .\n    METHODS:\n      \" Constructor\n      constructor\n      push IMPORTING element TYPE any,\n      pop RETURNING VALUE(return_value) TYPE any,\n      peek RETURNING VALUE(value) TYPE any.\nENDCLASS.\n\nCLASS zcl_stack IMPLEMENTATION.\n  METHOD constructor.\n    DATA: ls_stack TYPE STANDARD TABLE OF any.\n    self->stack = ls_stack.\n  ENDMETHOD.\n\n  METHOD push.\n    INSERT element INTO TABLE self->stack.\n  ENDMETHOD.\n\n  METHOD pop.\n    \" Check if stack is not empty\n    IF line_exists( self-stack ) IS NOT ABAP_TRUE ).\n      RAISE EXCEPTION type cx_static_check.\n    ENDIF.\n\n    DATA: lv_value TYPE any.\n    READ TABLE self->stack INDEX size( self->stack ) - 1 INTO lv_value.\n    RETURN VALUE = lv_value.\n    DELETE self->stack INDEX size( self->stack ) - 1.\n  ENDMETHOD.\n\n  METHOD peek.\n    \" Check if stack is not empty\n    IF line_exists( self-stack ) IS NOT ABAP_TRUE ).\n      RAISE EXCEPTION type cx_static_check.\n    ENDIF.\n\n    DATA: lv_value TYPE any.\n    READ TABLE self->stack INDEX size( self->stack ) - 1 INTO lv_value.\n    value = lv_value.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a function to generate a random integer between two given numbers.",
        "input": "",
        "output": "import random\ndef rand_int(low, high):\n\treturn random.randint(low,high)",
        "abap": "FORM z_random_int\n  IMPORTING\n    VALUE(low) TYPE i\n    VALUE(high) TYPE i\n  EXPORTING\n    VALUE(result) TYPE i.\n\n  DATA: lv_result TYPE i.\n\n  result = sy-datum + random( high - low ).\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a SQL query to return the sum of all salaries.",
        "input": "",
        "output": "SELECT SUM(salary)\nFROM employees;",
        "abap": "REPORT zsum_salary.\n\nTYPES: BEGIN OF ty_employee,\n         salary TYPE f,\n       END OF ty_employee.\n\nDATA: lt_employees TYPE STANDARD TABLE OF ty_employee,\n      ls_employee  LIKE LINE OF lt_employees.\n\nSELECT salary FROM employees INTO CORRESPONDING FIELDS OF TABLE lt_employees.\nSUMMARY (lt_employees) REFERENCE INTO DATA(sum_salary).\n\nWRITE: / sum_salary.\n"
    },
    {
        "instruction": "Modify the following code to get the desired output.",
        "input": "for i in range(1, 7):\n    for j in range(1, i):\n        print(j)",
        "output": "for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()",
        "abap": "DATA: lv_i TYPE i.\n\nDO.\n  lv_i = sy-index - 1.\n  IF lv_i > 6.\n    EXIT.\n  ENDIF.\n\n  DATA: lv_j TYPE i.\n\n  DO.\n    lv_j = sy-index - 1.\n    IF lv_j >= lv_i + 1.\n      EXIT.\n    ENDIF.\n\n    WRITE: lv_j, sep= space.\n\n    IF sy-index = lv_i.\n      NEW-LINE.\n    ENDIF.\n\n  ENDDO.\n\nENDDO.\n"
    },
    {
        "instruction": "Use the built-in sort method to sort a list of strings by their length.",
        "input": "mylist = ['this', 'is', 'a', 'long', 'list', 'of', 'strings']",
        "output": "mylist.sort(key=len)\nprint(mylist)",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i.\n\n\" Initialize a list of integers\nlv_list = VALUE #( 5 2 8 3 1 9 ).\n\nSORT lv_list BY line.\nWRITE: / lv_list.\n"
    },
    {
        "instruction": "Explain how to perform a bubble sort on a given array.",
        "input": "",
        "output": "// To perform a bubble sort on a given array:\n// 1. Iterate over the array and compare adjacent elements\n// 2. If the element on the left is greater than the element on the right, swap them\n// 3. After each pass, the largest element in the array will \"bubble\" up to the right\n// 4. Continue to iterate and swap until the array is sorted\n// 5. Return the sorted array",
        "abap": "REPORT z_bubble_sort.\n\nTYPES: BEGIN OF ty_array,\n         value TYPE i,\n       END OF ty_array.\n\nDATA: lt_array TYPE STANDARD TABLE OF ty_array,\n      lv_index TYPE i,\n      lv_next_index TYPE i,\n      lv_temp TYPE ty_array,\n      lv_sorted TYPE abap_bool.\n\nDATA(lv_length) = 10. \" let's assume the array has a fixed length of 10\n\n\" initialize array\nDO.\n  lv_index = sy-index - 1.\n  IF lv_index > lv_length.\n    EXIT.\n  ENDIF.\n  MOVE-CORRESPONDING '1000000' TO CORRESPONDING FIELDS OF LINE lt_array INDEX sy-index.\nENDDO.\n\nlv_sorted = abap_true.\n\nLOOP AT lt_array INTO DATA(ls_element) WHILE lv_sorted <> abap_false.\n\n  lv_index = sy-tabix - 1.\n  DO.\n    lv_next_index = lv_index + 1.\n    IF lv_next_index >= lines( lt_array ).\n      EXIT.\n    ENDIF.\n    IF ls_element-value > lt_array[ lv_next_index ]-value.\n      \" swap\n      MOVE-CORRESPONDING ls_element TO CORRESPONDING FIELDS OF lt_array INDEX lv_next_index.\n      MOVE-CORRESPONDING lt_array[ lv_next_index ] TO CORRESPONDING FIELDS OF ls_element.\n    ENDIF.\n    DESCRIBE TABLE lt_array LINES INTO DATA(lv_size).\n    IF lv_size = lines( lt_array ).\n      lv_sorted = abap_true.\n    ELSEIF ls_element-value > lt_array[ sy-tabix + 1 ]-value.\n      lv_sorted = abap_false.\n    ENDIF.\n  ENDDO.\n\nENDLOOP.\n\n\" print sorted array\nLOOP AT lt_array INTO ls_element.\n  WRITE: / ls_element-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Suggest a syntax to create a PHP class for a user.",
        "input": "",
        "output": "class User {\n  public $name;\n  public $age;\n\n  function __construct($name, $age) {\n    $this->name = $name;\n    $this->age = $age;\n  }\n}",
        "abap": "CLASS lcl_user DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_rap_query_result_set_item.\n\n    METHODS:\n      constructor\n        IMPORTING\n          iv_name TYPE string\n          iv_age  TYPE i,\n      get_name    RETURNING VALUE(rv_name) TYPE string,\n      set_name    IMPORTING value(iv_name) TYPE string,\n      get_age     RETURNING VALUE(rv_age) TYPE i,\n      set_age     IMPORTING value(iv_age) TYPE i.\n\n  PROTECTED SECTION.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_user IMPLEMENTATION.\n  METHOD constructor.\n    me->name = iv_name.\n    me->age  = iv_age.\n  ENDMETHOD.\n\n  METHOD get_name.\n    rv_name = me->name.\n  ENDMETHOD.\n\n  METHOD set_name.\n    me->name = iv_name.\n  ENDMETHOD.\n\n  METHOD get_age.\n    rv_age = me->age.\n  ENDMETHOD.\n\n  METHOD set_age.\n    me->age = iv_age.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a program which will take the user's name and output a custom message depending on the supplied name",
        "input": "name = 'John'",
        "output": "def greet_user(name):\n    \"\"\"\n    Greet the user with a custom message depending on the supplied name.\n    \"\"\"\n    if name == 'John':\n        print('Hey there John! Welcome back!')\n    elif name == 'Mary':\n        print('Good morning Mary! How are you doing today?')\n    else:\n        print('Hi there! Welcome to our service!')",
        "abap": "REPORT zgreet_user.\n\nCLASS lcl_greet_user DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      greet_user\n        IMPORTING\n          value(im_name) TYPE string\n        RAISING\n          cx_no_custom_handler.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_greet_user IMPLEMENTATION.\n  METHOD greet_user BY PROGRAM.\n    DATA: lv_message TYPE string.\n\n    IF im_name = 'John'.\n      lv_message = |Hey there John! Welcome back!|.\n    ELSEIF im_name = 'Mary'.\n      lv_message = |Good morning Mary! How are you doing today?|.\n    ELSE.\n      lv_message = |Hi there! Welcome to our service!|.\n    ENDIF.\n\n    WRITE: lv_message.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Find the average salary of the given table.",
        "input": "Table structure:\nEmployee_ID  Name   Department   Salary",
        "output": "SELECT AVG (Salary) \nFROM Employee ;",
        "abap": "DATA: lv_avg_salary TYPE p.\n\nSELECT avg( salary )\n  INTO CORRESPONDING FIELDS OF lv_avg_salary\n  FROM employee.\n"
    },
    {
        "instruction": "Describe the process of web scraping.",
        "input": "",
        "output": "Web scraping is the process of extracting data from websites using automated software. It involves sending a request to the web server, processing the HTML, locating the relevant data, and saving it. The process usually involves using web crawlers and parsing data using regular expressions or custom logic.",
        "abap": "REPORT zweb_scraping_example.\n\nTYPES: BEGIN OF ty_data,\n          url TYPE string,\n          title TYPE string,\n        END OF ty_data.\n\nDATA: ls_data TYPE ty_data.\n\n\" Define the URL to scrape\nls_data-url = 'https://example.com'.\n\n\" Create a new HTTP client to send the request\nDATA(lo_client) = cl_http_client=>create_by_url(\n  EXPORTING\n    url                            = ls_data-url ).\n\n\" Send the request and retrieve the response\nDATA(lv_status) = lo_client->send(\n  REQUEST  =\n    VALUE #(\n      method = 'GET'\n      headers = value #( ( name = 'Accept' value = 'text/html' ) )\n    )\n    ).\nIF lv_status CA if_http_status_ok.\n  DATA(lv_response) = lo_client->response->get_text( ).\nELSE.\n  MESSAGE 'Failed to retrieve response'( ).\nENDIF.\n\n\" Parse the HTML and extract the relevant data\nDATA(lv_title) = cl_htmlparser=>parse(\n  text    = lv_response\n  pattern = '<title>(.*?)</title>'\n ).\n\n\" Save the extracted data\nls_data-title = lv_title.\nWRITE: / ls_data-url, ls_data-title.\n\n\" Clean up\nlo_client->close( ).\n"
    },
    {
        "instruction": "What is a JavaScript Promise?",
        "input": "",
        "output": "A JavaScript Promise is an object that represents the eventual completion of an asynchronous operation. A Promise object can be either resolved (successful) or rejected (failed). It provides a unified API for handling asynchronous operations, no matter when the operations are completed.",
        "abap": "CLASS lcl_async_operation DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n    INTERFACES if_abap_boo Promise.\n\n    METHODS:\n      async_operation\n        IMPORTING\n          iv_input TYPE string\n        EXPORTING\n          ev_result TYPE string.\n\nENDCLASS.\n\nCLASS lcl_async_operation IMPLEMENTATION.\n  METHOD if_oo_adt_classrun~main.\n    DATA: lo_promise TYPE REF TO lcl_async_operation,\n          lv_result TYPE string.\n\n    CREATE OBJECT lo_promise.\n    PERFORM asynchronous_operation USING \"Hello, World!\" INTO lv_result.\n    WRITE : lv_result.\n  ENDMETHOD.\n\n  METHOD if_abap_boo Promise~then.\n    FIELD-SYMBOL: <fs_async_op> TYPE lcl_async_operation.\n\n    ASSIGN me TO <fs_async_op>.\n    IF sy-subrc <> 0.\n      \" Error handling\n      MESSAGE 'Error assigning reference to async operation' TYPE 'E'.\n    ELSEIF <fs_async_op>->async_operation( ) EQ abap_true.\n      \" Operation completed successfully, resolve promise\n      RAISE EXCEPTION TYPE cx_static_check message 'Promise resolved'.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD if_abap_boo Promise~catch.\n    FIELD-SYMBOL: <fs_async_op> TYPE lcl_async_operation.\n\n    ASSIGN me TO <fs_async_op>.\n    IF sy-subrc <> 0.\n      \" Error handling\n      MESSAGE 'Error assigning reference to async operation' TYPE 'E'.\n    ELSEIF <fs_async_op>->async_operation( ) EQ abap_false.\n      \" Operation completed with error, reject promise\n      RAISE EXCEPTION TYPE cx_static_check message 'Promise rejected'.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD lcl_async_operation~async_operation.\n    DATA: lv_result TYPE string.\n\n    \" Simulate an asynchronous operation (in a real scenario this would likely involve some external call or computation)\n    SLEEP 1.\n\n    \" Successful completion\n    lv_result = iv_input && ' processed successfully'.\n\n    ev_result = lv_result.\n\n    \" Mark the operation as completed\n    set_method_completed( abap_true ).\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Create a program to compute the checksum of a given data packet",
        "input": "data_packet = [0xff, 0x0a, 0x1b, 0x3f]",
        "output": "\"\"\"\nCreate a program to compute the checksum of a given data packet\n\"\"\"\n\ndef compute_checksum(data_packet):\n    checksum = 0\n    for x in data_packet:\n        checksum += x\n    return checksum\n\nif __name__ == '__main__':\n    data_packet = [0xff, 0x0a, 0x1b, 0x3f]\n    print(compute_checksum(data_packet))",
        "abap": "REPORT zchecksum_calculator.\n\nCLASS lcl_checksum DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      compute_checksum\n        IMPORTING\n          VALUE(iv_data_packet) TYPE string\n        RETURNING\n          VALUE(rv_checksum) TYPE i.\nENDCLASS.\n\nCLASS lcl_checksum IMPLEMENTATION.\n  METHOD compute_checksum.\n    DATA: lv_checksum TYPE i,\n          lv_offset   TYPE i,\n          lv_byte     TYPE x LENGTH 2.\n\n    DO strlen( iv_data_packet ) TIMES.\n      MOVE-CORRESPONDING iv_data_packet+lv_offset(lv_offset+1) TO lv_byte.\n      ADD lv_byte TO lv_checksum.\n      lv_offset = lv_offset + 1.\n    ENDDO.\n\n    rv_checksum = lv_checksum MOD 256.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lv_data_packet TYPE string,\n      lv_checksum    TYPE i.\n\nlv_data_packet = 'FF0A1B3F'. \" example data packet\n\nlv_checksum = lcl_checksum=>compute_checksum( lv_data_packet ).\nWRITE: / lv_checksum. \" output checksum value\n"
    },
    {
        "instruction": "Create an array of the numbers from 1 to 10.",
        "input": "",
        "output": "let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
        "abap": "DATA: lv_numbers TYPE STANDARD TABLE OF i VALUE #( val = '1' val = '2' val = '3' val = '4' val = '5' val = '6' val = '7' val = '8' val = '9' val = '10' ).\n\nTYPES: BEGIN OF ty_number,\n         number TYPE i,\n       END OF ty_number.\n\nDATA: lt_numbers TYPE STANDARD TABLE OF ty_number.\n\" Assign data to internal table\nlt_numbers = VALUE #( ( number = 1 ) ( number = 2 ) ( number = 3 ) ( number = 4 ) ( number = 5 ) ( number = 6 ) ( number = 7 ) ( number = 8 ) ( number = 9 ) ( number = 10 ) ).\n"
    },
    {
        "instruction": "Convert the following list to a set.",
        "input": "my_list = [2, 3, 5, 7]",
        "output": "my_set = set(my_list)",
        "abap": "\" Create a set from a list\nDATA: ls_set TYPE STANDARD TABLE OF i,\n      li_list LIKE LINE OF ls_set.\n\n\" Assign values to the list\nls_set = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\n\n\" Convert the list to a set\nDATA(lo_set) = cl_abap_set=>create( ls_set ).\n"
    },
    {
        "instruction": "Write a code to compute the mean of an input list of numbers.",
        "input": "mylist = [1,2,3,4,5]",
        "output": "\"\"\"\nWrite a code to compute the mean of an input list of numbers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Computing the sum and number of elements\nsum = 0\nnum_elements = len(mylist)\n\n# Looping through each element\nfor i in mylist:\n    sum += i\n\n# Computing the mean\nmean = sum/num_elements\n\n# Printing the mean\nprint(\"Mean of the list is\", mean)",
        "abap": "\" Compute the mean of an input list of numbers \"\n\nDATA: lt_numbers TYPE STANDARD TABLE OF f,\n       lv_sum    TYPE i,\n       lv_mean   TYPE f.\n\n\" List containing the elements \"\nlt_numbers = VALUE #( 1, 2, 3, 4, 5 ).\n\n\" Computing the sum and number of elements \"\nDO.\n  DATA(lv_num) = sy-index - 1. \" start with index 0\n  lv_sum = lv_sum + lt_numbers[ sy-index ].\n  IF sy-index = lines( lt_numbers ).\n    EXIT.\n  ENDIF.\nENDDO.\n\n\" Computing the mean \"\nlv_mean = lv_sum / lines( lt_numbers ).\n\n\" Printing the mean \"\nWRITE: 'Mean of the list is:', lv_mean.\n"
    },
    {
        "instruction": "Create a function that takes in a list of temperatures and returns the average temperature",
        "input": "list_of_temperatures = [20, 24, 26, 18]",
        "output": "def average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    return sum_items / num_items",
        "abap": "CLASS lcl_average_temperature DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      average_temperature\n        IMPORTING\n          VALUE(iv_temperatures) TYPE STANDARD TABLE OF float\n        RETURNING\n          VALUE(rv_average) TYPE f.\nENDCLASS.\n\nCLASS lcl_average_temperature IMPLEMENTATION.\n  METHOD average_temperature.\n    DATA: lv_sum TYPE f,\n          lv_num_items TYPE i.\n\n    lv_num_items = lines( iv_temperatures ).\n    DO.\n      LOOP AT iv_temperatures INTO lv_sum.\n        ADD lv_sum TO lv_sum.\n      ENDDO.\n      IF lv_num_items > sy-index.\n        RETURN.\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    rv_average = lv_sum / lv_num_items.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Compute the maximum product of two integers in an array.",
        "input": "[-4, 2, -3, 6]",
        "output": "def max_product(arr):\n    max1 = max(arr)\n    arr.remove(max1)\n    max2 = max(arr)\n    return max1 * max2\n\nprint(max_product([-4, 2, -3, 6]))",
        "abap": "FORM max_product USING p_arr TYPE c LENGTH 100 p_result TYPE i.\n  DATA: lv_max1 TYPE i,\n        lv_max2 TYPE i.\n\n  SORT p_arr ASCENDING.\n  READ TABLE p_arr INDEX sy-tfill INTO lv_max1.\n  DELETE p_arr INDEX sy-sdlinx - 1.\n  READ TABLE p_arr INDEX sy-tfill INTO lv_max2.\n\n  p_result = lv_max1 * lv_max2.\nENDFORM.\n\nDATA: result TYPE i.\n\nmax_product( val = '(-4, 2, -3, 6)' ) .\nWRITE: / result.\n"
    },
    {
        "instruction": "Write a SQL query to find the highest salary of a employee in the salary table?",
        "input": "",
        "output": "SELECT MAX(salary) FROM salary;",
        "abap": "DATA: lv_max_salary TYPE f.\n\nSELECT SINGLE max( salary ) INTO lv_max_salary FROM zsalary.\n\nWRITE: / 'Maximum Salary:', lv_max_salary.\n"
    },
    {
        "instruction": "Create a loop to traverse a given binary tree.",
        "input": "",
        "output": "def traverse_tree(root):\n\n    # Initialize the stack\n    stack = [root]\n\n    # traversal loop\n    while stack:\n        node = stack.pop()\n\n        # Do something with the node\n        ...\n\n        # Push the left and right nodes to the stack\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)",
        "abap": "CLASS lcl_traversal DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: traverse_tree\n      IMPORTING\n        value(iv_root) TYPE REF TO cl_abapcounter\n      EXPORTING\n        iv_result  TYPE abapbool.\n\nENDCLASS.\n\nCLASS lcl_traversal IMPLEMENTATION.\n  METHOD traverse_tree BY TABLEWORKER.\n    DATA:\n      ls_stack TYPE STANDARD TABLE OForef to data,\n      lo_node  TYPE REF TO cl_abapcounter.\n\n    APPEND iv_root->parent TO ls_stack.\n\n    WHILE sy-subrc = 0.\n      LOOP AT ls_stack INTO lo_node.\n        \"Do something with the node\n        ...\n        \n        IF lo_node-LEFT IS NOT INITIAL.\n          APPEND lo_node->left TO ls_stack.\n        ENDIF.\n        IF lo_node->RIGHT IS NOT BINARY .\n          APPEND lo_node->right TO ls_stack.\n        ENDIF.\n      ENDLOOP.\n\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Java Method that takes an array of integers and returns true if the array is sorted in ascending order.",
        "input": "array = [7, 18, 24, 55, 98]",
        "output": "public static boolean isSorted(int[] array) { \n    int n = array.length; \n    int temp = array[0]; \n  \n    for (int i = 1; i < n; i++) { \n        if (temp > array[i]) \n            return false; \n        temp = array[i]; \n    } \n  \n    return true; \n}",
        "abap": "CLASS lcl_sort CHECKED.\n\n  METHOD zif_abap2sort~is_sorted.\n    DATA: lv_n TYPE i,\n          lv_temp TYPE i.\n\n    lv_n = lines( it_array ).\n    MOVE-CORRESPONDING it_array[ 0 ] TO lv_temp.\n\n    DO.\n      IF sy-index > lv_n.\n        EXIT.\n      ENDIF.\n      IF lv_temp > it_array[ sy-index ].\n        RETURN abap_false.\n      ENDIF.\n      MOVE-CORRESPONDING it_array[ sy-index ] TO lv_temp.\n    ENDDO.\n\n    RETURN abap_true.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a JavaScript function to check whether a given number is odd or even.",
        "input": "num = 21",
        "output": "function isEvenNumber(num) {\n  return num % 2 === 0;\n}\n\nlet result = isEvenNumber(21);\nconsole.log(result); //false",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_even_number IMPORTING value(num) TYPE i\n                       RETURNING value(result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD is_even_number.\n    result = num MOD 2 EQ 0.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lr_example TYPE REF TO lcl_example,\n      lv_result TYPE abap_bool.\n\nCREATE OBJECT lr_example.\nlv_result = lr_example->is_even_number( 21 ).\nWRITE: / lv_result. \"false\n"
    },
    {
        "instruction": "Create an MySQL table with four columns: \"id\", \"name\", \"age\", and \"city\".",
        "input": "",
        "output": "CREATE TABLE table_name (\n    id int(11) NOT NULL AUTO_INCREMENT,\n    name varchar(50) NOT NULL,\n    age int(11) NOT NULL,\n    city varchar(50) NOT NULL,\n    PRIMARY KEY (id)\n);",
        "abap": "TYPES: BEGIN OF ty_table_name,\n         id   TYPE i,\n         name TYPE c LENGTH 50,\n         age  TYPE i,\n         city TYPE c LENGTH 50,\n       END OF ty_table_name.\n\nDATA: lt_table_name TYPE STANDARD TABLE OF ty_table_name.\n\nCREATE DATA: lt_table_name.\n"
    },
    {
        "instruction": "Create a dictionary from two lists with the same length.",
        "input": "mylist1 = [\"a\", \"b\", \"c\", \"d\"]\nmylist2 = [\"1\", \"2\", \"3\", \"4\"]",
        "output": "mydict = dict(zip(mylist1, mylist2))\nprint(mydict)",
        "abap": "DATA: ls_type TYPE ty_typpi,\n      lt_type TYPE STANDARD TABLE OF ty_typedescr.\n\n\" Define internal types\nCLASS lcl_type DEFINITION.\n  TYPES:\n    BEGIN OF TYPE ty_ppi.\n      p1 TYPE i.\n      p2 TYPE i.\n    END OF TYPE ty_ppi,\n\n    BEGIN OF TYPE ty_typedescr.\n      name TYPE string.\n      type TYPE string.\n    END OF TYPE ty_typedescr.\n\nENDCLASS.\n\nDATA: ls_typeppi TYPE lcl_type=>ty_ppi,\n      ls_typdesc TYPE lcl_type=>ty_typedescr.\n\n\" Define lists\nDATA: lt_ppi TYPE STANDARD TABLE OF lcl_type=>ty_ppi,\n      lt_typdesc TYPE STANDARD TABLE OF lcl_type=>ty_typedescr.\nlt_ppi = VALUE #( ( p1 = 10 p2 = 20 )\n                  ( p1 = 30 p2 = 40 ) ).\n\nlt_typdesc = VALUE #( ( name = 'INT' type = 'I' )\n                      ( name = 'STRING' type = 'S' ) ).\n\n\" Combine lists into internal table of key-value pairs\nDATA: lt_ppi_desc TYPE STANDARD TABLE OF lcl_type=>ty_ppi WITH KEY.\n\nLOOP AT lt_typdesc INTO ls_typdesc.\n  READ TABLE lt_ppi INTO ls_typeppi WITH KEY name = ls_typdesc-name.\n  IF sy-subrc <> 0.\n    WRITE:/ 'Error: No matching data found for ', ls_typdesc-name.\n  ELSE.\n    INSERT ls_typeppi INTO TABLE lt_ppi_desc.\n  ENDIF.\nENDLOOP.\n\n\" Print internal table\nWRITE:/ abap_line( lt_ppi_desc ).\n"
    },
    {
        "instruction": "Create a Python program to generate a random string of 5 characters.",
        "input": "",
        "output": "import random\n\ndef generate_random_string():\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(5):\n    random_string += random.choice(characters)\n  \n  return random_string\n\nprint(generate_random_string())",
        "abap": "REPORT zrandomstring.\n\nTYPES: ty_random_character TYPE c LENGTH 1.\nDATA: lv_characters TYPE string VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n      lv_random_string TYPE string,\n      lv_random_char  TYPE ty_random_character.\n\nDATA: lv_index TYPE i.\n\nDO 5 TIMES.\n  lv_random_char = |{ sy-cdate sy-uzeit }|.\n  TRANSLATE lv_random_char TO UPPER CASE.\n  CONCATENATE lv_random_string lv_random_char INTO lv_random_string.\nENDDO.\n\nWRITE: lv_random_string.\n"
    },
    {
        "instruction": "Incorporate the following change in the given code.",
        "input": "def calculate_area(base, height):\n    area = base*height\n    area = float(area)\nChange: Calculate area of the triangle in square meters.",
        "output": "def calculate_area(base, height):\n    area = 0.5*base*height\n    area = float(area)*(10**-6)\n    return area",
        "abap": "CLASS lcl_triangle DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_area\n        IMPORTING\n          base     TYPE f\n          height   TYPE f\n        EXPORTING\n          result   TYPE f.\nENDCLASS.\n\nCLASS lcl_triangle IMPLEMENTATION.\n  METHOD calculate_area.\n    DATA: lv_area TYPE f.\n\n    lv_area = ( base * height ) / 2.0 .\n    lv_area = lv_area * ( 10 ** -6 ).\n\n    result = lv_area.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a web page with a centered title and paragraph in HTML.",
        "input": "title = \"My First Web Page\"\nparagraph = \"This is my first web page. It is an amazing experience!\"",
        "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>My First Web Page</title>\n    </head>\n    <body>\n        <div class=\"main\">\n            <h1 align=\"center\">My First Web Page</h1>\n            <p align=\"center\">This is my first web page. It is an amazing experience!</p>\n        </div>\n    </body>\n</html>",
        "abap": "REPORT zmy_first_web_page.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      display\n        IMPORTING\n          it_data TYPE string OPTIONAL,\n        RAISING\n          cx_static_check.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD display.\n    DATA: lv_html TYPE string.\n\n    lv_html =\n      '<!DOCTYPE html>'.\n    APPEND '&lt;html&gt;' TO lv_html.\n    APPEND ' &lt;head&gt;'.\n    APPEND ' &lt;/head&gt;'.\n    APPEND ' &lt;body&gt;'.\n\n    APPEND ' &lt;div class=\"main\"&gt;'.\n    APPEND ' &lt;h1 align=\"center\"&gt;My First Web Page&lt;/h1&gt;'.\n    APPEND ' &lt;p align=\"center\"&gt;This is my first web page. It is an amazing experience!&lt;/p&gt;'.\n    APPEND ' &lt;/div&gt;'.\n\n    APPEND ' &lt;/body&gt;'.\n    APPEND '&lt;/html&gt;' TO lv_html.\n\n    WRITE: / lv_html.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  CALL METHOD cl_http_server=>if_http_server~set_default_host( default_host = ihttp_server ).\n  CALL METHOD cl_http_server=>if_http_server~set_default_type( ityp_name = 'HTML' ).\n\n  DATA: lo_url TYPE REF TO if_ixml_document,\n        li_stream_factory TYPE REF TO cl_ixml_stream_factory.\n\n  CREATE OBJECT lo_url.\n  lo_url->append_text(\n    '<!DOCTYPE html>'.\n    '<html>'.\n    '<head>'.\n    '</head>'.\n    '<body>'.\n    '<div class=\"main\">'.\n    '<h1 align=\"center\">My First Web Page</h1>'.\n    '<p align=\"center\">This is my first web page. It is an amazing experience!</p>'.\n    '</div>'.\n    '</body>'.\n    '</html>' ).\n\n  CALL METHOD lo_url->set_root_element( it_name = 'HTML' ).\n  CALL METHOD lo_url->add_attribute( name = 'DOCTYPE' value = '' ).\n\n  lo_url->append_text( '<!DOCTYPE html>' ).\n  lo_url->append_text( '<html>' ).\n  lo_url->append_text( '<head>' ).\n  lo_url->append_text( '</head>' ).\n  lo_url->append_text( '<body>' ).\n  lo_url->append_text( '<div class=\"main\">' ).\n  lo_url->append_text( '<h1 align=\"center\">My First Web Page</h1>' ).\n  lo_url->append_text( '<p align=\"center\">This is my first web page. It is an amazing experience!</p>' ).\n  lo_url->append_text( '</div>' ).\n  lo_url->append_text( '</body>' ).\n  lo_url->append_text( '</html>' ).\n\n  CALL METHOD cl_http_server=>if_http_server~set_document(\n    exporting\n      document = lo_url ).\n\n  DATA: li_handler TYPE REF TO if_ixml_writer.\n\n  CREATE OBJECT li_handler TYPE ixml_writer_html.\n  CALL METHOD li_handler->execute( IMPORTING writer = li_handler ).\n\nEND-OF-SELECTION.\n"
    },
    {
        "instruction": "Debug the given SQL query.",
        "input": "SELECT Name, COUNT(*) \nFROM Employees\nGROUP BY Name",
        "output": "SELECT Name, COUNT(*) \nFROM Employees\nGROUP BY Name\nHAVING COUNT(*) > 1;",
        "abap": "DATA: lt_employees TYPE STANDARD TABLE OF ty_employees.\n\nTYPES: BEGIN OF ty_employees,\n         name TYPE string,\n       END OF ty_employees.\n\nSELECT name INTO CORRESPONDING FIELDS OF TABLE @lt_employees \nFROM edc000001. \" Table Employees\n\nTYPES: BEGIN OF ty_count,\n          name TYPE string,\n          count TYPE i,\n        END OF ty_count.\nDATA: lt_count TYPE STANDARD TABLE OF ty_count.\n\nLOOP AT lt_employees INTO DATA(ls_employee).\n  READ COUNT 1 WITH KEY name = ls_employee-name INTO DATA(lt_count) TABLE @lt_count.\n  IF sy-subrc <> 0.\n    APPEND VALUE #( name = ls_employee-name count = 1 ) TO lt_count.\n  ELSE.\n    MODIFY table = lt_count FROM VALUE #( name = ls_employee-name count = lt_count[ name = ls_employee-name- name ] + 1 ).\n  ENDIF.\nENDLOOP.\n\nTYPES: BEGIN OF ty_result,\n         name TYPE string,\n       END OF ty_result.\nDATA: lt_result TYPE STANDARD TABLE OF ty_result.\n\nLOOP AT lt_employees INTO DATA(ls_employee).\n  READ COUNT 1 WITH KEY name = ls_employee-name INTO DATA(lt_result) TABLE @lt_result.\n  IF sy-subrc <> 0 AND ( line_exists( lt_count[ name = ls_employee-name ] ) = abap_true ).\n    APPEND VALUE #( name = ls_employee-name ) TO lt_result.\n  ENDIF.\nENDLOOP.\n\nSORT lt_result BY name.\nDELETE ADJACENT DUPLICATES FROM lt_result.\n\ncl_demo_output=>display(\n  cl_demo_output=>new( )\n  ->begin_of_line( 'Employees with duplicate names:' )\n  ->newline( )\n  ->set_intern( itab = VALUE #( lt_result[ ] ) )\n  ->end_of_line( )\n).\n"
    },
    {
        "instruction": "Write a function that prints a message saying 'Hello world!'",
        "input": "",
        "output": "def say_hello():\n\tprint(\"Hello world!\")",
        "abap": "REPORT zhello.\n\nCLASS lcl_hello DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      say_hello\n        IMPORTING\n          iv_message TYPE string\n        EXPORTING\n          ev_result  TYPE string.\nENDCLASS.\n\nCLASS lcl_hello IMPLEMENTATION.\n  METHOD say_hello.\n    WRITE: / 'Hello world!'.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_message TYPE string.\n  CALL METHOD cl_lcl_hello=>say_hello( iv_message = '' ).\n"
    },
    {
        "instruction": "Describe the purpose of the given function.",
        "input": "function avg(a,b){\n   return (a+b)/2;\n}",
        "output": "The purpose of this function is to calculate the average of two given numbers and return the result.",
        "abap": "FUNCTION z_average_two_numbers.\n  \" Declare input parameters\n  DATA: lv_num1 TYPE f,\n        lv_num2 TYPE f.\n\n  \" Declare output parameter\n  DATA: lv_result TYPE f.\n\n  \" Get input values from the input parameters\n  mv_num1 = lv_num1.\n  mv_num2 = lv_num2.\n\n  \" Calculate average\n  lv_result = (mv_num1 + mv_num2) / 2.\n\n  \" Return result\n  RETURN lv_result.\n\nENDFUNCTION.\n"
    },
    {
        "instruction": "Generate the Fibonacci sequence up to the 10th number.",
        "input": "",
        "output": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34",
        "abap": "CLASS lcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_next_number IMPORTING p_prev1 TYPE i p_prev2 TYPE i RETURNING value(r_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_fibonacci IMPLEMENTATION.\n  METHOD get_next_number.\n    r_result = p_prev1 + p_prev2.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_prev1 TYPE i VALUE 0,\n      lv_prev2 TYPE i VALUE 1,\n      lv_current TYPE i.\n\nDO 10 TIMES.\n  lv_current = lcl_fibonacci=>get_next_number( lv_prev1 = lv_prev2 lv_prev2 = lv_current ).\n  WRITE: lv_current.\nENDDO.\n"
    },
    {
        "instruction": "Edit the following HTML code to add an additional radio button with the label \"orange\".",
        "input": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana",
        "output": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana<br>\n<input type=\"radio\" name=\"fruit\" value=\"orange\"> Orange",
        "abap": "DATA: ls_radio TYPE bapiret2,\n      lt_radios  TYPE TABLE OF ty_radio.\n\nTYPES:\nBEGIN OF ty_radio.\n  value TYPE string,\nEND OF ty_radio.\n\nls_radio-value = 'Apple'.\nAPPEND ls_radio TO lt_radios.\nls_radio-value = 'Banana'.\nAPPEND ls_radio TO lt_radios.\nls_radio-value = 'Orange'.\nAPPEND ls_radio TO lt_radios.\n\nLOOP AT lt_radios INTO ls_radio.\n  WRITE: / ls_radio-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Convert the following binary number to a decimal number.",
        "input": "Binary Number: 10011",
        "output": "19 (10011 = 2^4 + 2^3 + 2^1 = 16 + 8 + 1 = 25)",
        "abap": "REPORT zexample.\n\nDATA: lv_binary TYPE string,\n      lv_decimal TYPE i.\n\nlv_binary = '10011'.\n\nDO 5 TIMES.\n  lv_decimal = lv_decimal + ( ls_value = '1' AND pos MOD 2 EQ 0 OR ls_value = '0' AND pos MOD 2 NE 0 ).\n  MOVE-CORRESPONDING ls_value TO lv_binary.\n  DELETE lv_binary POSITION pos + 1.\nENDDO.\n\nWRITE: / lv_decimal. \" Output: 27\n"
    },
    {
        "instruction": "Write code to find the sum of all numbers between 1 and 10.",
        "input": "",
        "output": "sum = 0\nfor i in range(1,11):\n    sum += i\nprint(sum)",
        "abap": "DATA: lv_sum TYPE i.\n\nDO 10 TIMES.\n  ADD sy-index TO lv_sum.\nENDDO.\n\nWRITE: / lv_sum.\n"
    },
    {
        "instruction": "Write code to find the longest substring of unique characters in a given string.",
        "input": "string = 'abcabcbb'",
        "output": "def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring",
        "abap": "REPORT zfind_longest_substring.\n\nCLASS lcl_find_longest_substring DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_longest_substring\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_longest_substring TYPE string.\n\nENDCLASS.\n\nCLASS lcl_find_longest_substring IMPLEMENTATION.\n  METHOD find_longest_substring.\n    DATA: lv_longest_substring TYPE string,\n          lv_current_substring TYPE string.\n\n    lv_longest_substring = ''.\n    lv_current_substring = ''.\n\n    DO strlen( iv_string ) TIMES.\n      DATA(lv_char) = substring( val = iv_string off = sy-tabix + 1 len = 1 ).\n\n      IF NOT lv_char IN lv_current_substring.\n        lv_current_substring += lv_char.\n        IF strlen( lv_current_substring ) > strlen( lv_longest_substring ).\n          lv_longest_substring = lv_current_substring.\n        ENDIF.\n      ELSE.\n        CLEAR: lv_current_substring,\n               lv_current_substring += lv_char.\n      ENDIF.\n\n    ENDDO.\n\n    ev_longest_substring = lv_longest_substring.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a script for finding the largest number in the given array.",
        "input": "const array = [4, 8, 2, 6, 9, 3]",
        "output": "let largestNum = array[0];\n\nfor (let num of array) {\n    if (num > largestNum) {\n        largestNum = num;\n    }\n}\n\nconsole.log(largestNum);",
        "abap": "DATA: ls_largest_num TYPE i.\n\nLOOP AT it_array INTO DATA(ls_num).\n  IF ls_num > ls_largest_num.\n    ls_largest_num = ls_num.\n  ENDIF.\nENDLOOP.\n\nWRITE: / ls_largest_num.\n"
    },
    {
        "instruction": "Write a code to compare two lists and find the common elements.",
        "input": "list1 = [3, 6, 9, 12]\nlist2 = [2, 4, 5, 6, 8, 9]",
        "output": "def find_common(list1, list2):\n    # initial list to store common elements\n    result = []\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is in list2\n        if num in list2:\n            # append the element\n            result.append(num)\n\n    return result\n    \nprint(find_common(list1, list2))",
        "abap": "TYPES: BEGIN OF ty_num,\n         value TYPE i,\n       END OF ty_num.\n\nDATA: lt_list1 TYPE STANDARD TABLE OF ty_num,\n      lt_list2 TYPE STANDARD TABLE OF ty_num,\n      lt_common TYPE STANDARD TABLE OF ty_num.\n\n\" Define list1 and list2\nlt_list1 = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ).\nlt_list2 = VALUE #( ( 3 ) ( 4 ) ( 5 ) ( 6 ) ).\n\n\" Find common elements in list1 and list2\nLOOP AT lt_list1 INTO DATA(ls_num1).\n  READ TABLE lt_list2 WITH KEY value = ls_num1-value INTO DATA(ls_num2).\n  IF sy-subrc = 0.\n    APPEND ls_num1 TO lt_common.\n  ENDIF.\nENDLOOP.\n\n\" Print common elements\nLOOP AT lt_common INTO ls_num1.\n  WRITE: / ls_num1-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a Django Model API to store status and published date for a blog post.",
        "input": "",
        "output": "from django.db import models\n\nclass BlogPost(models.Model):\n    # post title\n    title = models.CharField(max_length = 200)\n    # post status (draft / published)\n    status = models.CharField(max_length = 20)\n    # post publish date\n    published = models.DateTimeField(auto_now_add = True)",
        "abap": "REPORT zdjango_example.\n\nTYPES: BEGIN OF ty_blog_post,\n         title TYPE c LENGTH 200,\n         status TYPE c LENGTH 20,\n         published TYPE dats,\n       END OF ty_blog_post.\n\nDATA: ls_blog_post TYPE ty_blog_post.\n\nCLASS lcl_blog_post DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create\n        IMPORTING\n          iv_title TYPE string\n          iv_status TYPE string\n          iv_published TYPE dats\n        RETURNING\n          VALUE(ro_blog_post) TYPE REF TO lcl_blog_post.\nENDCLASS.\n\nCLASS lcl_blog_post IMPLEMENTATION.\n  METHOD create.\n    CREATE OBJECT ro_blog_post.\n    ro_blog_post->title = iv_title.\n    ro_blog_post->status = iv_status.\n    ro_blog_post->published = iv_published.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_blog_post TYPE REF TO lcl_blog_post.\n\n  CALL METHOD lo_blog_post->create\n    EXPORTING\n      iv_title   = 'My Blog Post'\n      iv_status  = 'Draft'\n      iv_published = sy-datum ).\n\n  WRITE: ls_blog_post-title. \" Outputs: My Blog Post\n  WRITE: ls_blog_post-status. \" Outputs: Draft\n"
    },
    {
        "instruction": "Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.",
        "input": "\"This is a very long sentence\"",
        "output": "def remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n\n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\n\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence",
        "abap": "REPORT zremove_longest_word.\n\nCLASS lcl_remove_longest_word DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_longest_word\n        IMPORTING\n          value(im_sentence) TYPE string\n        RETURNING\n          value(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_remove_longest_word IMPLEMENTATION.\n  METHOD remove_longest_word.\n    DATA: lv_words   TYPE TABLE OF string,\n          lv_longest TYPE string.\n\n    \" Split the sentence into words \n    SPLIT im_sentence AT space INTO TABLE lv_words.\n\n    \" Find the longest word \n    LOOP AT lv_words ASSIGNING FIELD-SYMBOL(<ls_word>).\n      IF strlen( <ls_word> ) > strlen( lv_longest ).\n        lv_longest = <ls_word>.\n      ENDIF.\n    ENDLOOP.\n\n    \" Remove all occurrences of the longest word\n    DELETE lv_words WHERE table_line = lv_longest.\n\n    \" Join the list back into a string and return it \n    rv_result = join( lv_words SEPARATOR space ).\n\n  ENDMETHOD.\n\nMETHOD join\n  IMPORTING\n    it_table TYPE TABLE OF string\n    iv_separator TYPE string\n  RETURNING\n    value(rv_string) TYPE string.\n  DATA: lv_temp TYPE string.\n\n  LOOP AT it_table INTO lv_temp.\n    rv_string = rv_string && iv_separator && lv_temp.\n  ENDLOOP.\n\n  DELETE rv_string FROM 1.\nENDMETHOD.\n"
    },
    {
        "instruction": "Explain the purpose of the following CSS selector.",
        "input": ".main a",
        "output": "The purpose of the CSS selector \".main a\" is to select all links (anchor tags, \"a\") that are descendants of the element with class name \"main\".",
        "abap": "REPORT ztest.\n\nTYPES:\n  BEGIN OF ty_links,\n    url TYPE string,\n    text TYPE string,\n  END OF ty_links.\nDATA: lt_links TYPE STANDARD TABLE OF ty_links.\n\nINITIALIZATION.\n  \" Define links as an internal table\n  PERFORM fill_links CHANGING lt_links.\n\nAT SELECTION-SCREEN OUTPUT.\n  DATA: lo_html TYPE REF TO cl_abap_intern_object_document,\n        lv_html TYPE string.\n  TRY.\n      \" Create a new instance of the HTML document class\n      lo_html = cl_abap_intern_object_document=>new( ).\n\n      \" Append links to the HTML document\n      LOOP AT lt_links INTO DATA(ls_link).\n        lo_html->append_element(\n          `<a href=\"${ls_link-url}\" target=\"_blank\">${ls_link-text}</a>` ).\n      ENDLOOP.\n\n      \" Render and output the HTML document\n      lv_html = lo_html->to_string( ).\n\n      \" Replace .main with a placeholder for demonstration purposes\n      lv_html = replace( val = lv_html sub = `<!--MAIN-->` with `<!--MAIN-->` ).\n\n      cl_http_client=>if_http_client~request(\n        i_version       = 1\n        i_system         =\n        i_method        = if_http_client=>methods_get\n        i_buffer_size   = abap_oneline_text=80\n        i_client         =\n        i_response_type =\n        i_read_timeout  = 3000\n        i_send_timeout  = 3000\n        i_data          =\n      ).\n      cl_http_client=>if_http_client~response( EXPORTING i_count = lines( lt_links ) CHANGING et_receieve = VALUE #( ( lv_html ) ) ).\n\n    CATCH cx_root INTO DATA(cx).\n      \" Handle any potential errors\n      WRITE: / 'Error:', cx->if_description~shorttext.\n\n  ENDTRY.\nEND-OF-PAGE.\n\nFORM fill_links CHANGING ct_links TYPE STANDARD TABLE OF ty_links.\n  \" Define links to be appended to the HTML document\n  APPEND VALUE #( url = 'https://www.example.com' text = 'Example Link' ) TO ct_links.\n  APPEND VALUE #( url = 'https://www.google.com' text = 'Google Link' ) TO ct_links.\n\nENDFORM.\n\n\" Equivalent CSS selector: .main a\n\nCLASS lcl_html_document DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_http_client.\n    METHODS:\n      new\n        IMPORTING\n          i_version TYPE i\n        RETURNING\n          VALUE(rs) TYPE REF TO cl_abap_intern_object_document,\n      append_element\n        IMPORTING\n          i_value TYPE string\n        CHANGING\n          cs_string TYPE string,\n      to_string\n        CHANGING\n          cs_output TYPE string.\nENDCLASS.\n\nCLASS lcl_html_document IMPLEMENTATION.\n  METHOD new.\n    DATA: lo_instance TYPE REF TO cl_abap_intern_object_document.\n\n    CREATE OBJECT rs.\n  ENDMETHOD.\n\n  METHOD append_element.\n    cs_string = |{ cs_string }<a href=\"{ i_value }\">{ i_value }</a>|.\n  ENDMETHOD.\n\n  METHOD to_string.\n    cs_output = cs_string.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create an HTML form with three input fields: firstName, lastName and age.",
        "input": "",
        "output": "<form> \n    First Name:<br> \n    <input type=\"text\" name=\"firstName\"><br> \n    Last Name:<br> \n    <input type=\"text\" name=\"lastName\"><br> \n    Age:<br> \n    <input type=\"number\" name=\"age\"><br><br> \n    <input type=\"submit\" value=\"Submit\"> \n</form>",
        "abap": "DATA: lv_first_name TYPE string,\n      lv_last_name  TYPE string,\n      lv_age        TYPE i.\n\nFORM start-of-selection.\n  \" Create a new window to display the form\n  SET PARAMETER ID 'WINDOW' VALUE 'X'.\n\n  \" Display the form\n  WRITE:/ 'First Name:' .\n  WRITE: ( ) .\n  READ LINE INTO DATA(lv_line).\n  SPLIT lv_line AT ':' INTO DATA(lv_first_name) DATA(lv_remainder).\n  WRITE:/ lv_first_name.\n\n  WRITE:/ ''.\n  WRITE:/ 'Last Name:' .\n  READ LINE INTO lv_line.\n  SPLIT lv_line AT ':' INTO lv_last_name lv_remainder.\n  WRITE:/ lv_last_name.\n\n  WRITE:/ ''.\n  WRITE:/ 'Age:'.\n  READ LINE INTO lv_line.\n  SPLIT lv_line AT ':' INTO DATA(lv_age) lv_remainder.\n  WRITE:/ lv_age.\n\n  \" Validate the input\n  IF sy-subrc <> 0 OR lv_first_name IS INITIAL OR lv_last_name IS INITIAL OR lv_age IS INITIAL.\n    MESSAGE 'Please enter a first name, last name and age.' TYPE 'E'.\n  ELSEIF lv_age < 0.\n    MESSAGE 'Age must be greater than or equal to 0' TYPE 'E'.\n  ENDIF.\n\n  \" Save the input\n  DATA: ls_input LIKE LINE OF ty_input.\n  ls_input-first_name = lv_first_name.\n  ls_input-last_name = lv_last_name.\n  ls_input-age = lv_age.\n  APPEND ls_input TO DATA(gt_input).\n\n  \" Do something with the saved input (e.g. display it)\n  WRITE:/ 'You entered:'.\n  LOOP AT gt_input INTO DATA(ls_input).\n    WRITE:/ ls_input-first_name ls_input-last_name ls_input-age.\n  ENDLOOP.\n\nENDFORM.\n\nTYPES: BEGIN OF ty_input,\n          first_name TYPE string,\n          last_name TYPE string,\n          age TYPE i,\n        END OF ty_input.\nDATA: gt_input TYPE STANDARD TABLE OF ty_input.\n"
    },
    {
        "instruction": "Write a function that takes a string as an argument, reverses the characters, and returns the reversed string.",
        "input": "",
        "output": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string",
        "abap": "CLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          VALUE(iv_string) TYPE string\n        EXPORTING\n          VALUE(ev_reversed_string) TYPE string.\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_index TYPE i,\n          lv_length TYPE i.\n\n    lv_length = xstrlen( iv_string ).\n\n    DO.\n      lv_index = lv_length - sy-cline.\n      IF lv_index < 0.\n        EXIT.\n      ENDIF.\n\n      ev_reversed_string = ev_reversed_string && iv_string(lv_index).\n      lv_length = lv_length - 1.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of a number (a non-negative integer).",
        "input": "",
        "output": "def factorial(num):\n    \"\"\"\n    Calculates factorial of a given number.\n    \"\"\"\n    # Base case\n    if num == 0:\n        return 1\n    # Recursion\n    else:\n        return num * factorial(num-1)",
        "abap": "CLASS lcl_factorial DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_factorial IMPORTING VALUE(iv_num) TYPE i\n                          EXPORTING VALUE(ev_factorial) TYPE i.\nENDCLASS.\n\nCLASS lcl_factorial IMPLEMENTATION.\n  METHOD calculate_factorial.\n    DATA: lv_result TYPE i.\n\n    IF iv_num = 0.\n      ev_factorial = 1.\n    ELSE.\n      lv_result := iv_num * cl_abap_func_tools=>calculate_function_call(\n                            EXPORTING\n                              function_name        = 'lcl_factorial~calculate_factorial'\n                              num_args              = 2\n                              import_params         = VALUE #( ( iv_num - 1 ) )\n                              export_params         = VALUE #(\n                                  ( ev_factorial       = '' )\n                                )\n                          ).\n      ev_factorial = lv_result.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a code to check whether the input string is a palindrome or not.",
        "input": "a man a plan a canal panama",
        "output": "\"\"\"\nWrite a code to check whether the input string is a palindrome or not\n\"\"\"\n\ndef check_palindrome(input_string):\n    rev_str = input_string[::-1]\n \n    # Checking if both string are equal or not\n    if rev_str == input_string:\n        return True\n    return False\n  \n# main function\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")",
        "abap": "REPORT zpalindrome_check.\n\nCLASS lcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_palindrome IMPORTING\n        input_string TYPE string\n      RETURNING\n        value(result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_palindrome IMPLEMENTATION.\n  METHOD check_palindrome.\n    DATA: rev_str TYPE string.\n\n    rev_str = input_string.\n    REV_STR = reverse( val = rev_str ).\n\n    result = rev_str CA input_string.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage\nDATA: str TYPE string VALUE 'a man a plan a canal panama'.\n\nIF lcl_palindrome=>check_palindrome(\n      input_string = str ) IS abap_true.\n  WRITE: / 'String is Palindrome'.\nELSE.\n  WRITE: / 'String is not Palindrome'.\nENDIF.\n"
    },
    {
        "instruction": "Generate a set of five English words starting with the letter \"P\".",
        "input": "",
        "output": "panther, plane, purple, parking, planet",
        "abap": "REPORT ztest.\n\nDATA: lv_panther TYPE string VALUE 'Panther',\n      lv_plane  TYPE string VALUE 'Plane',\n      lv_purple TYPE string VALUE 'Purple',\n      lv_parking TYPE string VALUE 'Parking',\n      lv_planet TYPE string VALUE 'Planet'.\n\nLOOP AT sy-tcfield INTO DATA(lv_tcfield).\n  WRITE: lv_panther, lv_plane, lv_purple, lv_parking, lv_planet.\nENDLOOP.\n"
    },
    {
        "instruction": "Classify the following sentence as a question or a statement.",
        "input": "Have you ever tried eating a brussel sprout?",
        "output": "Question.",
        "abap": "What would you like me to translate from another programming language into ABAP (Advanced Business Application Programming), the proprietary programming language of SAP? Go ahead and provide the code or a description of what you'd like me to translate."
    },
    {
        "instruction": "Rewrite the following code into a generator.",
        "input": "def some_function(nums):\n  output = []\n  for x in nums:\n    y = x ** 2\n    output.append(y)\n  return output",
        "output": "def some_function(nums):\n  for x in nums:\n    yield x ** 2",
        "abap": "REPORT zsome_function.\n\nTYPES: ty_int TYPE i,\n       ty_nums TYPE STANDARD TABLE OF ty_int.\n\nDATA: lt_nums TYPE ty_nums.\n\nPARAMETERS: p_nums LIKE LINE OF lt_nums LOWER DENARY LENGTH .\n\nSTART-OF-SELECTION.\n  DO.\n    READ TABLE p_nums INTO DATA(lv_num).\n    IF sy-subrc <> 0.\n      EXIT.\n    ENDIF.\n    WRITE: lv_num ** 2.\n  ENDDO.\n\nCLASS lcl_some_function DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      some_function\n        IMPORTING\n          ip_nums TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(ro_iterator) TYPE REF TO cl_abap_iterated_table .\nENDCLASS.\n\nCLASS lcl_some_function IMPLEMENTATION.\n  METHOD some_function.\n    DATA: lo_iterator TYPE REF TO cl_abap_iterated_table,\n          ls_result   TYPE ty_result.\n\n    CREATE OBJECT lo_iterator TYPE cl_abap_iterated_table\n      EXPORTING\n        it_data = ip_nums\n        ireturn_type = i\n        ireturn_size = 1\n        imethod_name = 'some_function'.\n\n    RETURN lo_iterator.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "How much would you substract 5 to 101?",
        "input": "",
        "output": "96",
        "abap": "DATA: lv_example TYPE i VALUE '96'.\n"
    },
    {
        "instruction": "Create a loop in JavaScript that prints the numbers from 1 to 10 in the console.",
        "input": "",
        "output": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}",
        "abap": "DO.\n  \" Counter loop from 1 to 10\n  WHILE sy-index <= 10.\n    WRITE: / sy-index.\n    MODIFY sy-index BY 1.\nENDDO.\n"
    },
    {
        "instruction": "FOr a given list, create a program that prints out the standard deviation of the elements in the list.",
        "input": "list = [1, 4, 9, 16]",
        "output": "def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd",
        "abap": "FORM std_dev USING p_list TYPE STANDARD TABLE OF f.\n\n  DATA: numerator TYPE p DECIMALS 16,\n        mean     TYPE p DECIMALS 16,\n        denominator TYPE i,\n        standard_deviation TYPE p DECIMALS 16.\n\n  \" Calculate the mean\n  mean = REDUCE < p_list WITH CONDITION val1 = val2\n                       INTO result\n                     FROM to_table = p_list ).\n\n  \" Initialize numerator and denominator for calculating standard deviation\n  numerator = 0.\n  denominator = lines( p_list ) - 1.\n\n  \" Calculate the sum of squared differences from mean\n  DO.\n    DATA: value TYPE f,\n          difference TYPE f.\n    READ TABLE p_list INDEX sy-index INTO value.\n    IF sy-subrc <> 0.\n      EXIT.\n    ENDIF.\n    difference = value - mean.\n    numerator = numerator + difference * difference.\n    ENDDO.\n\n  \" Calculate standard deviation\n  IF denominator > 0.\n    standard_deviation = sqrt( numerator / denominator ).\n  ELSE.\n    RAISE EXCEPTION type cx_sy_itab_init1\n      message 'Cannot calculate standard deviation, denominator is not positive'.\n  ENDIF.\n\n  \" Return the result\n  TRANSPORT-COMMAND STANDARD.\n  sy-dbcnt = 0.\n  WRITE : standard_deviation.\n\nENDFORM.\n"
    },
    {
        "instruction": "Edit the given code to make it more readable",
        "input": "while(i <= num) {\n  output += i;\n  i++\n}",
        "output": "let i = 0;\nwhile(i <= num) {\n  output += i;\n  i++;\n}",
        "abap": "DATA: lv_i TYPE i VALUE 0,\n      lv_num TYPE i,\n      lv_output TYPE string.\n\nlv_num = <your_value>. \" Replace with actual value of 'num'\n\nDO.\n  WHILE lv_i <= lv_num.\n    TRANSFER lv_i TO lv_output + length( lv_output ).\n    ADD 1 TO lv_i.\n  ENDDO.\n"
    },
    {
        "instruction": "Write a code to implement Selection Sort in Java",
        "input": "",
        "output": "public class SelectionSort {\n    public static void sort(int[] arr) {\n        int n = arr.length;\n \n        // One by one move boundary of unsorted subarray\n        for (int i = 0; i < n-1; i++)\n        {\n            // Find the minimum element in unsorted array\n            int min_idx = i;\n            for (int j = i+1; j < n; j++)\n                if (arr[j] < arr[min_idx])\n                    min_idx = j;\n \n            // Swap the found minimum element with the first\n            // element\n            int temp = arr[min_idx];\n            arr[min_idx] = arr[i];\n            arr[i] = temp;\n        }\n    }\n}",
        "abap": "CLASS lcl_selection_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort\n        IMPORTING\n          VALUE(iv_arr) TYPE STANDARD TABLE OF i\n        RAISING\n          cx_static_check.\nENDCLASS.\n\nCLASS lcl_selection_sort IMPLEMENTATION.\n  METHOD sort.\n    DATA: lv_n TYPE i,\n          ls_min_idx TYPE i,\n          lv_temp  TYPE i.\n\n    lv_n = lines( iv_arr ).\n\n    DO.\n      lv_n = lv_n - 1.\n      \" Find the minimum element in unsorted array\n      READ TABLE iv_arr INTO ls_min_idx FROM sy-index - 1 WITH KEY val = iv_arr[ sy-index - 1 ].\n      IF sy-subrc <> 0.\n        EXIT.\n      ENDIF.\n\n      \" Swap the found minimum element with the first\n      \" element\n      lv_temp = iv_arr[ sy-index - 1 ].\n      iv_arr[ sy-index - 1 ] = iv_arr[ ls_min_idx ].\n      iv_arr[ ls_min_idx ] = lv_temp.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a PHP code to check if an array contains a given item.",
        "input": "$input_array = array(1,2,3,4,5);\n$item_to_check = 3;",
        "output": "<?php\n$input_array = array(1,2,3,4,5);\n$item_to_check = 3;\n\nif(in_array($item_to_check, $input_array)) {\n  echo \"Array contains the given item.\";\n} else {\n  echo \"Array doesn't contain the given item.\";\n}\n?>",
        "abap": "DATA: lv_input TYPE STANDARD TABLE OF i.\nlv_input = value #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\nlv_item_to_check TYPE i VALUE '3'.\n\nIF line_exists( table = lv_input transporting no data = valASSIGN( item = lv_item_to_check ) ).\n  WRITE: / 'Array contains the given item.'.\nELSE.\n  WRITE: / 'Array doesn't contain the given item.'.\nENDIF.\n"
    },
    {
        "instruction": "Create a program to generate a histogram using data from a set of numbers.",
        "input": "values = [3, 4, 2, 5, 8, 1, 2, 6]",
        "output": "import matplotlib.pyplot as plt\n\nvalues = [3, 4, 2, 5, 8, 1, 2, 6]\n\nplt.hist(values, bins= 10, edgecolor='black', color='b')\n\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\nplt.title('Histogram')\n\nplt.show()",
        "abap": "DATA: lv_values TYPE string.\n\nlv_values = '3;4;2;5;8;1;2;6'.\n\nDATA: lt_values TYPE TABLE OF f.\n\nDO.\n  SPLIT lv_values AT ';' INTO TABLE lt_values.\n  EXIT.\nENDDO.\n\nTYPES: BEGIN OF ty_hist,\n         value TYPE i,\n         freq  TYPE i,\n       END OF ty_hist.\n\nDATA: lt_freq TYPE STANDARD TABLE OF ty_hist.\n\nLOOP AT lt_values ASSIGNING FIELD-SYMBOL(<ls_value>).\n  DATA(lv_count) = lines( vali( <ls_value> ) ).\n  APPEND VALUE #( value = <ls_value> freq = lv_count ) TO lt_freq.\nENDLOOP.\n\nDATA: lo_output TYPE REF TO cl_salv_output_list_iterator.\n\ncl_salv_table=>factory(\n  IMPORTING\n    rSalvTable  = lo_output\n  CHANGING\n    t_input_type = lt_freq ).\n\nlo_output->set_top_of_page( VALUE #( ( fieldname = 'VALUE' ) ( fieldname = 'FREQ' ) ) ).\n\nlo_output->set_column_properties(\n  EXPORTING\n    column_name          = 'VALUE'\n    coltext              = 'Values'\n    output_length        = 20\n    int_type             = 'I'\n    output_precRadix     = 2\n    value_slen           = 20\n    date_format          =\n    num Decimals         = 0 ).\n\nlo_output->set_column_properties(\n  EXPORTING\n    column_name          = 'FREQ'\n    coltext              = 'Frequency'\n    output_length        = 10\n    int_type             = 'I'\n    output_precRadix     = 2\n    value_slen           = 10\n    date_format          =\n    num Decimals         = 0 ).\n\nDATA: lo_graph TYPE REF TO cl_gantt_chart.\n\nlo_graph->create(\n  EXPORTING\n    i_height                    = 400\n    i_width                     = 800\n    i_x_step                    = 1\n    i_y_step                    = 50 ).\n\ncl_salv_table=>factory(\n  IMPORTING\n    rSalvTable  = lo_graph ).\n\nDO.\n  LOOP AT lt_freq INTO DATA(ls_freq).\n    ADD ls_freq-freq TO lo_graph->data( ls_freq-value ).\n  ENDDO.\n\n  lo_graph->set_top_title( 'Histogram' ).\n  lo_graph->show( ).\nENDDO.\n"
    },
    {
        "instruction": "Write a function that takes in a string and returns a list of all the words that have more than 5 characters",
        "input": "",
        "output": "def long_words(string):\n    words = string.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > 5:\n            long_words_list.append(word)\n    return long_words_list",
        "abap": "REPORT zlong_words.\n\nCLASS lcl_long_words DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_long_words IMPORTING\n        iv_string TYPE string\n        RETURNING\n          rv_result  TYPE ti_reftable\n      .\nENDCLASS.\n\nCLASS lcl_long_words IMPLEMENTATION.\n  METHOD get_long_words.\n    TYPES: BEGIN OF ty_word,\n             word TYPE string,\n           END OF ty_word.\n\n    DATA: lt_words TYPE STANDARD TABLE OF ty_word.\n\n    SPLIT iv_string AT space INTO TABLE DATA(lt_split) ASSIGNING FIELD-SYMBOL(<ls_split>).\n    LOOP AT lt_split INTO <ls_split>.\n      IF strlen( <ls_split> ) > 5.\n        INSERT VALUE #( word = <ls_split> ) INTO TABLE lt_words.\n      ENDIF.\n    ENDLOOP.\n\n    MOVE-CORRESPONDING lt_words TO rv_result.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_string TYPE string.\nlv_string = 'The quick brown fox jumped over the lazy dog'.\n\nCALL METHOD cl_abap_compiler=>get_long_words(\n  EXPORTING\n    iv_string   = lv_string\n  IMPORTING\n    ev_result   = DATA(lt_result)\n).\n\nLOOP AT lt_result INTO DATA(ls_word).\n  WRITE ls_word-word.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a program to generate all possible pairs of a given list of numbers",
        "input": "[1, 2, 3]",
        "output": "\"\"\"\nCreate a program to generate all possible pairs of a given list of numbers\n\"\"\"\n\ndef generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]))\n    return pairs\n\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))",
        "abap": "REPORT zgenerate_pairs.\n\nCLASS lcl_generate_pairs DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_pairs\n        IMPORTING\n          iv_numbers TYPE STANDARD TABLE OF i\n        EXPORTING\n          et_pairs   TYPE STANDARD TABLE OF ty_pair.\n\n  TYPES: BEGIN OF ty_pair,\n           pair1 TYPE i,\n           pair2 TYPE i,\n         END OF ty_pair.\n\nCLASS lcl_generate_pairs IMPLEMENTATION.\n  METHOD generate_pairs.\n    DATA: lt_pairs TYPE STANDARD TABLE OF ty_pair,\n          ls_pair  TYPE ty_pair.\n\n    DO.\n      IF sy-index <= lines( iv_numbers ).\n        READ TABLE iv_numbers INDEX sy-index INTO ls_pair-pair1.\n        READ TABLE iv_numbers WITH KEY pair1 <> ls_pair-pair1\n                                      INDEX sy-tabix INTO ls_pair-pair2.\n        IF sy-subrc = 0.\n          APPEND ls_pair TO lt_pairs.\n        ENDIF.\n\n        MODIFY iv_numbers FRIST = ls_pair-pair1 SECOND = ls_pair-pair2.\n\n        CLEAR: ls_pair, sy-index.\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    et_pairs = lt_pairs.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_numbers TYPE STANDARD TABLE OF i,\n        lt_result  TYPE STANDARD TABLE OF ty_pair.\n\n  \" Define the list of numbers\n  INSERT 1         INTO TABLE lv_numbers.\n  INSERT 2         INTO TABLE lv_numbers.\n  INSERT 3         INTO TABLE lv_numbers.\n\n  \" Generate pairs\n  lcl_generate_pairs=>generate_pairs( EXPORTING iv_numbers = lv_numbers\n                                     IMPORTING et_pairs   = lt_result ).\n\n  \" Print the result\n  LOOP AT lt_result INTO DATA(ls_pair).\n    WRITE: / ls_pair-pair1, ls_pair-pair2.\n  ENDLOOP.\n"
    },
    {
        "instruction": "What type of object is \"None\" in Python?",
        "input": "",
        "output": "None is a special constant in Python and is of type NoneType.",
        "abap": "my_var = None\n"
    },
    {
        "instruction": "Create a program in JavaScript to check if two strings are anagrams.",
        "input": "",
        "output": "// Function to check if two strings are anagrams\nconst isAnagram = (string1, string2) => {\n  // Check if string lengths are the same\n  let string1Arr = string1.split('').sort();\n  let string2Arr = string2.split('').sort();\n  if (string1Arr.length !== string2Arr.length) return false;\n  \n  // Compare each character in the strings\n  for (let i = 0; i < string1Arr.length; i++) {\n    if (string1Arr[i] !== string2Arr[i]) return false;\n  }\n  \n  // Return true if all characters match\n  return true;\n}",
        "abap": "CLASS lcl_anagram DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_anagram IMPORTING string1 TYPE string string2 TYPE string\n                  RETURNING value(result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_anagram IMPLEMENTATION.\n  METHOD is_anagram.\n    DATA: lv_string1 TYPE string, lv_string2 TYPE string,\n          lt_string1 TYPE STANDARD TABLE OF char,\n          lt_string2 TYPE STANDARD TABLE OF char.\n\n    \" Check if string lengths are the same\n    IF strlen( string1 ) <> strlen( string2 ).\n      result = abap_false.\n      RETURN.\n    ENDIF.\n\n    \" Split strings into tables\n    DO strlen( string1 ) TIMES.\n      APPEND string1+sy-index TO lt_string1.\n    ENDDO.\n    SORT lt_string1.\n\n    DO strlen( string2 ) TIMES.\n      APPEND string2+sy-index TO lt_string2.\n    ENDDO.\n    SORT lt_string2.\n\n    \" Compare each character in the strings\n    LOOP AT lt_string1 INTO DATA(ls_char) WHILE sy-scope <> 'LOOP'.\n      IF line_exists( lt_string2[ table_line = ls_char ] ) <> abap_true.\n        result = abap_false.\n        EXIT.\n      ENDIF.\n    ENDLOOP.\n\n    \" Return true if all characters match\n    result = abap_true.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a function to find the index of the first occurrence of a given number in a list",
        "input": "",
        "output": "def find_index(lst, num):\n  for index, val in enumerate(lst):\n    if val == num:\n      return index",
        "abap": "CLASS lcl_index_finder DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_index\n        IMPORTING\n          iv_list TYPE string_table   \" input list of values\n          iv_num  TYPE i               \" number to find in the list\n        EXPORTING\n          ev_index TYPE i               \" index where the number is found (or -1 if not found)\n        RAISING\n          cx_no_entry.\n\nCLASS-METHODS find_index\n  IMPORTING\n    !iv_list     TYPE TABLE OF string  \" input list of values\n    !iv_num      TYPE int4             \" number to find in the list\n  EXPORTING\n    !ev_index    TYPE i                \" index where the number is found (or -1 if not found)\n  RAISING\n    cx_no_entry.\n\nMETHODS find_index.\n  DATA: lv_index TYPE i,\n        lv_val   TYPE string.\n\n  LOOP AT iv_list INTO lv_val.\n    IF lv_val = iv_num.\n      ev_index = sy-tabix.\n      RETURN.\n    ENDIF.\n  ENDLOOP.\n  RAISE EXCEPTION TYPE cx_no_entry.\nENDMETHOD.\n"
    },
    {
        "instruction": "Design a class Car with a constructor to initialize the variables _type, _year and _color",
        "input": "",
        "output": "class Car:\n    \n    def __init__(self, type, year, color):\n        self._type = type\n        self._year = year\n        self._color = color",
        "abap": "CLASS lcl_car DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ooadapter.\n    METHODS:\n      constructor IMPORTING value(type) TYPE string\n                       value(year) TYPE i\n                       value(color) TYPE string,\n      get_type  REDEFINABLE\n                RETURNING VALUE(rv_type) TYPE string,\n      get_year  REDEFINABLE\n                RETURNING VALUE(rv_year) TYPE i,\n      get_color REDEFINABLE\n                RETURNING VALUE(rv_color) TYPE string.\nENDCLASS.\n\nCLASS lcl_car IMPLEMENTATION.\n  METHOD constructor.\n    me->type = type.\n    me->year  = year.\n    me->color = color.\n  ENDMETHOD.\n\n  METHOD get_type.\n    rv_type = type.\n  ENDMETHOD.\n\n  METHOD get_year.\n    rv_year = year.\n  ENDMETHOD.\n\n  METHOD get_color.\n    rv_color = color.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Develop a machine learning algorithm to predict stock prices.",
        "input": "Historical stock prices",
        "output": "The algorithm should include parts like data preprocessing, feature extraction, selecting the right model, hyperparameter optimization and evaluation.",
        "abap": "REPORT zmlp.\n\nDATA: ls_data TYPE STANDARD TABLE OF ty_data,\n      ls_feature TYPE STANDARD TABLE OF ty_feature,\n      lv_model    TYPE string,\n      lt_hyperparamters TYPE standard table of ty_hyperparameters.\n\nTYPES:\n  BEGIN OF TYPE ty_data.\n    column1 TYPE string,\n    column2 TYPE string,\n  END OF TYPE ty_data,\n\n  BEGIN OF TYPE ty_feature.\n    name TYPE string,\n    vector TYPE STANDARD TABLE OF float,\n  END OF TYPE ty_feature,\n\n  BEGIN OF TYPE ty_hyperparameters.\n    name      TYPE string,\n    value     TYPE string,\n  END OF TYPE ty_hyperparameters.\n\nDATA: lr_model TYPE REF TO if_observable_machine_learning,\n      ls_xtrain TYPE ty_data,\n      ls_ytrain TYPE ty_data,\n      lt_xtest TYPE STANDARD TABLE OF ty_data,\n      lt_ytest TYPE STANDARD TABLE OF ty_data.\n\n\n\" Data Preprocessing\nCLASS zmlp DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      data_preprocessing IMPORTING VALUE(is_data) TYPE any TYPE STANDARD TABLE\n                          EXPORTING ES_data TYPE STANDARD TABLE.\nENDCLASS.\n\nCLASS zmlp IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD data_preprocessing.\n    \" drop null or duplicate values\n    LOOP AT is_data INTO DATA(ls_row).\n      IF ls_row IS NOT INITIAL.\n        APPEND ls_row TO ES_data.\n      ENDIF.\n    ENDLOOP.\n\n    \" replace missing values with mean/median...\n    LOOP AT ES_data INTO ls_row.\n      CASE ls_row-column1.\n        WHEN space.\n          ls_row-column1 = '0'.\n        WHEN OTHERS.\n          \" leave column unchanged\n      ENDCASE.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n\n\n\" Feature Extraction\nCLASS zmlp DEFINITION INHERITING FROM cl_alv_table_modification.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      feature_extraction IMPORTING VALUE(is_data) TYPE STANDARD TABLE OF ty_data\n                          EXPORTING ES_features TYPE STANDARD TABLE.\nENDCLASS.\n\nCLASS zmlp IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD feature_extraction.\n    \" convert data into a suitable format (e.g. matrix)\n    DATA: lt_matrix TYPE STANDARD TABLE OF ty_feature,\n          ls_feature TYPE ty_feature.\n\n    LOOP AT is_data INTO DATA(ls_row).\n      ls_feature-name = 'my_feature'.\n      REFERENCE(LOOP AT is_data INTO ls_row) ls_row.\n      DO 5 TIMES.\n        TRANSFER ls_row-column1 TO ls_feature-vector.\n      ENDDO.\n      APPEND ls_feature TO lt_matrix.\n    ENDLOOP.\n\n    \" perform feature extraction (e.g. PCA)\n    PERFORM pca USING lt_matrix CHANGING ES_features.\n  ENDMETHOD.\n\n  FORM pca\n    USING\n        lt_data TYPE STANDARD TABLE OF ty_feature\n        IMPORTING\n          es_output TYPE STANDARD TABLE,\n  CHANGING\n          cs_output TYPE STANDARD TABLE.\n    DATA: ls_pca_result TYPE ty_feature,\n          lv_vector1 TYPE float,\n          lv_vector2 TYPE float.\n\n    \" compute and apply PCA\n    PERFORM pca_calculation USING lt_data CHANGING cs_output.\n\n  ENDFORM.\n\n\nENDCLASS.\n\n\n\" Model Selection\nCLASS zmlp DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      model_selection IMPORTING VALUE(is_features) TYPE STANDARD TABLE\n                       EXPORTING ES_model TYPE string.\nENDCLASS.\n\nCLASS zmlp IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD model_selection.\n    \" select a suitable model (e.g. k-NN, Random Forest)\n    CASE is_features[ 1 ]-name.\n      WHEN 'feature1'.\n        lv_model = 'knn'.\n      WHEN OTHERS.\n        lv_model = 'rf'.\n    ENDCASE.\n    es_model = lv_model.\n  ENDMETHOD.\nENDCLASS.\n\n\n\" Hyperparameter Optimization\nCLASS zmlp DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      hyperparameter_optimization IMPORTING VALUE(is_features) TYPE STANDARD TABLE\n                                   EXPORTING ES_hyperparameters TYPE standard table.\nENDCLASS.\n\nCLASS zmlp IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD hyperparameter_optimization.\n    \" perform grid search or random search to find best hyperparameters\n    DO 5 TIMES.\n      lt_hyperparamters = VALUE #( ( name = 'learning_rate' value = '0.1' )\n                                 ( name = 'max_depth'     value = '5' ) ).\n\n      PERFORM train_model USING is_features CHANGING cs_hyperparameters.\n\n    ENDDO.\n  ENDMETHOD.\n\n\n\" Model Training\nCLASS zmlp DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      train_model IMPORTING VALUE(is_features) TYPE STANDARD TABLE\n                  EXPORTING ES_hyperparameters TYPE standard table.\nENDCLASS.\n\nCLASS zmlp IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD train_model.\n    \" train model with selected hyperparameters\n    PERFORM fit USING is_features CHANGING cs_hyperparameters.\n\n  ENDMETHOD.\n\n\n\" Model Evaluation\nCLASS zmlp DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      evaluate_model IMPORTING VALUE(is_features) TYPE STANDARD TABLE\n                       EXPORTING ES_result TYPE string.\nENDCLASS.\n\nCLASS zmlp IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD evaluate_model.\n    \" perform cross-validation to evaluate model performance\n    PERFORM kfold_crossvalidation USING is_features CHANGING cs_result.\n  ENDMETHOD.\n\n\n\" Auxiliary methods\nCLASS lfm DEFINITION INHERITING FROM cl_alv_table_modification.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      pca_calculation IMPORTING VALUE(is_data) TYPE STANDARD TABLE OF ty_feature\n                       EXPORTING ES_output TYPE standard table.\n\nENDCLASS.\n\n\nCLASS lfm IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\n\n  METHOD pca_calculation.\n    \" compute and apply PCA\n    DO 5 TIMES.\n      ls_pca_result-name = 'pca_result'.\n      REFERENCE(LOOP AT is_data INTO ls_data) ls_data.\n      DATA: lv_vector TYPE float,\n            ls_data2 TYPE ty_feature,\n            ls_pca_result TYPE ty_feature.\n\n      TRANSFER ls_data-column1 TO ls_data2-vector.\n      TRANSLATE ls_data2-vector USING 'x'.\n      DO 5 TIMES.\n        lv_vector = ls_data2-vector + '-1'.\n        APPEND ls_data2-vector TO ES_output.\n      ENDDO.\n\n    ENDDO.\n  ENDMETHOD.\n\n\n\" end auxiliary methods\n"
    },
    {
        "instruction": "Write a JavaScript code to print the first 10 terms of the Fibonacci series.",
        "input": "",
        "output": "let a = 0, b = 1, c, limit = 10;\n\nconsole.log(\"Fibonacci Series of \"+limit+\" numbers:\");\n\nfor(var i=0; i < limit; i++){\n    if(i<=1){\n        c=i;\n    }\n    else{\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    \n    console.log(c);\n}",
        "abap": "DATA: lv_a TYPE i VALUE 0,\n       lv_b TYPE i VALUE 1,\n       lv_c TYPE i,\n       lv_limit TYPE i VALUE 10.\n\nWRITE: 'Fibonacci Series of ', lv_limit, ' numbers:'.\n\nDO lv_limit TIMES.\n  IF sy-index <= 1.\n    lv_c = sy-index.\n  ELSE.\n    lv_c = lv_a + lv_b.\n    lv_a = lv_b.\n    lv_b = lv_c.\n  ENDIF.\n\n  WRITE: / lv_c.\nENDDO.\n"
    },
    {
        "instruction": "Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100.",
        "input": "",
        "output": "import random\n\nd = dict()\n\nkeys = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n\nfor key in keys:\n    d[key] =  random.randint(1,100)\n\nprint(d)",
        "abap": "DATA: lt_random_numbers TYPE STANDARD TABLE OF i,\n      ls_random_number LIKE LINE OF lt_random_numbers.\n\nTYPES: BEGIN OF ty_key,\n          key   TYPE string,\n        END OF ty_key.\n\nTYPES: BEGIN OF ty_value,\n          value TYPE i,\n        END OF ty_value.\n\nDATA: lr_dict TYPE STANDARD TABLE OF ty_key,\n      lv_random_value TYPE i.\nDATA: ls_key TYPE ty_key.\n\nDO 10 TIMES.\n  \" Generate a random number\n  ls_random_number-value = val2( p1 = 100 p2 = 1 ).\n  APPEND ls_random_number TO lt_random_numbers.\nENDDO.\n\nLOOP AT lt_random_numbers INTO ls_random_number.\n  \" Create a key and value pair\n  ls_key-key = sy-cucol.\n  CLEAR sy-cucol.\n  DO 10 TIMES.\n    sy-cucol = sy-cucol + 1.\n  ENDDO.\n  CONDENSE sy-cucol NO-GAPS.\n  ls_key-key = |{ ls_key-key }|.\n  APPEND ls_key TO lr_dict.\nENDDO.\n\n\" Print the dictionary\nLOOP AT lr_dict INTO ls_key.\n  WRITE: (20) ls_key-key, ls_random_number-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Define a function to check if a number is odd.",
        "input": "",
        "output": "def is_odd(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False",
        "abap": "FORM is_odd USING p_num TYPE i.\n  IF p_num MOD 2 <> 0.\n    WRITE: 'TRUE'.\n  ELSE.\n    WRITE: 'FALSE'.\n  ENDIF.\nENDFORM.\n"
    },
    {
        "instruction": "Design a program to find the nth Fibonacci number.",
        "input": "n: 10",
        "output": "def nth_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n1, n2 = 1, 1\n        for i in range(2, n):\n            n1, n2 = n2, n1 + n2\n        return n2",
        "abap": "CLASS zcl_nth_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      nth_fibonacci IMPORTING\n                        iv_n TYPE i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS zcl_nth_fibonacci IMPLEMENTATION.\n  METHOD nth_fibonacci.\n    IF iv_n EQ 0 OR iv_n EQ 1.\n      rv_result = 1.\n    ELSE.\n      DATA: lv_prev TYPE i,\n            lv_curr TYPE i.\n\n      lv_prev = 1.\n      lv_curr = 1.\n      DO iv_n - 2 TIMES.\n        lv_next = lv_curr + lv_prev.\n        lv_prev = lv_curr.\n        lv_curr = lv_next.\n      ENDDO.\n\n      rv_result = lv_curr.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Describe how to use the following code to calculate the sum of all elements in an array in Java.",
        "input": "public static int calcSum(int[] arr) {\n    int sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "// To calculate the sum of all elements in an array using the code provided:\n// 1. Initialize the array of integers to be summed\n// 2. Use the calcSum function to iterate over the array and sum all of its elements\n// 3. Return the calculated sum from the calcSum function",
        "abap": "REPORT ztest.\n\nTYPES: ty_array TYPE STANDARD TABLE OF i.\n\nDATA: it_array TYPE ty_array,\n      lv_sum   TYPE i.\n\n\" Initialize the array of integers to be summed\nit_array = value #( 1, 2, 3, 4, 5 ).\n\n\" Calculate the sum of all elements in the array using a loop\nDO.\n  WHILE sy-index <= lines( it_array ).\n    ADD it_array[ sy-index ] TO lv_sum.\n    MODIFY sy-index BY 1.\nENDDO.\n\nWRITE: / lv_sum. \" Output the calculated sum\n\nOR \n\nCLASS lcl_sum_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calc_sum\n        IMPORTING\n          iv_array TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_sum) TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_calculator IMPLEMENTATION.\n  METHOD calc_sum.\n    DATA: lv_sum TYPE i.\n\n    LOOP AT iv_array INTO DATA(ls_item).\n      ADD ls_item TO lv_sum.\n    ENDLOOP.\n\n    rv_sum = lv_sum.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_array TYPE STANDARD TABLE OF i,\n      lv_sum   TYPE i.\n\nlt_array = value #( 1, 2, 3, 4, 5 ).\n\nlv_sum = lcl_sum_calculator=>calc_sum( EXPORTING iv_array = lt_array IMPORTING rv_sum = lv_sum ).\nWRITE: / lv_sum. \" Output the calculated sum\n"
    },
    {
        "instruction": "Write JavaScript to swap two elements in an array.",
        "input": "array = [10, 20, 30, 40]",
        "output": "function swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp; \n} \n\nlet array = [10, 20, 30, 40];\nswap(array, 0, 2);\nconsole.log(array);\n\n// Output: [30, 20, 10, 40]",
        "abap": "CLASS lcl_swap DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      swap IMPORTING\n        iv_array     TYPE STANDARD TABLE OF i\n        ii_index1    TYPE i\n        ii_index2    TYPE i\n        EXPORTING\n          ev_array     TYPE STANDARD TABLE OF i .\nENDCLASS.\n\nCLASS lcl_swap IMPLEMENTATION.\n  METHOD swap.\n    DATA: lv_temp TYPE i,\n          lt_array LIKE iv_array.\n\n    \" Assign the array content to a temporary field\n    lt_array = iv_array.\n\n    \" Swap the elements\n    lv_temp = lt_array[ii_index1].\n    lt_array[ii_index1] = lt_array[ii_index2].\n    lt_array[ii_index2] = lv_temp.\n\n    \" Export the swapped array back\n    ev_array = lt_array.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_array TYPE STANDARD TABLE OF i,\n      lv_result TYPE STANDARD TABLE OF i.\n\nlv_array = VALUE #( ( 10 ) ( 20 ) ( 30 ) ( 40 ) ).\n\nCALL METHOD 'lcl_swap=>swap'\n  EXPORTING\n    iv_array     = lv_array\n    ii_index1    = 0\n    ii_index2    = 2\n  IMPORTING\n    ev_array     = lv_result.\n\nWRITE: lv_result.\n"
    },
    {
        "instruction": "Generate a data structure that can efficiently store an array of words",
        "input": "",
        "output": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)",
        "abap": "CLASS lcl_trie DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_trie\n        RETURNING\n          VALUE(ro_trie) TYPE REF TO lcl_trie,\n      insert_word\n        IMPORTING\n          iv_word TYPE string\n        CHANGING\n          ro_trie TYPE REF TO lcl_trie.\n\nENDCLASS.\n\nCLASS lcl_trie DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_trie\n        RETURNING\n          VALUE(ro_trie) TYPE REF TO lcl_trie,\n      insert_word\n        IMPORTING\n          iv_word TYPE string\n        CHANGING\n          ro_trie TYPE REF TO lcl_trie.\n\n    TYPES: BEGIN OF ty_node,\n             children TYPE STANDARD TABLE OF ty_child,\n             end     TYPE abap_bool.\n    TYPES: END OF ty_node.\n\n    TYPES: BEGIN OF ty_child,\n             key   TYPE char1,\n             value TYPE REF TO lcl_trie=>ty_node.\n    TYPES: END OF ty_child.\n\n  PROTECTED SECTION.\n    DATA:\n      mv_root TYPE REF TO data.\n\n    CLASS-METHODS:\n      create_node\n        IMPORTING\n          iv_children TYPE ty_child\n        RETURNING\n          VALUE(rv_node) TYPE REF TO lcl_trie=>ty_node,\n      get_children\n        IMPORTING\n          iv_word   TYPE string\n        CHANGING\n          cv_node  TYPE REF TO lcl_trie=>ty_node.\n\nENDCLASS.\n\nCLASS lcl_trie IMPLEMENTATION.\n  METHOD create_trie.\n    ro_trie = NEW #( ).\n    DATA: lr_node TYPE REF TO lcl_trie=>ty_node.\n    CREATE OBJECT lr_node.\n    mv_root = lr_node.\n\n  ENDMETHOD.\n\n  METHOD insert_word.\n    ro_trie->mv_root = get_children( iv_word ).\n\n  ENDMETHOD.\n\n  METHOD get_children.\n    DATA:\n      lr_child  TYPE REF TO lcl_trie=>ty_child,\n      lr_current TYPE REF TO lcl_trie=>ty_node,\n      lv_index  TYPE i.\n\n    cv_node = NEW #( ).\n    IF iv_word IS INITIAL.\n      cv_node->children = VALUE #(\n        ( key = space\n          value = cv_node ) ).\n    ELSE.\n      DO.\n        lv_index = sy-index.\n        lr_child = VALUE #( key = iv_word+lv_index(1)\n                             value = get_children( iv_word+lv_index+1 )\n                           ).\n\n        IF NOT line_exists( cv_node->children[ table_line = lr_child ] ).\n          INSERT lr_child INTO TABLE cv_node->children.\n          cv_node->children = VALUE #(\n            ( key = space\n              value = cv_node ) ).\n        ENDIF.\n\n        IF lv_index > iv_word+0(1) .\n          cv_node->end = abap_true.\n          EXIT.\n        ELSE.\n          cv_node = lr_child-value.\n        ENDIF.\n      ENDDO.\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Implement a function to extract the last two words from a string of words",
        "input": "",
        "output": "def get_last_two_words(string):\n    \"\"\"\n    Extract and return the last two words from a string of words\n    :param string: the input string\n    :return: the last two words\n    \"\"\"\n    words = string.split(\" \")\n    return words[-2:]",
        "abap": "CLASS zcl_string_util DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_last_two_words IMPORTING VALUE(string) TYPE string\n                          RETURNING VALUE(words) TYPE string.\nENDCLASS.\n\nCLASS zcl_string_util IMPLEMENTATION.\n  METHOD get_last_two_words.\n    DATA: words TYPE string_table,\n          word  TYPE string.\n\n    \" Split the input string into a table of words\n    SPLIT string AT space INTO TABLE words.\n\n    \" Check if there are at least two words in the list\n    IF lines( words ) >= 2.\n      words = words[ lines( words ) - 1:lines( words ) ].\n    ELSE.\n      RAISE EXCEPTION type cx_static_check OTHERS = 'Not enough words'.\n    ENDIF.\n\n    \" Join the last two words back into a string separated by space\n    word = VALUE #( LINES words = 2 ) && space.\n    RETURN.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a new array in JavaScript containing only even numbers from the given input array.",
        "input": "Array: [3,7,10,6,23]",
        "output": "let evenArray = [3,7,10,6,23].filter(num => num % 2 == 0); \n//evenArray: [10,6]",
        "abap": "DATA: lv_even_array TYPE STANDARD TABLE OF i.\n\nSELECT SINGLE * FROM ( SELECT num FROM ( '3', '7', '10', '6', '23' ) INTO TABLE @lv_even_array WHERE num MOD 2 = 0 ).\nWRITE: / lv_even_array[ 1 ]-num, lv_even_array[ 2 ]-num.\n"
    },
    {
        "instruction": "Generate a 5x5 array with all its elements equal to 1.",
        "input": "",
        "output": "arr = [[1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1]]",
        "abap": "DATA: it_arr TYPE STANDARD TABLE OF ty_row.\n\nTYPES: BEGIN OF ty_row.\n  data(5) TYPE i. \" 5 elements of type integer, each 4 bytes long\nENDS OF ty_row.\n\nit_arr = VALUE #( ( 1 1 1 1 1 )\n                  ( 1 1 1 1 1 )\n                  ( 1 1 1 1 1 )\n                  ( 1 1 1 1 1 )\n                  ( 1 1  1  1  1 ) ).\n\ncl_demo_output=>display(\n  it_arr[ row = 0 ]-data[ col = 4 ]\n  it_arr[ row = 2 ]-data[ col = 3 ]\n).\n"
    },
    {
        "instruction": "Create a JavaScript program which takes an array of integers as a parameter and reverses the array in-place.",
        "input": "[3, 5, 9, 1, 6]",
        "output": "function reverseArrayInPlace(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n  \n    while (left < right) {\n        let temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n  \n        left++;\n        right--;\n    }\n    return nums;\n}",
        "abap": "CLASS lcl_array_reverser DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_array_in_place\n        IMPORTING\n          VALUE(iv_array) TYPE STANDARD TABLE OF i4\n        RETURNING\n          VALUE(rv_result) TYPE STANDARD TABLE OF i4.\n\nENDCLASS.\n\nCLASS lcl_array_reverser IMPLEMENTATION.\n  METHOD reverse_array_in_place.\n    DATA: lv_left TYPE i,\n          lv_right TYPE i,\n          lt_temp  TYPE i.\n\n    lv_left = 0.\n    lv_right = lines( iv_array ) - 1.\n\n    WHILE lv_left < lv_right.\n      lt_temp = iv_array[ lv_left ].\n      iv_array[ lv_left ] = iv_array[ lv_right ].\n      iv_array[ lv_right ] = lt_temp.\n\n      lv_left = lv_left + 1.\n      lv_right = lv_right - 1.\n    ENDWHILE.\n\n    rv_result = iv_array.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Rewrite the following code so it can take a list as input instead of an integer.",
        "input": "def list_sum(num):\n    total = 0\n    for x in range(num):\n        total += x\n    return total",
        "output": "def list_sum(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total",
        "abap": "CLASS lcl_math DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      list_sum\n        IMPORTING\n          VALUE(input_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(result) TYPE i.\nENDCLASS.\n\nCLASS lcl_math IMPLEMENTATION.\n  METHOD list_sum.\n    DATA: total TYPE i VALUE 0.\n    LOOP AT input_list INTO DATA(line).\n      ADD line TO total.\n    ENDLOOP.\n    result = total.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Javascript function to determine if the given number is an even number or not.",
        "input": "",
        "output": "function isEven(num) {\nreturn num % 2 === 0;\n}",
        "abap": "FUNCTION z_is_even\n  IMPORTING\n    VALUE(i_num) TYPE i\n  RETURNING\n    VALUE(rv_result) TYPE abap_bool.\n\nrv_result = so = i_num mod 2 eq abap_true.\n\nENDFUNCTION.\n"
    },
    {
        "instruction": "Summarize the given paragraph in < 100 words.",
        "input": "Ada Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations.",
        "output": "Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world\u2019s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage\u2019s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations.",
        "abap": "DATA: lv_machine_description TYPE string.\n\nlv_machine_description = 'The Analytical Engine'.\n\nlv_complex_calculation TYPE string.\nlv_complex_calculation = |{ lv_machine_description } can perform complex calculations, such as { lv_machine_description } being able to compute the square of a number using its memory and arithmetic logic unit.'.\n\nWRITE: / lv_complex_calculation.\n"
    },
    {
        "instruction": "Write a function in JavaScript to count the number of vowels in a given string.",
        "input": "const string = \"abcdefg\"",
        "output": "function countVowels(string) {\n    let vowelCount = 0;\n    const vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  \n    for (let i = 0; i < string.length; i++) {\n      if (vowels.includes(string[i])) {\n        vowelCount++;\n      }\n    }\n  \n    return vowelCount;\n}\n\nconst string = \"abcdefg\";\nconsole.log(countVowels(string));",
        "abap": "REPORT zcount_vowels.\n\nCLASS lcl_count_vowels DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      count_vowels\n        IMPORTING\n          value(string) TYPE string\n        RETURNING\n          value(result) TYPE i.\nENDCLASS.\n\nCLASS lcl_count_vowels IMPLEMENTATION.\n  METHOD count_vowels.\n    DATA: lv_vowel_count TYPE i,\n          lv_vowels TYPE ti_bcd VALUE 'aeiou'.\n    \n    DO strlen( string ) TIMES.\n      IF lv_vowels MATCHES string( sy-index ).\n        ADD 1 TO lv_vowel_count.\n      ENDIF.\n    ENDDO.\n    \n    result = lv_vowel_count.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: string TYPE string VALUE 'abcdefg'.\n\nWRITE: / count_vowels( string ).\n"
    },
    {
        "instruction": "Write a C++ program to print all prime numbers between 1 and 100.",
        "input": "",
        "output": "#include<iostream>  \nusing namespace std;  \nint main()  \n{  \n int i, j,flag;   \n for (i = 2; i <= 100; i++)  \n {  \n     flag = 0;  \n     for (j = 2; j <= i / 2; j++)  \n     {  \n         if (i % j == 0)\n         {  \n             flag = 1;  \n             break;  \n         }  \n     }  \n     if (flag == 0)  \n         cout << i << \" \";  \n }  \n return 0;  \n}",
        "abap": "REPORT zprime_numbers.\n\nDATA: lv_i TYPE i,\n       lv_j TYPE i,\n       lv_flag TYPE abap_bool.\n\nDO.\n  lv_i = 2.\n  WHILE lv_i <= 100.\n    lv_flag = abap_false.\n    DO.\n      lv_j = 2.\n      WHILE lv_j <= lv_i / 2.\n        IF lv_i MOD lv_j EQ 0.\n          lv_flag = abap_true.\n          EXIT.\n        ENDIF.\n        ADD 1 TO lv_j.\n      ENDDO.\n      IF lv_flag EQ abap_false.\n        WRITE: lv_i.\n      ENDIF.\n    ENDDO.\n    ADD 1 TO lv_i.\n  ENDDO.\n\nSTOP.\n"
    },
    {
        "instruction": "How would you write a program to find the number of prime numbers between 0 and 100?",
        "input": "",
        "output": "def count_prime_num(x, y): \n  \n    prime_count = 0\n  \n    for num in range(x, y + 1): \n       \n       if num > 1: \n           for i in range(2, num): \n               if (num % i) == 0: \n                   break\n           else: \n               prime_count += 1\n  \n    return prime_count \n\nprint(count_prime_num(0, 100))",
        "abap": "CLASS lcl_prime_count DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      count_prime_num IMPORTING\n                         ip_start TYPE i\n                         ip_end   TYPE i\n         EXPORTING\n           es_result TYPE i.\nENDCLASS.\n\nCLASS lcl_prime_count IMPLEMENTATION.\n  METHOD count_prime_num.\n    DATA: lv_counter TYPE i VALUE 0,\n          lv_number  TYPE i,\n          lv_factor  TYPE i.\n\n    DO.\n      lv_number = ip_start + lv_counter.\n      IF sy-index > ip_end.\n        es_result = lv_counter - ( ip_start MOD lv_counter ).\n        EXIT.\n      ENDIF.\n\n      LOOP AT ip_start TO lv_number\n        INTO lv_number.\n        lv_factor = 2.\n        WHILE lv_factor < lv_number.\n          IF ( lv_number MOD lv_factor ) = 0.\n            EXIT.\n          ELSE.\n            lv_factor = lv_factor + 1.\n          ENDIF.\n        ENDWHILE.\n\n        IF sy-subrc <> 0.\n          lv_counter = lv_counter + 1.\n        ELSE.\n          CLEAR: lv_counter, lv_factor.\n        ENDIF.\n      ENDLOOP.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage\nDATA: lt_result TYPE i.\n\nCALL METHOD lcl_prime_count=>count_prime_num\n  EXPORTING\n    ip_start = 0\n    ip_end   = 100\n  RECEIVING\n    es_result = lt_result.\n\nWRITE: / lt_result.\n"
    },
    {
        "instruction": "Create a Java program that reads two numbers from the user and prints the sum.",
        "input": "",
        "output": "import java.util.Scanner;\n\npublic class Sum {\n\npublic static void main(String[] args) {\n \nScanner sc = new Scanner(System.in);\n \nSystem.out.println(\"Enter first number:\");\nint num1 = sc.nextInt();\n \nSystem.out.println(\"Enter second number:\");\nint num2 = sc.nextInt();\n \nint sum = num1 + num2;\n \nSystem.out.println(\"The sum is: \"+sum);\n \n }\n}",
        "abap": "REPORT z_sum.\n\nDATA: lv_num1 TYPE i,\n      lv_num2 TYPE i,\n      lv_sum  TYPE i.\n\nPARAMETERS: p_num1 TYPE i OBLIGATORY,\n            p_num2 TYPE i OBLIGATORY.\n\nlv_sum = p_num1 + p_num2.\n\nWRITE: / 'The sum is:', lv_sum.\n"
    },
    {
        "instruction": "Generate an array of 20 random numbers between 0 and 10 (inclusive).",
        "input": "",
        "output": "import random \n  \narr = [] \nfor i in range(20): \n    arr.append(random.randint(0, 10))\n    \narr",
        "abap": "DATA: lv_random_numbers TYPE STANDARD TABLE OF f.\n\nLOOP AT sy-tcfields INTO DATA(lv_tcode) FROM 1 TO 20.\n  APPEND random_int(0) + random_int(10) MOD 11 TO lv_random_numbers.\nENDLOOP.\n\ncl_abap_random=>random_int( 0 ) = cl_abap_random=>get_random_value( ).\n"
    },
    {
        "instruction": "Write a code to check whether a given year is a leap year or not",
        "input": "",
        "output": "def is_leap_year(year):\n    \"\"\"\n    Checks if the given year is a leap year or not.\n    \"\"\"\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  \n        return True  \n    else:  \n        return False",
        "abap": "CLASS lcl_leap_year DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_leap_year IMPORTING VALUE(year) TYPE i RETURNING VALUE(result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_leap_year IMPLEMENTATION.\n  METHOD is_leap_year.\n    IF ( year MOD 4 = 0 AND year MOD 100 <> 0 ) OR ( year MOD 400 = 0 ).\n      result = abap_true.\n    ELSE.\n      result = abap_false.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "You are given an array of integers. Write a program to find the maximum number in this array.",
        "input": "[10, 5, 11, 23, 9]",
        "output": "def max_int(arr):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val\n\nprint(max_int([10, 5, 11, 23, 9]))",
        "abap": "REPORT zmax_int.\n\nCLASS lcl_max_int DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      max_int IMPORTING\n                 VALUE( it_arr ) TYPE ti_t_i4\n                RETURNING\n                 VALUE( ro_result ) TYPE i.\nENDCLASS.\n\nCLASS lcl_max_int IMPLEMENTATION.\n  METHOD max_int.\n    DATA: lv_max_val TYPE i,\n          lv_index  TYPE i.\n\n    lv_max_val = it_arr[ 1 ].\n    DO it_arr[] - 1 TIMES.\n      IF it_arr[ sy-index ] > lv_max_val.\n        lv_max_val = it_arr[ sy-index ].\n      ENDIF.\n    ENDDO.\n\n    ro_result = lv_max_val.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_arr TYPE STANDARD TABLE OF i,\n        ls_int TYPE i.\n\n  APPEND 10 TO lt_arr.\n  APPEND 5  TO lt_arr.\n  APPEND 11  TO lt_arr.\n  APPEND 23  TO lt_arr.\n  APPEND 9  TO lt_arr.\n\n  DATA: lo_max_int TYPE REF TO lcl_max_int,\n        lr_result TYPE REF TO data.\n\n  CREATE OBJECT lo_max_int.\n  CALL METHOD lo_max_int->max_int\n    EXPORTING\n      it_arr       = lt_arr\n    RECEIVING\n      ro_result   = lr_result\n  .\n  WRITE: / 'Maximum value:', lr_result->*.\n"
    },
    {
        "instruction": "Create a JavaScript function that prints out the numbers from 1 to n.",
        "input": "",
        "output": "function printNumbers(n) {\n for (let i = 1; i <= n; i++) {\n console.log(i);\n }\n}",
        "abap": "REPORT zprint_numbers.\n\nCLASS lcl_print_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Print numbers from 1 to n\n      METHOD print_numbers\n        IMPORTING\n          VALUE( i_n ) TYPE i \" input parameter\n        RAISING\n          cx_no_check .\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_print_numbers IMPLEMENTATION.\n  METHOD print_numbers.\n    DATA: lv_i TYPE i.\n\n    DO n TIMES.\n      WRITE : lv_i.\n      ADD 1 TO lv_i.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  CALL METHOD cl_abap_testclient=>create(\n        exporting\n          report = 'ZPRINT_NUMBERS'\n          methodname = 'PRINT_NUMBERS'\n          i_n = 10\n        importing\n          data = DATA(lv_data) ).\n"
    },
    {
        "instruction": "Write a JUnit test case to test if the sum of two numbers is correct.",
        "input": "",
        "output": "@Test\npublic void testSum(){\n    int x = 1;\n    int y = 2;\n    int expectedSum = 3;\n    int actualSum = x+y;\n \n    assertEquals(expectedSum, actualSum);\n}",
        "abap": "CLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      test_sum REDEFINABLE.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD test_sum.\n    DATA: x TYPE i VALUE '1',\n          y TYPE i VALUE '2',\n          expected_sum TYPE i VALUE '3',\n          actual_sum   TYPE i.\n\n    \" Calculate the sum\n    actual_sum = x + y.\n\n    \" Check if the actual and expected sums are equal\n    cl_abap_assert=>assert_equals( act = actual_sum exp = expected_sum msg = 'Expected 3 but got ' || actual_sum ).\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Find the number of times a letter appears in a string.",
        "input": "string = \"Hello World\"\nletter = 'l'",
        "output": "count = string.count(letter)",
        "abap": "That would be translated to ABAP as:\n\nDATA: count TYPE i.\n\ncount = strlen( val = letter )."
    },
    {
        "instruction": "Validate whether the string contains only alphabets or not.",
        "input": "myString = \"abc123\"",
        "output": "def check_string_alphabets(myString):\n    for character in myString:\n        if (not character.isalpha()):\n            return False\n    return True\n\nmyString = \"abc123\"\nif (check_string_alphabets(myString)):\n    print(\"String contains only alphabets\")\nelse:\n    print(\"String contains numbers\")",
        "abap": "REPORT zstring_check.\n\nPARAMETERS: myString TYPE string DEFAULT 'abc123'.\n\nDATA: lv_result TYPE abap_bool.\nlv_result = check_string_alphabets( val = myString ).\n\nIF lv_result = abap_true.\n  WRITE: / 'String contains only alphabets'.\nELSE.\n  WRITE: / 'String contains numbers'.\nENDIF.\n\nFORM check_string_alphabets\n  USING\n    value TYPE string\n  RETURNING\n    VALUE(result) TYPE abap_bool.\n\nDATA: lr_char TYPE string,\n      l_result TYPE abap_bool.\n\nLOOP AT value INTO lr_char.\n  IF NOT lr_char IS alpha THEN\n    result = abap_false.\n    EXIT.\n  ENDIF.\nENDLOOP.\n\nresult = abap_true.\nENDDATA.\n"
    },
    {
        "instruction": "Create a Ruby program to check if a number is even or odd.",
        "input": "",
        "output": "def is_even(number)\n  number % 2 == 0\nend",
        "abap": "FORM z_is_even\n  USING\n    p_number TYPE i.\n\n  IF sy-batch = abap_true.\n    \" In batch mode, we don't have a console to print to,\n    \" so we return the result as true or false\n    IF p_number MOD 2 = 0.\n      \" Return true if number is even\n      WRITE: 'X'.\n    ELSE.\n      \" Return false if number is odd\n      WRITE: ''.\n    ENDIF.\n  ELSE.\n    \" In interactive mode, we can print a message to the console\n    IF p_number MOD 2 = 0.\n      \" Print true if number is even\n      WRITE: / 'True'.\n    ELSE.\n      \" Print false if number is odd\n      WRITE: / 'False'.\n    ENDIF.\n  ENDIF.\n\nENDFORM.  \" Z_IS_EVEN\n"
    },
    {
        "instruction": "Create a function that takes a string and returns a new string with each character capitalized.",
        "input": "String = \"hello!\"",
        "output": "\"\"\"\nCreate a function that takes a string and returns a new string with each character capitalized\n\"\"\"\n\ndef capitalize(string):\n    new_string = \"\"\n    for c in string:\n        new_string += c.upper()\n    return new_string\n    \nif __name__ == '__main__':\n    string = \"hello!\"\n    result = capitalize(string)\n    print(result)\n\n# Output\n# HELLO!",
        "abap": "CLASS lcl_capitalize DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      capitalise\n        IMPORTING\n          VALUE(iv_string) TYPE string\n        RETURNING\n          VALUE(rv_string) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_capitalize IMPLEMENTATION.\n  METHOD capitalise.\n    DATA: lv_char TYPE string.\n    DO strlen( iv_string ) TIMES.\n      lv_char = substring( val = iv_string off = sy-index len = 1 ).\n      APPEND uv_char TO rv_string.\n      TRANSLATE lv_char TO UPPER CASE.\n    ENDDO.\n  ENDMETHOD.\n\nINITIALIZATION.\n  PERFORM capitalise USING 'hello!' INTO DATA:lv_result.\n  WRITE:/ lv_result.\n\nEND-OF-PROGRAM.\n"
    },
    {
        "instruction": "Modify the above program to sort the array in descending order.",
        "input": "[3,8,5,1,2,6,4]",
        "output": "public class SortDescending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] < numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in descending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}",
        "abap": "CLASS lcl_sort_descending DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main IMPORTING\n          value(iv_length) TYPE i\n          iv_array TYPE STANDARD TABLE OF i\n        EXPORTING\n          ev_sorted_table TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_sort_descending IMPLEMENTATION.\n  METHOD main.\n    DATA: lt_temp TYPE i,\n          lv_index TYPE i,\n          lv_counter TYPE i.\n\n    \" Bubble sort algorithm to sort array in descending order\n    DO iv_length TIMES.\n      lv_index = sy-index.\n      DO iv_length - lv_index TIMES.\n        IF iv_array[lv_index] < iv_array[sy-index + 1].\n          lt_temp = iv_array[lv_index]. \" assign value of lv_index to temp\n          iv_array[lv_index] = iv_array[sy-index + 1]. \" assign value of sy-index+1 to lv_index\n          iv_array[sy-index + 1] = lt_temp. \" assign value of temp to sy-index+1\n        ENDIF.\n      ENDDO.\n    ENDDO.\n\n    \" Print sorted array\n    WRITE: / 'Array elements in descending order:'.\n    LOOP AT iv_array INTO DATA(lv_item).\n      WRITE: lv_item, space.\n    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Reverse a string using Python code.",
        "input": "input_str = \"Hello world!\"",
        "output": "def reverse_string(input_str): \n    new_string = \"\" \n    for char in input_str: \n        new_string = char + new_string\n  \n    return new_string \n  \ninput_str = \"Hello world!\"\n\nprint(reverse_string(input_str))\n##\n5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.\n5. Input:\n<noinput>\n5. Output:\nfor i in range(1, 11): \n    for j in range(1, 11): \n        product = i * j\n        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') \n    print()",
        "abap": "REPORT zreverse_string.\n\nCLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string IMPORTING input_str TYPE string\n                      RETURNING VALUE(result) TYPE string.\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: new_string TYPE string.\n\n    DO strlen( input_str ) TIMES.\n      LOOP AT input_str INTO DATA(char).\n        new_string = char && new_string.\n      ENDLOOP.\n    ENDDO.\n\n    result = new_string.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_input_str TYPE string,\n      lv_result TYPE string.\n\nlv_input_str = 'Hello world!'.\nlv_result = lcl_reverse_string=>reverse_string( input_str = lv_input_str ).\n\nWRITE: / lv_result.\n"
    },
    {
        "instruction": "Implement an algorithm to find the sum of all the elements in an array.",
        "input": "The array is: [3, 5, 8, 10, 4]",
        "output": "// Algorithm to calculate the sum of all the elements in an array\n\n// Step 1: Initialize a variable 'sum' and set it equal to 0\nint sum = 0;\n\n// Step 2: Iterate through the array and add each element to 'sum'\nfor (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n}\n\n// Step 3: Return the value of sum\nreturn sum;",
        "abap": "REPORT zcal_sum_array.\n\nCLASS lcl_sum_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_sum IMPORTING\n                      VALUE( ir_arr ) TYPE STANDARD TABLE OF i,\n        RETURNING\n          VALUE( rs_sum ) TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_array IMPLEMENTATION.\n  METHOD calculate_sum.\n    DATA: ls_sum TYPE i.\n\n    \" Step 1: Initialize a variable 'ls_sum' and set it equal to 0\n    ls_sum = 0.\n\n    \" Step 2: Iterate through the array and add each element to 'ls_sum'\n    LOOP AT ir_arr INTO DATA(ls_element).\n      ls_sum += ls_element.\n    ENDLOOP.\n\n    \" Step 3: Return the value of ls_sum\n    rs_sum = ls_sum.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Predict the sentiment of a given sentence.",
        "input": "This movie was fairly dull.",
        "output": "The sentiment of the statement is negative.",
        "abap": "To provide an accurate response, can you please share the specific piece of code that you would like me to translate into ABAP (ABAP is a high-level programming language developed by SAP SE for its SAP R/3 and other related SAP products) or tell me what the code is in another programming language so I can help with translation?"
    },
    {
        "instruction": "Write a SQL command to count the number of rows from a table \u2018Orders\u2019.",
        "input": "",
        "output": "SELECT COUNT(*) FROM Orders;",
        "abap": "SELECT COUNT(*)\nFROM Orders; \n\nTranslated to ABAP:\n\n`DATA: lv_count TYPE i VALUE 0.\n\nSELECT COUNT(*) INTO lv_count\nFROM orders.\nWRITE: / lv_count.`"
    },
    {
        "instruction": "Create a function that takes in a string and counts the number of vowels in it",
        "input": "",
        "output": "def count_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
        "abap": "CLASS lcl_count_vowels DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      count_vowels\n        IMPORTING\n          value(string) TYPE string\n        RETURNING\n          VALUE(count) TYPE i.\nENDCLASS.\n\nCLASS lcl_count_vowels IMPLEMENTATION.\n  METHOD count_vowels.\n    DATA: lv_vowel TYPE string_value TYPE c LENGTH 1,\n          lv_count TYPE i.\n\n    \" Define the vowels as a string constant for readability and maintainability\n    DATA: lv_vowels TYPE string VALUE 'aeiou'.\n\n    DO strlen( string ) TIMES.\n      lv_char = substring( val = string off = sy-index len = 1 ).\n      IF lv_vowel = lv_char OR lv_vowel+lv_char = string sy-index sy-index+1.\n        \" Increment the count if a vowel is found\n        ADD 1 TO lv_count.\n      ENDIF.\n    ENDDO.\n\n    \" Return the total count of vowels\n    count = lv_count.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python program to loop through all the items in a given list.",
        "input": "List: [1, 2, 3, 4, 5, 6]",
        "output": "my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i VALUE 1 ##FM_SUBSTC\n         VALUES 2 ##FM_SUBSTC\n         VALUES 3 ##FM_SUBSTC\n         VALUES 4 ##FM_SUBSTC\n         VALUES 5 ##FM_SUBSTC\n         VALUES 6 ##FM_SUBSTC.\n\nLOOP AT lv_list INTO DATA(lv_item).\n    WRITE: lv_item.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a function returning the factorial of a given number in Python.",
        "input": "",
        "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)",
        "abap": "FORM z_factorial USING p_n TYPE i CHANGING cv_result TYPE i.\n  IF p_n = 0.\n    cv_result = 1.\n  ELSE.\n    DATA(l_fact) = p_n * factorial( p_n - 1 ).\n    cv_result = l_fact.\n  ENDIF.\nENDFORM.\n\nDATA: lv_n TYPE i VALUE '5',\n      lv_fact TYPE i.\n\nCALL FUNCTION 'z_factorial'\n  EXPORTING\n    p_n        = lv_n\n  CHANGING\n    cv_result  = lv_fact\n  EXCEPTIONS\n    OTHERS     = 0.\n"
    },
    {
        "instruction": "Create a new button using HTML.",
        "input": "",
        "output": "<button>My Button</button>",
        "abap": "DATA: lv_html TYPE string.\n\nlv_html = '<button>My Button</button>'.\nWRITE: / lv_html.\n"
    },
    {
        "instruction": "Write a SQL query to join two tables on a specified conditions.",
        "input": "Table 1:\nid  name  age\n1     a     15\n2     b     18\n3     c     20\nTable 2:\nid  class  marks\n1    10      80\n2    10      75\n3    11      70",
        "output": "SELECT table1.id, table1.name, table1.age, table2.class, table2.marks FROM table1 INNER JOIN table2 ON table1.id = table2.id WHERE table1.age > 18;",
        "abap": "DATA: lv_result TYPE REF TO data.\n\nSELECT table1-id table1-name table1-age\n       table2-class table2-marks\nFROM (SELECT * FROM table1 WHERE age > 18) AS inner_table\nINNER JOIN table2 ON table1-id = table2-id INTO @DATA(result).\n"
    },
    {
        "instruction": "How do you display the contents of an array in reverse order?",
        "input": "",
        "output": "The contents of an array can be displayed in reverse order by using the reverse() method or by using a for loop. \n\nFor example, to display the content of the array [1, 2, 3, 4], the following code can be used:\n\n// Using reverse()\nlet arr = [1, 2, 3, 4];\narr.reverse();\nconsole.log(arr); // Output: [4, 3, 2, 1]\n\n// Using a for loop\nlet arr = [1, 2, 3, 4];\nfor (let i = arr.length - 1; i >= 0; i--) {\n    console.log(arr[i]); // Output: 4 3 2 1\n}",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i.\n\nlv_arr = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ).\n\nreverse( tab = lv_arr ).\nWRITE: / lv_arr. \" Output: 4, 3, 2, 1\n"
    },
    {
        "instruction": "Create a program to check if two given strings are a rotation of each other.",
        "input": "string1 = \"abcd\", string2= \"cdab\"",
        "output": "def isRotation(s1, s2):   \n    if len(s1) != len(s2): \n        return False\n  \n    temp = s1 + s1 \n    return (temp.count(s2) > 0)",
        "abap": "CLASS lcl_string_util DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \" Checks if two input strings are rotations of each other.\n      is_rotation\n        IMPORTING\n          iv_str1 TYPE string\n          iv_str2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool .\n\nENDCLASS.\n\nCLASS lcl_string_util IMPLEMENTATION.\n  METHOD is_rotation.\n    DATA: lv_length TYPE i,\n           lv_temp   TYPE string.\n\n    IF strlen( iv_str1 ) <> strlen( iv_str2 ).\n      rv_result = abap_false.\n      RETURN.\n    ENDIF.\n\n    lv_temp = iv_str1 && iv_str1.\n    FIND ALL OCCURRENCES OF substring iv_str2 IN lv_temp MATCH COUNT DATA(ld_count).\n    rv_result = ld_count > 0.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Construct a regular expression to extract all words from a given string that start with a specific letter.",
        "input": "input_str = \"The quick brown fox jumped over the lazy dog\"",
        "output": "var regex = /\\b[qQ]\\w+\\b/g;\n \nvar result = input_str.match(regex);\n\nconsole.log(result); //['quick']",
        "abap": "DATA: lv_regex TYPE string,\n       lt_result LIKE TABLE OF string.\n\nlv_regex = '\\b[qQ]\\w+\\b'.\n\nLOOP AT ip_input_str INTO DATA(ls_input_str).\n  IF lv_regex CA ls_input_str.\n    APPEND ls_input_str TO lt_result.\n  ENDIF.\nENDDO.\n\n\" or using the regular expression with the FIND_ALL_REGEX method\n\nDATA: lo_regex TYPE REF TO cl_abap_regexp,\n      lr_match TYPE REF TO cl_abap_regexmatch.\n\nCREATE OBJECT lo_regex\n  EXPORTING\n    pattern = lv_regex.\n\nlo_regex->find_all( ip_input_str = ip_input_str\n                   IMPORTING\n                     matches = lt_result ).\n\n\" or using the LIKE REGEX function\n\nDATA: lv_quick_like TYPE string.\n\nlv_quick_like = '^[qQ].*$'.\n\nLOOP AT ip_input_str INTO ls_input_str.\n  IF ls_input_str LIKE lv_quick_like.\n    APPEND ls_input_str TO lt_result.\n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Write a SQL query that finds, in a table of employees, the names and titles of all employees who work in the Marketing department.",
        "input": "Table: Employees\n\n| EmployeeID | Name | Department   | Title                   |\n|------------|------|--------------|-------------------------|\n| 1          | Bob  | Marketing    | Senior Marketing Manager |\n| 2          | Joe  | Finance      | Financial Analyst       |\n| 3          | Jane | Marketing    | Marketing Manager       |\n| 4          | Alex | Sales        | Sales Representative     |",
        "output": "SELECT Name, Title \nFROM Employees \nWHERE Department = 'Marketing';",
        "abap": "DATA: lt_employees TYPE STANDARD TABLE OF ty_employee.\n\nTYPES: BEGIN OF type_employee,\n         name    TYPE string,\n         title   TYPE string,\n       END OF type_employee.\n\nSELECT name title INTO CORRESPONDING FIELDS OF TABLE lt_employees\n  FROM Employees\n  WHERE department = 'Marketing'.\n\nLOOP AT lt_employees INTO DATA(ls_employee).\n  WRITE: / ls_employee-name, ls_employee-title.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a code to generate a random number between 1 to 10.",
        "input": "",
        "output": "\"\"\"\nWrite a code to generate a random number between 1 to 10\n\"\"\"\n\nimport random\n\n# Generate random number between 1 to 10 \nrandom_number = random.randint(1,10)\n\n# Printing the random number\nprint(random_number)",
        "abap": "DATA: lv_random_number TYPE i.\n\nlv_random_number = val-1 + ( val-10 - val-1 ) * rand( ).\n\nWRITE: / lv_random_number.\n"
    },
    {
        "instruction": "Calculate the average from a given list of integers.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "sum(list_of_numbers) / len(list_of_numbers)",
        "abap": "DATA: lv_sum TYPE i VALUE 0,\n      lt_numbers TYPE STANDARD TABLE OF i.\n\n\" assign your list of numbers to lt_numbers here\n\nLOOP AT lt_numbers INTO DATA(lv_num).\n  lv_sum = lv_sum + lv_num.\nENDLOOP.\n\nIF lt_numbers IS NOT INITIAL.\n  \" check if the list is not empty\n  lv_average = lv_sum / lines( lt_numbers ).\nENDIF.\n"
    },
    {
        "instruction": "Create a regular expression to validate a URL string.",
        "input": "",
        "output": "# Regular expression to validate a URL string\n^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)?(www\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\.)+[\\w]{2,5}(\\/\\S*)?$",
        "abap": "DATA: lv_url TYPE string.\n\n\" Die URL-Regel (URL Pattern)\nlv_pattern = '^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)?(www\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\.)+[\\w]{2,5}(\\/\\S*)?$'.\n\n\" \u00dcberpr\u00fcfung der Eingabe\nDATA: lv_valid TYPE abap_bool.\n\n\" Daten zum Validieren vorbereiten\nlv_url = 'http://www.example.com/path/to/page'. \" Beispiel-URL\n\nCALL FUNCTION 'SCMS_URL_VALIDATE'\n  EXPORTING\n    url     = lv_url\n    pattern = lv_pattern\n  IMPORTING\n    valid   = lv_valid.\n\nIF lv_valid EQ abap_true.\n  WRITE: / 'Die URL ist g\u00fcltig!'.\nELSE.\n  WRITE: / 'Die URL ist nicht g\u00fcltig.'.\nENDIF.\n"
    },
    {
        "instruction": "Change the following array so that it only contains numbers divisible by 3",
        "input": "mylist = [2, 4, 5, 6, 7, 11, 12, 22]",
        "output": "mylist = [x for x in mylist if x % 3 == 0]",
        "abap": "DATA: lt_list TYPE STANDARD TABLE OF i.\n\n\" Initialize your list\nlt_list = value #( 1, 2, 3, 4, 5, 6 ).\n\n\" Filter out numbers that are not divisible by 3\nLOOP AT lt_list INTO DATA(ls_current).\n  IF ls_current MOD 3 EQ 0.\n    APPEND ls_current TO lt_result.\n  ENDIF.\nENDLOOP.\n\nDATA: lt_result TYPE STANDARD TABLE OF i = VALUE #( ( 3 )( 6 ) ).\n"
    },
    {
        "instruction": "Write a Java program that takes two strings as inputs and checks if one string is a rotation of the other.",
        "input": "",
        "output": "import java.util.Arrays;\n \nclass GFG {\n \n    // Function to check if two strings are \n    // rotations of each other or not\n    static boolean areRotations(String str1, String str2)\n    {\n        // There lengths must be same and str2 should \n        // be a substring of str1 concatenated with \n        // str1.\n        return (str1.length() == str2.length())\n            && ((str1 + str1).indexOf(str2) != -1);\n    }\n \n    // Driver program \n    public static void main(String[] args) \n    {\n        String str1 = \"ABACD\";\n        String str2 = \"CDABA\";\n \n        if (areRotations(str1, str2))\n            System.out.println(\"Strings are rotations of each other\");\n        else\n            System.out.println(\"Strings are not rotations of each other\");\n    }\n}",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      are_rotations\n        IMPORTING\n          iv_str1 TYPE string\n          iv_str2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD are_rotations.\n    DATA: lv_len TYPE i,\n          lv_str_conc TYPE string.\n\n    lv_len = strlen( iv_str1 ).\n\n    IF iv_str1 <> iv_str2 OR lv_len <> strlen( iv_str2 ).\n      rv_result = abap_false.\n      RETURN.\n    ENDIF.\n\n    lv_str_conc = iv_str1 && iv_str1.\n\n    IF FIND REGEX iv_str2 IN lv_str_conc = 'TRUE'.\n      rv_result = abap_true.\n    ELSE.\n      rv_result = abap_false.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_test TYPE REF TO lcl_test,\n        ls_str1 TYPE string VALUE 'ABACD',\n        ls_str2 TYPE string VALUE 'CDABA'.\n\n  CREATE OBJECT lo_test.\n\n  IF lo_test->are_rotations( ls_str1 = ls_str1\n                                iv_str2 = ls_str2 ) = abap_true.\n    WRITE: / 'Strings are rotations of each other'.\n  ELSE.\n    WRITE: / 'Strings are not rotations of each other'.\n  ENDIF.\n"
    },
    {
        "instruction": "Using the provided HTML, add a class attribute to the h1 tag so its style can be updated.",
        "input": "<h1>My Website</h1>",
        "output": "<h1 class=\"myClass\">My Website</h1>",
        "abap": "REPORT zexample.\n\nDATA: ls_html TYPE string.\n\nls_html = '<H1 CLASS=\"myClass\">My Website</H1>'.\nWRITE: / ls_html.\n"
    },
    {
        "instruction": "Given the following list, extract the item at index 2.",
        "input": "my_list = [\"apple\", \"banana\", \"mango\", \"grapes\"]",
        "output": "mango",
        "abap": "It seems like you want me to translate some code from a different programming language into ABAP (Advanced Business Application Programming), which is the proprietary programming language of SAP systems.\n\nHowever, I don't see any code provided. Could you please share the code you'd like me to translate? What programming language is it in?\n\nType or paste the code and let's get started!"
    },
    {
        "instruction": "Generate an random integer between 1 and 6.",
        "input": "",
        "output": "Math.floor(Math.random() * 6) + 1;",
        "abap": "DATA: lv_random TYPE i.\nlv_random = sy-datum MOD 6 + 1.\n\nOR\n\nDATA: lv_random TYPE i.\nDO.\n  lv_random = math_mod( sy-datum, 6 ) + 1.\nENDDO.\n"
    },
    {
        "instruction": "You should edit this code and make it into a working code that prints \"Hello, world!\"",
        "input": "cout << \"Hello, World!\"",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "abap": "REPORT zhello_world.\n\nSTART-OF-PROGRAM.\n  WRITE: / 'Hello, World!'.\n  STOP-OF-PROGRAM.\n"
    },
    {
        "instruction": "Rewrite the following for loop code using a list comprehension.",
        "input": "arr = [1,2,3,4,5]\nfor i in arr:\n  arr[i] = arr[i] + 1",
        "output": "arr = [x+1 for x in [1,2,3,4,5] ]\n\nprint(arr)",
        "abap": "DATA: lv_tab TYPE STANDARD TABLE OF i.\n\nDO 5 TIMES.\n  APPEND sy-index + 1 TO lv_tab.\nENDDO.\n\nWRITE: / lv_tab.\n"
    },
    {
        "instruction": "Write a Java program to print out the first n prime numbers",
        "input": "",
        "output": "public static void printPrimeNumbers(int n) \n    { \n        int num; \n        int count=0;\n        for (int i = 2; i <= n;) \n        { \n            num=0; \n            for (int j = 2; j <= i / 2; j++)  \n            { \n                if (i % j == 0) \n                { \n                    num++; \n                    break; \n                } \n            } \n            if (num == 0) \n            { \n                System.out.print(i+\" \"); \n                count++; \n            } \n            i++; \n        } \n    }",
        "abap": "REPORT zprint_prime_numbers.\n\nCLASS lcl_print_prime_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Print prime numbers up to a given number n\n      METHOD printPrimeNumbers\n        IMPORTING\n          value(n) TYPE i\n        RAISING\n          cx_sy_itab_out_of_borders.\n  ENDCLASS.\n\nCLASS lcl_print_prime_numbers IMPLEMENTATION.\n  METHOD printPrimeNumbers.\n    DATA: lv_num   TYPE i,\n          ls_count TYPE i.\n\n    DO n TIMES.\n      lv_num = sy-index.\n      DATA(lv_num_divisors) TYPE i VALUE 0.\n\n      WHILE lv_num > 1 AND lv_num >= ( sy-index / 2 ).\n        IF MOD( lv_num, sy-index ) EQ 0.\n          lv_num_divisors += 1.\n          EXIT.\n        ENDIF.\n        lv_num = sy-index - 1.\n      ENDWHILE.\n\n      IF lv_num_divisors EQ 0.\n        WRITE: sy-index, space.\n        ls_count += 1.\n      ENDIF.\n    ENDDO.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write an SQL query to calculate the difference between the total salaries of male and female employees in a table.",
        "input": "",
        "output": "SELECT SUM(CASE WHEN gender = 'female' THEN salary ELSE 0 END) - SUM(CASE WHEN gender = 'male' THEN salary ELSE 0 END)\nFROM employees;",
        "abap": "REPORT z_example.\n\nDATA: ls_employees TYPE ty_employees.\n\nSELECT SUM( CASE WHEN gender = 'F' THEN salary ELSE 0 END ) -\n       SUM( CASE WHEN gender = 'M' THEN salary ELSE 0 END )\nINTO ls_employees\nFROM employees.\nWRITE: / ls_employees-salary.\n"
    },
    {
        "instruction": "Generate a snippet of code to extract all the URLs from the given string.",
        "input": "This string contains some urls such as https://www.google.com and https://www.facebook.com.",
        "output": "import re\n\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\n\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) \n\nprint(urls)",
        "abap": "REPORT zurl_extraction.\n\nDATA: lv_string TYPE string,\n      lt_urls   TYPE STANDARD TABLE OF string.\n\nlv_string = 'This string contains some urls such as https://www.google.com and https://www.facebook.com.'.\nlt_urls = value #( ).\n\n\" Regular expression to find URLs in the input string\nDATA: lv_regex TYPE text.\nlv_regex = '[a-z]+:\\/\\/(?:[a-zA-Z0-9]|[$-_@.&+]|[!*\\(\\),])+(?:%[0-9a-fA-F][0-9a-fA-F])+'.\n\n\" Find all URLs in the input string\nDATA: lv_match TYPE REF TO if_saw_pattern_match.\nlt_urls = find_all_matches( exporting\n      p_string = lv_string\n      p_regex  = lv_regex ).\n\n\" Print found URLs\nLOOP AT lt_urls INTO DATA(lv_url).\n  WRITE: / lv_url.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a method to print all the prime numbers up to n.",
        "input": "",
        "output": "def print_prime_numbers(n):\n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(num) \n    print(primes)",
        "abap": "REPORT zprint_prime_numbers.\n\nCLASS lcl_print_prime_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      print_prime_numbers IMPORTING VALUE(n) TYPE i.\nENDCLASS.\n\nCLASS lcl_print_prime_numbers IMPLEMENTATION.\n  METHOD print_prime_numbers.\n    DATA: lt_primes TYPE STANDARD TABLE OF i,\n          ls_num   LIKE LINE OF lt_primes.\n\n    LOOP AT RANGE n FROM 2 INTO DATA(ls_range).\n      \" Check if num is prime\n      DATA(is_prime) = abap_true.\n      LOOP AT RANGE ls_range--upper_bound FROM 2 INTO ls_range.\n        IF ( ls_num % ls_range = 0 ).\n          is_prime = abap_false.\n          EXIT.\n        ENDIF.\n      ENDLOOP.\n\n      \" If num is prime, add to list\n      IF is_prime IS INITIAL.\n        APPEND ls_num TO lt_primes.\n      ENDIF.\n    ENDLOOP.\n\n    WRITE: / sy-datum, 'Prime numbers up to', n, ':', lt_primes.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nSTART-OF-SELECTION.\n  lcl_print_prime_numbers=>print_prime_numbers( n = 100 ).\n"
    },
    {
        "instruction": "Write code to create a list of all prime numbers between 2 and 100.",
        "input": "",
        "output": "def find_primes(n): \n    prime_list = [2] \n    for number in range(2, n + 1): \n        is_prime = True\n        for k in range(2, number): \n            if number % k == 0: \n                is_prime = False \n        if is_prime: \n            prime_list.append(number) \n    return prime_list",
        "abap": "REPORT zprimes.\n\nCLASS lcl_primes DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Function to find all prime numbers up to a given number\n      \"! @parameter n <p> Upper limit for finding primes\n      CLASS-METHOD: find_primes IMPORTING p_n TYPE i\n                            RETURNING r_primes TYPE STANDARD TABLE OF i ).\nENDCLASS.\n\nCLASS lcl_primes IMPLEMENTATION.\n  METHOD find_primes.\n    DATA: lt_primes TYPE STANDARD TABLE OF i,\n          lv_number TYPE i,\n          lv_is_prime TYPE abap_bool,\n          lv_k TYPE i.\n\n    \" Initialize the list of primes with the first prime number\n    APPEND 2 TO lt_primes.\n\n    DO p_n - 1 TIMES.\n      lv_number = sy-index + 2. \" Start from 3\n\n      CLEAR: lv_is_prime.\n\n      DO lv_number - 1 TIMES.\n        lv_k = sy-index + 2.\n        IF lv_number MOD lv_k EQ 0.\n          lv_is_prime = abap_true.\n          EXIT.\n        ENDIF.\n      ENDDO.\n\n      IF lv_is_prime <> abap_true.\n        APPEND lv_number TO lt_primes.\n      ENDIF.\n    ENDDO.\n\n    \" Return the list of primes\n    r_primes[] = lt_primes.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lt_primes TYPE STANDARD TABLE OF i.\n\nlt_primes = lcl_primes=>find_primes( n = 10 ).\n\nLOOP AT lt_primes INTO DATA(lv_prime).\n  WRITE lv_prime.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a bash script to list the content of the current directory.",
        "input": "",
        "output": "#!/bin/bash\n\nls",
        "abap": "REPORT zlist_directory.\n\nDATA: lv_output TYPE i.\n\nCALL 'ls' USING ' '. \" List directory (same as ls in bash)\n\n\" Alternatively, you can use the cl_fo_object_repository=>list_directory method\ncl_fo_object_repository=>list_directory(\n  EXPORTING\n    dir_name = ''\n  IMPORTING\n    dir_table = DATA(lt_dir) ).\n\nLOOP AT lt_dir INTO DATA(ls_dir).\n  WRITE: / ls_dir-name.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a SQL query to select the name and address from a given table.",
        "input": "Table: Employee",
        "output": "SELECT name, address FROM Employee",
        "abap": "DATA: lr_table TYPE REF TO data.\nTYPES: BEGIN OF ty_employee,\n          name    TYPE string,\n          address TYPE string,\n        END OF ty_employee.\n\nlr_table = VALUE #( TYPE ty_employee ).\n\nSELECT name address INTO TABLE lr_table\n  FROM zemployee. \" assuming the table is named 'Employee' in the database\n\nLOOP AT lr_table INTO DATA(ls_employee).\n  WRITE: ls_employee-name, ls_employee-address.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a C++ function that finds the frequency of each character in a string and stores in a hashtable.",
        "input": "",
        "output": "#include <iostream>\n#include <unordered_map>\n\nstd::unordered_map<char, int> character_frequency(std::string str)\n{ \n    std::unordered_map<char, int> frequency; \n    for (char c : str) \n        frequency[c]++; \n    return frequency; \n}",
        "abap": "CLASS lcl_character_frequency DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      character_frequency\n        IMPORTING\n          value       TYPE string\n        EXPORTING\n          frequency   TYPE STANDARD TABLE OF ty_entry\n                    WITH EMPTY KEY.\n\n  PRIVATE SECTION.\n    TYPES: BEGIN OF ty_entry,\n             char    TYPE c LENGTH 1,\n             frequency TYPE i,\n           END OF ty_entry.\n\nENDCLASS.\n\nCLASS lcl_character_frequency IMPLEMENTATION.\n  METHOD character_frequency.\n    DATA: lt_frequency TYPE STANDARD TABLE OF ty_entry.\n\n    LOOP AT value INTO DATA(cv).\n      READ TABLE lt_frequency WITH KEY char = cv LINE sy-tabix.\n      IF sy-subrc <> 0.\n        APPEND VALUE #( char  = cv\n                        frequency = 1 ) TO lt_frequency.\n      ELSE.\n        MODIFY TABLE lt_frequency FROM VALUE #( BASE line = lt_frequency[ sy-tabix ]\n                                              frequency = lt_frequency[ sy-tabix ] + 1 ).\n      ENDIF.\n    ENDLOOP.\n\n    frequency = lt_frequency.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a C++ code to find the longest common substring in two strings.",
        "input": "",
        "output": "#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring longestCommonSubstring(const string& s1, const string& s2) \n{ \n    int n1 = s1.length(); \n    int n2 = s2.length(); \n  \n    int maxlen = 0;\n    int endingIndex = n1;\n            \n    int dp[n1 + 1][n2 + 1]; \n  \n    for (int i = 0; i <= n1; i++) { \n        for (int j = 0; j <= n2; j++) { \n            if (i == 0 || j == 0) { \n                dp[i][j] = 0; \n            } else if (s1[i - 1] == s2[j - 1]) { \n                dp[i][j] = dp[i - 1][j - 1] + 1; \n  \n                if (dp[i][j] > maxlen) { \n                    maxlen = dp[i][j]; \n                    endingIndex = i; \n                } \n            } else { \n                dp[i][j] = 0; \n            } \n        } \n    } \n  \n    return s1.substr(endingIndex - maxlen, maxlen); \n}",
        "abap": "CLASS lcl_longest_common_substring DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      longestCommonSubstring\n        IMPORTING\n          iv_s1 TYPE string\n          iv_s2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_longest_common_substring IMPLEMENTATION.\n  METHOD longestCommonSubstring.\n    DATA: lv_n1 TYPE i,\n          lv_n2 TYPE i,\n          lt_dp TYPE STANDARD TABLE OF string,\n          ls_dp LIKE LINE OF lt_dp,\n          lv_maxlen TYPE i,\n          lv_ending_index TYPE i.\n\n    lv_n1 = xstrlen( iv_s1 ).\n    lv_n2 = xstrlen( iv_s2 ).\n\n    lv_maxlen = 0.\n    lv_ending_index = lv_n1.\n\n    DO lv_n1 TIMES.\n      CLEAR: ls_dp.\n      ls_dp-row = 'X'.\n      APPEND ls_dp TO lt_dp.\n\n      IF sy-index > 1.\n        TRANSLATE lt_dp[ sy-index - 2 ] FROM lower TO upper.\n        TRANSLATE iv_s2 FROM lower TO upper.\n        IF iv_s2[ lv_n2 - sy-index + 1 ] = lt_dp[ sy-index - 2 ].\n          \" if the characters match, move diagonally\n          lv_ending_index = lv_n1 - sy-index + 1.\n          MOVE-CORRESPONDING lt_dp[ sy-index - 1 ] TO ls_dp.\n          APPEND ls_dp TO lt_dp.\n        ELSEIF iv_s2+ lv_n2 - sy-index > lt_dp[ sy-index - 1 ].\n          \" if the character in s2 is greater than the one above, move right\n          MOVE-CORRESPONDING lt_dp[ sy-index - 1 ] TO ls_dp.\n          APPEND ls_dp TO lt_dp.\n        ELSE.\n          CLEAR: ls_dp-row.\n          APPEND ls_dp TO lt_dp.\n        ENDIF.\n\n        \" update max_len and ending_index if a longer substring is found\n        IF iv_s2+ lv_n2 - sy-index = lv_maxlen.\n          lv_ending_index = lv_n1 - sy-index + 1.\n          lv_maxlen = iv_s2+ lv_n2 - sy-index.\n        ELSEIF iv_s2+ lv_n2 - sy-index > lv_maxlen.\n          lv_maxlen = iv_s2+ lv_n2 - sy-index.\n          lv_ending_index = lv_n1 - sy-index + 1.\n        ENDIF.\n      ELSE.\n        CLEAR: ls_dp-row.\n        APPEND ls_dp TO lt_dp.\n      ENDIF.\n    ENDDO.\n\n    rv_result = iv_s1[ lv_ending_index - lv_maxlen : lv_maxlen ].\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Design a class in Java that can store student information.",
        "input": "",
        "output": "public class Student {\n  private String name;\n  private int age;\n  private String course;\n\n  public Student(String name, int age, String course) {\n    this.name = name;\n    this.age = age;\n    this.course = course;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getName(){\n    return name;\n  }\n  \n  public void setAge(int age){\n    this.age = age;\n  }\n\n  public int getAge(){\n    return age;\n  }\n  \n  public void setCourse(String course){\n    this.course = course;\n  }\n\n  public String getCourse(){\n    return course;\n  }\n}",
        "abap": "CLASS lcl_student DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ixfr_student.\n\n    METHODS:\n      constructor\n        IMPORTING\n          iv_name   TYPE string\n          iv_age    TYPE i\n          iv_course TYPE string,\n\n      set_name\n        IMPORTING\n          iv_name TYPE string\n        RAISING\n          cx_salv_not_found,\n\n      get_name\n        RETURNING\n          VALUE(rv_name) TYPE string,\n\n      set_age\n        IMPORTING\n          iv_age TYPE i\n        RAISING\n          cx_salv_not_found,\n\n      get_age\n        RETURNING\n          VALUE(rv_age) TYPE i,\n\n      set_course\n        IMPORTING\n          iv_course TYPE string\n        RAISING\n          cx_salv_not_found,\n\n      get_course\n        RETURNING\n          VALUE(rv_course) TYPE string.\n\n  PRIVATE SECTION.\n    DATA: lv_name   TYPE string,\n          lv_age    TYPE i,\n          lv_course TYPE string.\n\nENDCLASS.\n\nCLASS lcl_student IMPLEMENTATION.\n  METHOD if_ixfr_student~student_data.\n    out->write( 'Student Name:' ).\n    out->write( iv_name ).\n    out->new_page ( ).\n    out->write( 'Age:' ).\n    out->write( iv_age ).\n    out->new_page ( ).\n    out->write( 'Course:' ).\n    out->write( iv_course ).\n\n  ENDMETHOD.\n\n  METHOD constructor.\n    lv_name = iv_name.\n    lv_age = iv_age.\n    lv_course = iv_course.\n\n  ENDMETHOD.\n\n  METHOD get_name.\n    rv_name = lv_name.\n\n  ENDMETHOD.\n\n  METHOD set_name\n    RAISING cx_salv_not_found.\n    lv_name = iv_name.\n\n  ENDMETHOD.\n\n  METHOD get_age.\n    rv_age = lv_age.\n\n  ENDMETHOD.\n\n  METHOD set_age\n    RAISING cx_salv_not_found.\n    lv_age = iv_age.\n\n  ENDMETHOD.\n\n  METHOD get_course.\n    rv_course = lv_course.\n\n  ENDMETHOD.\n\n  METHOD set_course\n    RAISING cx_salv_not_found.\n    lv_course = iv_course.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Generate a list that has the all even numbers between 1 and 50, inclusive.",
        "input": "",
        "output": "even_nums_list = [x for x in range(1,51) if x % 2 == 0]",
        "abap": "DATA: lv_numbers TYPE STANDARD TABLE OF i.\n\nLOOP AT RANGE INTO lv_numbers FROM 1 TO 50.\n  IF sy-tabix MOD 2 = 0.\n    INSERT sy-tabix INTO TABLE lv_numbers.\n  ENDIF.\nENDLOOP.\n\nWRITE: / lv_numbers.\n"
    },
    {
        "instruction": "Change the following array so that it orders in ascending order",
        "input": "array = [3, 7, 1, 8, 4]",
        "output": "array.sort()",
        "abap": "`SORT table itab`.\n\nThis sorts the table `itab` in ascending order. \n\nAlternatively, if you want to sort it in descending order:\n\n`SORT table itab DESCENDING`."
    },
    {
        "instruction": "Update the following code to use a while loop instead of a for loop",
        "input": "`# Define an array\narr = [1, 2, 3, 4]\n\n# Iterate over the array and print each element\nfor i in arr:\n    print(i)`",
        "output": "# Define an array\narr = [1, 2, 3, 4]\n\n# Initialize the index\ni = 0\n\n# Iterate over the array and print each element\nwhile i < len(arr):\n    print(arr[i])\n    i += 1",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i VALUE 1,\n      lv_i   TYPE i.\n\n\" Define an array\nlv_arr = value #( 1, 2, 3, 4 ).\n\n\" Initialize the index\nlv_i = 0.\n\n\" Iterate over the array and print each element\nWHILE lv_i < lines( lv_arr ).\n  WRITE: lv_arr[ lv_i ].\n  lv_i = lv_i + 1.\nENDWHILE.\n"
    },
    {
        "instruction": "Write a Python program to split a string on a given character separator.",
        "input": "mystring = \"Hello, World!\"\nseparator = \",\"",
        "output": "def split(mystring, separator):\n    return mystring.split(separator)",
        "abap": "CLASS lcl_string_utility DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      split\n        IMPORTING\n          iv_mystring TYPE string\n          iv_separator TYPE string\n        EXPORTING\n          et_result    TYPE string_table ).\n\nENDCLASS.\n\nCLASS lcl_string_utility IMPLEMENTATION.\n  METHOD split.\n    DATA: lt_split_string TYPE STANDARD TABLE OF string.\n\n    SPLIT mystring AT separator INTO TABLE lt_split_string.\n    et_result = lt_split_string.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python program to print the following pattern.",
        "input": "",
        "output": "for i in range(1,6):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()",
        "abap": "DO n = 1 AT 5.\n  DO j = 1 AT i.\n    WRITE: ' *'.\n  ENDDO.\n  WRITE: /.  \nENDDO.\n"
    },
    {
        "instruction": "Reverse the following String.",
        "input": "String = \"Hello World!\"",
        "output": "rev_string = String[::-1] \nprint(rev_string) # prints \"!dlroW olleH\"",
        "abap": "DATA: lv_string TYPE string.\n\nlv_string = 'Hello World'.\n\nDATA: lv_reversed TYPE string.\nDO 10 TIMES.\n  lv_reversed = lv_reversed && lv_string(1).\n  lv_string = lv_string+1.\nENDDO.\n\nWRITE: / lv_reversed. \" prints \"!dlroW olleH\"\n"
    },
    {
        "instruction": "Generate an array of odd numbers up to and including the number 10.",
        "input": "",
        "output": "let numbers = [1, 3, 5, 7, 9];",
        "abap": "TYPES: BEGIN OF ty_number,\n         value TYPE i,\n       END OF ty_number.\n\nDATA: numbers TYPE STANDARD TABLE OF ty_number.\n\nnumbers = VALUE #( ( 1 )\n                   ( 3 )\n                   ( 5 )\n                   ( 7 )\n                   ( 9 ) ).\n"
    },
    {
        "instruction": "Write a class to represent a 2D point with x and y coordinates.",
        "input": "",
        "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x \n        self.y = y \n   \n    def __str__(self): \n        return \"({0},{1})\".format(self.x, self.y)",
        "abap": "TYPES: BEGIN OF ty_point,\n          x TYPE i,\n          y TYPE i,\n        END OF ty_point.\n\nCLASS zpoint DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create\n        IMPORTING\n          VALUE(iv_x) TYPE i\n          VALUE(iv_y) TYPE i\n        RETURNING\n          VALUE(ro_point) TYPE REF TO zpoint.\n\n    METHODS:\n      string_representation\n        REturning\n          VALUE(rv_string) TYPE string.\nENDCLASS.\n\nCLASS zpoint IMPLEMENTATION.\n  METHOD create.\n    ro_point = NEW #( x = iv_x y = iv_y ).\n  ENDMETHOD.\n\n  METHOD string_representation.\n    rv_string = |({ self->x },{ self->y })|.\n  ENDMETHOD.\nENDCLASS.\n\nCLASS zpoint DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create\n        IMPORTING\n          VALUE(iv_x) TYPE i\n          VALUE(iv_y) TYPE i\n        RETURNING\n          VALUE(ro_point) TYPE REF TO zpoint.\n  PROTECTED SECTION.\n    DATA: x TYPE ty_point-x,\n          y TYPE ty_point-y.\n\n    METHODS:\n      string_representation\n        REturning\n          VALUE(rv_string) TYPE string.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a JavaScript program to replace all the vowels in a given string with '*'.",
        "input": "",
        "output": "function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, '*');\n}",
        "abap": "CLASS zcl_replace_vowels DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      replace_vowels\n        IMPORTING\n          VALUE(iv_str) TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS zcl_replace_vowels IMPLEMENTATION.\n  METHOD replace_vowels.\n    rv_result = REPLACE ALL OCCURRENCES OF REGEX '[aeiou]' IN iv_str WITH '*' OPTIONS MATCH JUNKCASE MODE GLOBALLY.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "How would you determine if a given number is a prime number?",
        "input": "",
        "output": "A prime number is a number that is only divisible by 1 and itself. To check if a given number is a prime number, first use a loop to check all the numbers from 1 to the given number. If any of the numbers evenly divide the given number, then the number is not a prime. Otherwise, the number is a prime number.",
        "abap": "REPORT zprime_checker.\n\nCLASS lcl_prime_checker DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Check if a number is prime\n      \"! @parameter iv_number <number to check>\n      \"!\" @return boolean whether the number is prime or not\n      class-method: is_prime IMPORTING value(iv_number) TYPE i\n                        RETURNING value(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_prime_checker IMPLEMENTATION.\n  METHOD is_prime BY DATABASE PROCEDURE NAME \"check_divisors\".\n\n    DATA:\n      lv_index TYPE sy-index,\n      lv_counter TYPE sy-index.\n\n    IF iv_number = 1.\n      rv_result = abap_true.\n      RETURN.\n    ENDIF.\n\n    DO.\n      lv_counter = lv_counter + 1.\n      IF lv_counter > iv_number.\n        EXIT.\n      ELSEIF sy-dbcode <> 4.\n        CONTINUE. \"if the divisor is not a prime number, skip it\n      ENDIF.\n\n      CALL FUNCTION 'CHECK_DIVISORS'\n        EXPORTING\n          iv_dividend = iv_number\n          iv_divisor  = lv_counter\n        EXCEPTIONS\n          error       = 1\n          OTHERS      = 2\n        IMPORTING\n          ev_remainder = DATA(lv_remainder)\n        CHANGING\n          cv_prime     = DATA(cv_prime).\n\n      IF cv_prime = abap_true AND lv_remainder = 0.\n        rv_result = abap_false.\n        EXIT.\n      ENDIF.\n\n    ENDDO.\n\n    rv_result = abap_true.\n\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! check if a number is prime\n      \"!\" @parameter iv_number <number to check>\n      class-method: main IMPORTING value(iv_number) TYPE i\n                EXPORTING\n                  VALUE(ES_RESULT) TYPE REF TO ty_result.\n\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD main.\n\n    DATA:\n      lo_prime_checker TYPE REF TO lcl_prime_checker,\n      eo_result        TYPE REF TO data,\n      ls_result TYPE ty_result.\n    CREATE OBJECT lo_prime_checker TYPE lcl_prime_checker.\n\n    \"Create a new object of the class that has the method\n    eo_result = lo_prime_checker->is_prime( iv_number ).\n\n    ls_result-prime = e_oresult->bool_value .\n    ls_result-number = iv_number.\n    ES_RESULT = LS_RESULT.\n\n\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: BEGIN OF ty_result,\n         prime TYPE abap_bool,\n         number TYPE i,\n       END OF ty_result.\n\nDATA: ls_result TYPE ty_result.\n\n\nPARAMETERS : p_num TYPE i.\n\nls_result-prime = abap_false.\nls_result-number = p_num.\n\nCALL METHOD lcl_main=>main\n  EXPORTING\n    iv_number   = p_num\n  IMPORTING\n    ES_RESULT   = ls_result.\n\nIF ls_result-prime <> abap_true .\n WRITE:/ 'Number ', ls_result-number, ' is not a prime number'.\nELSE.\n  WRITE:/ 'Number ', ls_result-number , ' is a prime number'.\nENDIF.\n"
    },
    {
        "instruction": "rewrite the following for-loop as a while-loop",
        "input": "for i in range(0, 5):\n    print(i)",
        "output": "\"\"\"\nRewrite the following for-loop as a while-loop\n\"\"\"\n\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1",
        "abap": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1\n"
    },
    {
        "instruction": "Create a Python function to parse a string and remove all special characters.",
        "input": "",
        "output": "import re\n\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)",
        "abap": "CLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_special_chars IMPORTING\n        iv_string TYPE string\n        EXPORTING\n          ev_result TYPE string .\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD remove_special_chars.\n    DATA: lv_pattern TYPE string.\n    lv_pattern = '[^\\w\\s]'.\n    ev_result = cl_abap_char_utilities=>replace_all_replacing( iv_string lv_pattern '' ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Java program to find the largest element in a given array.",
        "input": "",
        "output": "public class Largest { \n  \n    static int getLargest(int[] inputArray){ \n        int largest = inputArray[0]; \n        for(int i = 1; i < inputArray.length; i++){ \n            if(inputArray[i] > largest){ \n                largest = inputArray[i]; \n            } \n        } \n        return largest; \n    } \n      \n    public static void main(String[] args){ \n        int[] arr = {10,4,20,5,89}; \n        System.out.println(\"Largest element in the array is: \"+getLargest(arr)); \n    } \n}",
        "abap": "CLASS lcl_largest DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_largest IMPORTING\n        iv_array TYPE i4[] OPTIONAL\n        RETURNING\n          rv_largest TYPE i4.\nENDCLASS.\n\nCLASS lcl_largest IMPLEMENTATION.\n  METHOD get_largest.\n    DATA: lv_largest TYPE i4,\n          lv_i TYPE i4.\n\n    IF iv_array IS INITIAL.\n      RAISE EXCEPTION type cx_static_check-not_initialized.\n    ENDIF.\n\n    lv_largest = iv_array[ 1 ].\n    DO.\n      lv_i = sy-tabix + 1.\n      WHILE lv_i <= lines( iv_array ).\n        IF iv_array[ lv_i ] > lv_largest.\n          lv_largest = iv_array[ lv_i ].\n        ENDIF.\n        ADD 1 TO lv_i.\n      ENDDO.\n    ENDDO.\n\n    rv_largest = lv_largest.\n\n  ENDMETHOD.\n\nENDCLASS.\n\n\" example usage:\nDATA: lt_array TYPE STANDARD TABLE OF i4,\n      ls_result TYPE i4.\n\nlt_array = VALUE #( ( 10 ) ( 4 ) ( 20 ) ( 5 ) ( 89 ) ).\n\nls_result = lcl_largest=>get_largest( iv_array = lt_array ).\nWRITE: / 'Largest element in the array is:', ls_result.\n"
    },
    {
        "instruction": "Construct an array of objects with the fields \"name\" and \"age\".",
        "input": "",
        "output": "[\n  {\n    \"name\": \"\",\n    \"age\": \n  },\n  {\n    \"name\": \"\",\n    \"age\": \n  },\n  ...\n]",
        "abap": "DATA: lt_data TYPE ty_data.\n\n\" Define a type for the data\nTYPES: BEGIN OF ty_data,\n         name TYPE string,\n         age   TYPE i,\n       END OF ty_data.\n\n\" Fill the internal table with data\nlt_data = VALUE #( ( name = \"John\"\n                       age = 30 )\n                   ( name = \"Jane\"\n                     age = 25 ) ).\n\n\" Print out the data\nLOOP AT lt_data INTO DATA(ls_data).\n  WRITE: / ls_data-name, ls_data-age.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a program to check if a given string is a palindrome",
        "input": "\"racecar\"",
        "output": "\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))",
        "abap": "CLASS zcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome IMPORTING string TYPE string\n                   RETURNING value(result) TYPE abap_bool.\nENDCLASS.\n\nCLASS zcl_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: lv_length TYPE i,\n          lv_half   TYPE i.\n\n    lv_length = strlen( string ).\n    lv_half = lv_length / 2.\n\n    DO lv_half TIMES.\n      IF string+0(1) <> string+lv_length - sy-cline SIZE 1.\n        result = abap_false.\n        EXIT.\n      ENDIF.\n      string = string+1.\n      lv_length = lv_length - 1.\n    ENDDO.\n\n    IF NOT result IS INITIATED.\n      result = abap_true.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a Java program to check for a palindrome.",
        "input": "",
        "output": "public class Palindrome {  \n    public static boolean isPalindrome(String str){ \n        // Pointers pointing to the beginning \n        // and the end of the string \n        int i = 0, j = str.length() - 1; \n  \n        // While there are characters toc compare \n        while (i < j) { \n  \n            // If there is a mismatch \n            if (str.charAt(i) != str.charAt(j)) \n                return false; \n  \n            // Increment first pointer and \n            // decrement the other \n            i++; \n            j--; \n        } \n  \n        // Given string is a palindrome \n        return true; \n    } \n}",
        "abap": "CLASS lcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome IMPORTING\n                         value( iv_str ) TYPE string\n        RETURNING\n          VALUE( rv_result ) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: lv_i TYPE i,\n          lv_j TYPE i.\n\n    IF iv_str IS INITIAL OR iv_str CA '0123456789'. \" check for empty or non-string input\n      rv_result = abap_true.\n      RETURN.\n    ENDIF.\n\n    lv_i = 0.\n    lv_j = strlen( val = iv_str ) - 1.\n\n    WHILE lv_i < lv_j.\n      IF iv_str+lv_i CA '0123456789' <> iv_str+lv_j CA '0123456789'.\n        rv_result = abap_false.\n        RETURN.\n      ENDIF.\n\n      lv_i = lv_i + 1.\n      lv_j = lv_j - 1.\n    ENDDO.\n\n    rv_result = abap_true.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a Node.js function to concatenate two strings.",
        "input": "",
        "output": "function concatenate(str1, str2) {\n  return str1 + str2;\n}\n\nconsole.log(concatenate('Hello', 'World')); //HelloWorld",
        "abap": "CLASS lcl_concatenate DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      concatenate\n        IMPORTING\n          iv_str1 TYPE string\n          iv_str2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_concatenate IMPLEMENTATION.\n  METHOD concatenate.\n    rv_result = |{ iv_str1 }{ iv_str2 }|.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_result TYPE string.\n\n  lv_result = lcl_concatenate=>concatenate( 'Hello' 'World' ).\n  WRITE: / lv_result. \" HelloWorld\n"
    },
    {
        "instruction": "Given an array of integers, write an algorithm to find the first repeating element.",
        "input": "[2, 5, 1, 2, 3, 5]",
        "output": "int findFirstRepeating(int arr[], int n) \n{ \n    unordered_set<int> s; \n  \n    for (int i = 0; i < n; i++) { \n        if (s.find(arr[i]) != s.end()) \n            return arr[i];         \n        s.insert(arr[i]); \n    }  \n  \n    return -1; \n}",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      find_first_repeating\n        IMPORTING\n          value(iv_array) TYPE STANDARD TABLE OF i\n        EXPORTING\n          value(e_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD find_first_repeating.\n    DATA: lt_found TYPE STANDARD TABLE OF i,\n          lv_value TYPE i.\n\n    LOOP AT iv_array INTO DATA(ls_item).\n      IF line_exists( lt_found[ table_line = ls_item ] ) = abap_true.\n        e_result = ls_item.\n        EXIT.\n      ELSE.\n        INSERT ls_item INTO TABLE lt_found.\n      ENDIF.\n    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_array TYPE STANDARD TABLE OF i,\n      lv_value TYPE i.\n\nlv_array = value #( 1 2 3 4 5 6 7 8 9 ).\n\nlcl_test=>find_first_repeating(\n  EXPORTING\n    iv_array = lv_array\n  IMPORTING\n    e_result = lv_value ).\n\nIF sy-dbcnt <> 0.\n  WRITE: / 'The first repeating value is:', lv_value.\nELSE.\n  WRITE: / 'No repeating values found'.\nENDIF.\n"
    },
    {
        "instruction": "Create a program to parse a given string and return a dictionary with all the words and their frequency",
        "input": "\"this is a practice string to learn the parsing of strings\"",
        "output": "\"\"\"\nCreate a program to parse a given string and return a dictionary with all the words and their frequency\n\"\"\"\n\ndef parse_string(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nif __name__ == '__main__':\n    print(parse_string(\"this is a practice string to learn the parsing of strings\"))",
        "abap": "REPORT zword_frequency.\n\nCLASS lcl_word_frequency DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      parse_string IMPORTING\n        p_string TYPE string\n        RETURNING\n          VALUE(ro_word_dict) TYPE ty_word_dict.\nENDCLASS.\n\nCLASS lcl_word_frequency IMPLEMENTATION.\n  TYPES: BEGIN OF ty_word_dict,\n           word     TYPE string,\n           frequency TYPE i,\n         END OF ty_word_dict.\n\n  METHOD parse_string.\n    DATA: lt_words TYPE TABLE OF string,\n          ls_word  LIKE LINE OF lt_words,\n          lo_dict  TYPE REF TO cl_ltfcl_hash_table,\n          lv_value LIKE LINE OF lo_dict->value_table.\n\n    \" Split the input string into individual words\n    SPLIT p_string AT space INTO TABLE lo_dict->value_table.\n\n    \" Create a new hash table to store word frequencies\n    CREATE OBJECT lo_dict.\n    lo_dict->set_multi_valued_key( ).\n\n    LOOP AT lo_dict->value_table INTO ls_word.\n      IF lo_dict->has_value_for_key( ls_word ).\n        lv_value = lo_dict->get_value_for_key( ls_word ).\n        lo_dict->set_value_for_key(\n          ls_word\n          value = lv_value + 1\n        ).\n      ELSE.\n        lo_dict->set_value_for_key( ls_word value = 1 ).\n      ENDIF.\n    ENDLOOP.\n\n    \" Return the word dictionary\n    ro_word_dict = lo_dict.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_word_freq TYPE REF TO lcl_word_frequency,\n        lt_word_dict TYPE ty_word_dict,\n        lv_string   TYPE string.\n\n  \" Create an instance of the word frequency class\n  CREATE OBJECT lo_word_freq.\n\n  \" Set the input string\n  lv_string = \"this is a practice string to learn the parsing of strings\".\n\n  \" Parse the input string and get the word dictionary\n  lt_word_dict = lo_word_freq->parse_string( lv_string ).\n\n  \" Print the word frequencies\n  LOOP AT lt_word_dict INTO DATA(ls_word).\n    WRITE: ls_word-word, ' ', ls_word-frequency.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Create a Python program to extract all unique words from a given sentence.",
        "input": "This sentence contains multiple words.",
        "output": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}",
        "abap": "DATA: lv_sentence TYPE string.\nlv_visited_words TYPE set_of_c.\n\n\" Assume lv_sentence contains the input sentence\nlv_sentence = 'This sentence contains multiple words'. \" example sentence\n\n\" Split the sentence into individual words and store in a set to remove duplicates\nDATA: lt_word_list TYPE TABLE OF string.\nlt_word_list = value #( | { lv_sentence } | ).\n\n\" Create a set of unique words from the list of words\nDATA: ls_unique_words TYPE abap_set.\nls_unique_words = value #( | {\n  <table>\n    <for all elements l_line in lt_word_list >\n      <element> l_line </element>\n    </for all elements>\n  </table>\n| ).\n\n\" Remove duplicates by intersecting the set with an empty set\nDATA: ls_visited_words TYPE abap_set.\nls_visited_words = value #( | { } | ).\nls_unique_words-intersect( ls_visited_words ).\n\nOUT-LS_UNIQUE_WORDS.\n"
    },
    {
        "instruction": "Given a number, create a function that returns a list that contains its divisors.",
        "input": "num = 20",
        "output": "def get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]",
        "abap": "REPORT zget_divisors.\n\nCLASS lcl_get_divisors DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_divisors IMPORTING\n        VALUE(iv_num) TYPE i\n        RETURNING\n          VALUE(rv_divisors) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_get_divisors IMPLEMENTATION.\n  METHOD get_divisors.\n    DATA: lt_divisors TYPE STANDARD TABLE OF i.\n\n    LOOP AT VALUE rsrange FROM 1 TO iv_num INTO DATA(ls_range).\n      IF sy-index = 1 OR ( lv_num MOD ls_range ) = 0 .\n        APPEND ls_range TO lt_divisors.\n      ENDIF.\n    ENDLOOP.\n\n    rv_divisors = lt_divisors.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_num TYPE i VALUE 10,\n      lt_divisors TYPE STANDARD TABLE OF i.\n\nlt_divisors = lcl_get_divisors=>get_divisors( iv_num = lv_num ).\n\nWRITE: / 'Divisors of ', lv_num, ':'.\nLOOP AT lt_divisors INTO DATA(ls_divisor).\n  WRITE: / ls_divisor.\nENDLOOP.\n"
    },
    {
        "instruction": "Using the existing code as a guide, construct a function to validate user input.",
        "input": "username=input(\"Enter your username: \")\npassword=input(\"Enter your password: \")",
        "output": "def validate_input(username, password):\n\tif len(username) < 5 or len(username) > 80:\n\t\treturn False\n\tif len(password) < 8 or len(password) > 16:\n\t\treturn False\n\treturn True",
        "abap": "CLASS lcl_validator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      validate_input IMPORTING\n        username TYPE string\n        password TYPE string\n      EXPORTING\n        value TYPE flag .\nENDCLASS.\n\nCLASS lcl_validator IMPLEMENTATION.\n  METHOD validate_input.\n    DATA: lv_username_length TYPE i,\n          lv_password_length TYPE i.\n\n    lv_username_length = strlen( val = username ).\n    lv_password_length = strlen( val = password ).\n\n    IF lv_username_length < 5 OR lv_username_length > 80.\n      value = abap_false.\n    ELSEIF lv_password_length < 8 OR lv_password_length > 16.\n      value = abap_false.\n    ELSE.\n      value = abap_true.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Generate an array with the first 10 even numbers",
        "input": "",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\nlv_array = VALUE #( ( 2 ) ( 4 ) ( 6 ) ( 8 )\n                     ( 10 ) ( 12 ) ( 14 ) ( 16 )\n                     ( 18 ) ( 20 ) ).\n"
    },
    {
        "instruction": "Create a function that takes in a list of numbers and returns true if the list contains at least one positive number",
        "input": "list_of_numbers = [-2, -5, 0, 3]",
        "output": "def is_positive_number(numbers):\n    for num in numbers:\n        if num > 0:\n            return True\n    return False",
        "abap": "FORM is_positive_number\n  USING\n    p_numbers TYPE STANDARD TABLE OF f.\n\nDATA: lv_positive TYPE abap_bool.\n\nlv_positive = abap_true.\n\nLOOP AT p_numbers INTO DATA(num).\n  IF num <= 0.\n    lv_positive = abap_false.\n    EXIT.\n  ENDIF.\nENDLOOP.\n\nIF lv_positive <> abap_false.\n  WRITE: 'At least one positive number found.'.\nELSE.\n  WRITE: 'No positive numbers found.'.\nENDIF.\n"
    },
    {
        "instruction": "Write a JavaScript code to get the current browser URL.",
        "input": "",
        "output": "var currentURL = window.location.href;\nconsole.log(currentURL);",
        "abap": "DATA: lv_current_url TYPE string.\nlv_current_url = cl_http_client=>get_host( ).\nWRITE: / lv_current_url.\n"
    },
    {
        "instruction": "You should create a Java program to implement a binary search.",
        "input": "",
        "output": "public class BinarySearch \n{ \n    // Returns index of x if it is present in arr[l.. \n    // r], else return -1 \n    public int binarySearch(int arr[], int l, int r, int x) \n    { \n        if (r >= l) { \n            int mid = l + (r - l) / 2; \n  \n            // If the element is present at the \n            // middle itself \n            if (arr[mid] == x) \n                return mid; \n  \n            // If element is smaller than mid, then \n            // it can only be present in left subarray \n            if (arr[mid] > x) \n                return binarySearch(arr, l, mid - 1, x); \n  \n            // Else the element can only be present \n            // in right subarray \n            return binarySearch(arr, mid + 1, r, x); \n        } \n  \n        // We reach here when element is not present \n        // in array \n        return -1; \n    } \n  \n}",
        "abap": "CLASS lcl_binary_search DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      binary_search IMPORTING\n        !arr     TYPE STANDARD TABLE OF i\n        !l       TYPE i\n        !r       TYPE i\n        !x       TYPE i\n        RETURNING\n          value(rval) TYPE i.\nENDCLASS.\n\nCLASS lcl_binary_search IMPLEMENTATION.\n  METHOD binary_search.\n    DATA: mid TYPE i,\n          val TYPE i.\n\n    IF r >= l.\n      mid = l + ( r - l ) / 2.\n\n      IF arr[mid] = x.\n        rval = mid.\n      ELSEIF arr[mid] > x.\n        rval = me->binary_search(\n          EXPORTING\n            arr     = arr\n            l       = l\n            r       = mid - 1\n            x       = x ).\n      ELSE.\n        rval = me->binary_search(\n          EXPORTING\n            arr     = arr\n            l       = mid + 1\n            r       = r\n            x       = x ).\n      ENDIF.\n    ELSE.\n      rval = -1.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Given a list of numbers, print the numbers and their corresponding squares",
        "input": "list = [4, 5, 7, 8]",
        "output": "for num in list:\n    print(f\"{num} --> {num*num}\")",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i.\n\n\" Assuming we have a list of numbers\nlv_list = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\n\nLOOP AT lv_list INTO DATA(num).\n    WRITE: / |{ num } --> { num * num }|.\nENDLOOP.\n"
    },
    {
        "instruction": "Print the following 2D matrix in row-major order.",
        "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]",
        "output": "1 4 7 2 5 8 3 6 9",
        "abap": "That's a sequence of numbers. It appears to be the first nine digits in ascending order, followed by them being shifted three positions to the left.\n\nHowever, I notice that you mentioned translating code into ABAP. Could you please provide me with some code you'd like me to translate?"
    },
    {
        "instruction": "Create a new empty dictionary.",
        "input": "",
        "output": "my_dict = dict()",
        "abap": "`TYPES: ty_dict TYPE STANDARD TABLE OF ty_pair.\n TYPES: BEGIN OF ty_pair,\n         key  TYPE string,\n         value TYPE string,\n       END OF ty_pair.\n\nDATA: lt_dict TYPE ty_dict. \" declare a dictionary\""
    },
    {
        "instruction": "Create a function that takes in two numbers as arguments and returns the product of the two.",
        "input": "",
        "output": "def multiply(x, y):\n    return x*y",
        "abap": "CLASS lcl_multiply DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      multiply\n        IMPORTING\n          value1 TYPE i\n          value2 TYPE i\n        RETURNING\n          VALUE(result) TYPE f.\nENDCLASS.\n\nCLASS lcl_multiply IMPLEMENTATION.\n  METHOD multiply.\n    result = value1 * value2.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lo_multiply TYPE REF TO lcl_multiply,\n      result     TYPE f.\n\nCREATE OBJECT lo_multiply.\nresult = lo_multiply->multiply( x = 5 y = 3 ).\nWRITE: / 'Result:', result.\n"
    },
    {
        "instruction": "Calculate the sum of an array of integers",
        "input": "[3, 5, 7, 9]",
        "output": "24",
        "abap": "I'd be happy to attempt translating a piece of code from another language into ABAP.\n\nHowever, you didn't provide any code. Can you please share the code snippet you would like me to translate, along with the original language it's written in? I'll do my best to translate it into ABAP."
    },
    {
        "instruction": "Change the following code snippet to generate a random integer from 0 to 10.",
        "input": "",
        "output": "import random\n\nrandom_int = random.randint(0, 10)",
        "abap": "DATA: lv_random_int TYPE i.\n\nlv_random_int = sy-datum + sy-uzeit MOD 11.\n\nWRITE: / lv_random_int.\n"
    },
    {
        "instruction": "Create a web page using HTML and CSS that displays a div with some text.",
        "input": "",
        "output": "<html>\n   <head>\n      <title>Div Example</title>\n   </head>\n   <body>\n      <div>Hello, welcome to my website!</div>\n   </body>\n</html>",
        "abap": "REPORT zhello_world.\n\nDATA: lv_text TYPE string VALUE 'Hello, welcome to my website!'.\n\n\nWRITE : lv_text.\n"
    },
    {
        "instruction": "Create a program to display all prime numbers between a given range.",
        "input": "a, b = 2, 8",
        "output": "def prime_numbers_in_range(a, b):\n    \"\"\"\n    Displays all prime numbers between a given range.\n    \"\"\"\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False \n    return True",
        "abap": "REPORT zprime_numbers.\n\nCLASS lcl_prime NUMBER DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_number IMPORTING value( i_num ) TYPE i\n                    RETURNING VALUE( e_result ) TYPE abap_bool,\n      get_primes_in_range IMPORTING it_lower_bound TYPE i\n                          it_upper_bound TYPE i\n                          RETURNING VALUE( et_primes ) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_prime IMPLEMENTATION.\n  METHOD check_number.\n    IF i_num = 1.\n      e_result = abap_false.\n    ELSE.\n      DATA: lv_divisor TYPE i,\n            ls_divisor TYPE i.\n      DO it_upper_bound TIMES.\n        ADD 1 TO lv_divisor.\n        IF MOD i_num ls_divisor = 0.\n          e_result = abap_false.\n          EXIT.\n        ENDIF.\n      ENDDO.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD get_primes_in_range.\n    DATA: lt_divisors TYPE STANDARD TABLE OF i,\n          lv_upper_bound TYPE i,\n          lv_counter TYPE i,\n          ls_divisor TYPE i.\n    DO it_upper_bound TIMES.\n      ADD 1 TO lv_upper_bound.\n      CLEAR: lt_divisors, lv_counter.\n      MOVE-CORRESPONDING it_lower_bound TO lv_counter.\n\n      DO.\n        lv_counter = lv_counter + 1.\n        IF lv_counter > lv_upper_bound.\n          EXIT.\n        ENDIF.\n\n        READ TABLE it_lower_bound INTO ls_divisor INDEX sy-index - 1.\n        IF sy-subrc <> 0 OR ( MOD lv_counter ls_divisor <> 0 ).\n          APPEND lv_counter TO et_primes.\n        ELSE.\n          CLEAR lt_divisors.\n          DO.\n            ADD 1 TO ls_divisor.\n            IF MOD lv_counter ls_divisor = 0.\n              EXIT.\n            ENDIF.\n            READ TABLE it_lower_bound INTO ls_divisor INDEX sy-index - 1.\n            IF sy-subrc <> 0.\n              APPEND lv_counter TO et_primes.\n              EXIT.\n            ENDIF.\n          ENDDO.\n        ENDIF.\n\n      ENDDO.\n\n    ENDDO.\n\n  ENDMETHOD.\n\nCLASS lcl_prime_main DEFINITION INHERITING FROM cl_alv_table_model DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_primes_in_range IMPORTING it_lower_bound TYPE i\n                          it_upper_bound TYPE i\n                          RETURNING VALUE( et_primes ) TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS lcl_prime_main IMPLEMENTATION.\n  METHOD get_primes_in_range.\n    CALL METHOD 'LCL_PRIME=>GET_PRIMES_IN_RANGE' INTO et_primes EXPORTING it_lower_bound = it_lower_bound it_upper_bound = it_upper_bound.\n\n  ENDMETHOD.\n\nSTART-OF-SELECTION.\n  PERFORM get_primes_in_range USING 1 100 CHANGING DATA(lt_prime_numbers) TYPE STANDARD TABLE OF i.\n  LOOP AT lt_prime_numbers INTO DATA(ls_number).\n    WRITE: / ls_number, ' is prime'.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Calculate the factorial of a given number.",
        "input": "The number is 7",
        "output": "5040",
        "abap": "That's a big number. \n\nWould you like me to translate it to ABAP? \n\nIf so, I can write:\n\n`DATA: lv_number TYPE i VALUE 5040.`"
    },
    {
        "instruction": "What is data transformation and how is it used?",
        "input": "",
        "output": "Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more.",
        "abap": "\" Define variables and import data\nDATA: lt_data TYPE STANDARD TABLE OF ty_data.\n\n\" Define the structure for the table\nTYPES: BEGIN OF ty_data,\n  id   TYPE i,  \" example field\n  value TYPE f,\nEND OF ty_data.\n\n\" Data transformation function module to clean and normalize data\nFUNCTION z_transform_data.\n*\" Global Variables:\n*\" - OBJECT\n*\"     Object        Object that can be used to call this method globally.\n*\"     See documentation for more information.\n*\" - EXPORTING\n*\"     Value(         Name      Type General type Description\n*\"                   E_data    TYPE STANDARD TABLE OF ty_data       Cleaned and normalized data\n*\"     )\n  DATA: lv_count TYPE i,\n        lt_outliers TYPE STANDARD TABLE OF REFERENCE DATA ty_data.\n\n\" Remove outliers (e.g., more than 2 standard deviations away from the mean)\n  SORT TABLE lt_data BY value.\n  \" Calculate mean and standard deviation\n  MOVE-CORRESPONDING lt_data TO DATA(lt_sorted).\n  PERFORM calculate_mean USING lt_sorted.\n  PERFORM calculate_std_deviation USING lt_sorted.\n\n  LOOP AT lt_data INTO DATA(ls_data) FROM sy-dbcnt TO sy-sdbcnt.\n    IF ls_data-value > ( l_mean + 2 * l_std_dev ) OR\n       ls_data-value < ( l_mean - 2 * l_std_dev ).\n      APPEND ls_data TO lt_outliers.\n    ENDIF.\n  ENDLOOP.\n\n  DELETE TABLE lt_data INDEX TABLE lt_outliers.\n\n\" Remove duplicates\n  DATA(lt_sorted) = VALUE STANDARD TABLE OF ty_data( ).\n  LOOP AT lt_data INTO ls_data.\n    INSERT ls_data INTO TABLE lt_sorted INDEX sy-tabix.\n    IF sy-tabix > 1 AND ls_data-id <> lt_sorted[sy-tabix-1]-id.\n      DELETE TABLE lt_sorted INDEX sy-tabix-1.\n    ENDIF.\n  ENDLOOP.\n\n\" Create new columns\n  PERFORM create_new_column USING lt_data CHANGING lt_data.\n\n* \" Export cleaned and normalized data\n  E_data = lt_data.\n\nENDFUNCTION.\n\n\" Function module to calculate mean\nFUNCTION calculate_mean\n  USING\n    et_sorted TYPE STANDARD TABLE OF ty_data.\n\n  DATA: l_sum TYPE f,\n        l_count TYPE i.\n\n  LOOP AT et_sorted INTO DATA(ls_data).\n    ADD ls_data-value TO l_sum.\n    ADD 1 TO l_count.\n  ENDLOOP.\n\n  \" Calculate mean and store in class variable\n  MOVE-CORRESPONDING et_sorted TO DATA(lt_sorted).\n  PERFORM round_values USING lt_sorted CHANGING lt_sorted.\n\n  MOVE-CORRESPONDING lt_sorted TO DATA(ls_mean).\n\n  MEAN = ls_mean-value.\n\nENDFUNCTION.\n\n\" Function module to calculate standard deviation\nFUNCTION calculate_std_deviation\n  USING\n    et_sorted TYPE STANDARD TABLE OF ty_data.\n\n  DATA: l_sum TYPE f,\n        l_count TYPE i,\n        l_variance TYPE f,\n        l_stdev TYPE f.\n\n  LOOP AT et_sorted INTO DATA(ls_data).\n    ADD ls_data-value TO l_sum.\n    ADD 1 TO l_count.\n  ENDLOOP.\n\n  \" Calculate mean\n  MOVE-CORRESPONDING et_sorted TO DATA(lt_sorted).\n  PERFORM round_values USING lt_sorted CHANGING lt_sorted.\n\n  MOVE-CORRESPONDING lt_sorted TO DATA(ls_mean).\n\n  \" Calculate variance\n  DO l_count TIMES.\n    l_variance = ( ls_data-value - ls_mean-value ) **2.\n    ADD l_variance TO l_sum.\n  ENDDO.\n\n  \" Calculate standard deviation\n  l_stdev = sqrt( l_sum / l_count ).\n\n  \" Store in class variable\n  MEAN = ls_mean-value.\n  STD_DEV = l_stdev.\n\nENDFUNCTION.\n\n\" Function module to round values to two decimal places\nFUNCTION round_values\n  USING\n    et_sorted TYPE STANDARD TABLE OF ty_data\n  CHANGING\n    et_sorted TYPE STANDARD TABLE OF ty_data.\n\n  LOOP AT et_sorted INTO DATA(ls_data).\n    MOVE-CORRESPONDING ls_data TO ls_data_rounded.\n    ls_data-round_value = ROUND( ls_data-round_value DECIMALS 2 ).\n    INSERT ls_data_rounded INTO TABLE et_sorted INDEX sy-tabix.\n  ENDLOOP.\n\nENDFUNCTION.\n\n\" Function module to create new column\nFUNCTION create_new_column\n  USING\n    it_data TYPE STANDARD TABLE OF ty_data\n  CHANGING\n    it_data TYPE STANDARD TABLE OF ty_data.\n\n  DATA: lv_value TYPE f,\n        ls_data TYPE ty_data.\n\n  LOOP AT it_data INTO ls_data.\n    \" Example calculation to create new column\n    lv_value = ( ls_data-id + 1 ) * ls_data-value.\n    INSERT VALUE #( id = ls_data-id value = lv_value ) INTO it_data INDEX sy-tabix.\n\n  ENDLOOP.\n\nENDFUNCTION.\n"
    },
    {
        "instruction": "Construct a while loop that increments a counter every time a number is divisible by 3.",
        "input": "",
        "output": "int count = 0; \nint i = 0; \nwhile(i < 100)\n{\n     if(i % 3 == 0)\n          count++; \n     i++;\n}",
        "abap": "DATA: lv_count TYPE i VALUE 0,\n      lv_i    TYPE i.\n\nDO.\n  WHILE lv_i LT 100.\n    IF lv_i MOD 3 EQ 0.\n      ADD 1 TO lv_count.\n    ENDIF.\n    ADD 1 TO lv_i.\n  ENDDO.\n"
    },
    {
        "instruction": "Write a JavaScript function to sort an array of integers.",
        "input": "",
        "output": "function sortArray(arr) {\n return arr.sort(function(a, b) {\n  return a - b;\n });\n}",
        "abap": "CLASS lcl_sort_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_array\n        IMPORTING\n          iv_arr TYPE STANDARD TABLE OF i4\n        RETURNING\n          VALUE(rv_sorted) TYPE STANDARD TABLE OF i4.\nENDCLASS.\n\nCLASS lcl_sort_array IMPLEMENTATION.\n  METHOD sort_array.\n    SORT iv_arr.\n    rv_sorted = iv_arr.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_arr TYPE STANDARD TABLE OF i4.\n\n\" Example usage:\nlt_arr = value #( 3 1 2 4 5 ).\n\nrv_sorted = lcl_sort_array=>sort_array( lt_arr ).\nWRITE: / 'Sorted array:'.\nLOOP AT rv_sorted INTO DATA(ls_element).\n  WRITE ls_element.\nENDLOOP.\n"
    },
    {
        "instruction": "You are given two strings. Write a function that checks whether the two strings are an anagram or not.",
        "input": "\"listen\", \"silent\"",
        "output": "def is_anagram(str1, str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  if sorted(str1) == sorted(str2):\n    return True\n  else:\n    return False\n\nprint(is_anagram('listen', 'silent'))",
        "abap": "REPORT zanagram_check.\n\nCLASS lcl_anagram DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_anagram\n        IMPORTING\n          str1 TYPE string\n          str2 TYPE string\n        RETURNING\n          VALUE(rv_boolean) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_anagram IMPLEMENTATION.\n  METHOD is_anagram.\n    \" convert strings to lowercase\n    str1 = upper(str1).\n    str2 = upper(str2).\n\n    \" sort characters in each string\n    DATA: lv_sorted_str1 TYPE string,\n          lv_sorted_str2 TYPE string.\n    CALL FUNCTION 'SORT_STRING'\n      EXPORTING\n        value  = str1\n      IMPORTING\n        result = lv_sorted_str1.\n\n    CALL FUNCTION 'SORT_STRING'\n      EXPORTING\n        value  = str2\n      IMPORTING\n        result = lv_sorted_str2.\n\n    \" compare sorted strings\n    IF lv_sorted_str1 = lv_sorted_str2.\n      rv_boolean = abap_true.\n    ELSE.\n      rv_boolean = abap_false.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_anagram TYPE REF TO lcl_anagram,\n        lr_result  TYPE REF TO data.\n\n  CREATE OBJECT lo_anagram.\n  lo_anagram->is_anagram( 'LISTEN' = 'SILENT' ). \" bind input parameters\n  IF lo_anagram->mv_boolean EQ abap_true.\n    WRITE: / 'True'.\n  ELSE.\n    WRITE: / 'False'.\n  ENDIF.\n"
    },
    {
        "instruction": "Compare and contrast  two sorting algorithms: Bubble sort and Quick sort.",
        "input": "",
        "output": "Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a \"pivot\" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient.",
        "abap": "REPORT zbubble_sort.\n\nCLASS lcl_bubble_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort\n        IMPORTING\n          it_data TYPE standard table OF i\n        EXPORTING\n          et_sorted TYPE standard TABLE OF i.\nENDCLASS.\n\nCLASS lcl_bubble_sort IMPLEMENTATION.\n  METHOD sort.\n    DATA: lv_i TYPE i,\n          lv_j TYPE i,\n          lv_swap TYPE abap_bool.\n\n    WHILE sy-cucol < lines( it_data ).\n\n      DO sy-cucol TIMES.\n        lv_i = sy-index - 1.\n        lv_j = sy-index.\n        WHILE lv_j <= lines( it_data ).\n          IF it_data[ lv_i ] > it_data[ lv_j ] .\n            DATA(lv_temp) = it_data[ lv_i ].\n            it_data[ lv_i ] = it_data[ lv_j ].\n            it_data[ lv_j ] = lv_temp.\n            lv_swap = abap_true.\n          ENDIF.\n          lv_j = lv_j + 1.\n        ENDDO.\n\n        IF NOT lv_swap.\n          EXIT.\n        ENDIF.\n\n      ENDDO.\n\n      et_sorted = it_data.\n    ENDDO.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Create a binary search tree in JavaScript.",
        "input": "",
        "output": "class Node { \n  constructor(data) \n  { \n    this.data = data; \n    this.left = null; \n    this.right = null; \n  } \n} \n  \nclass BinarySearchTree { \n  constructor() \n  { \n    this.root = null; \n  } \n\n  insert(data) \n  { \n    let newNode = new Node(data); \n    if(this.root === null) \n    {\n      this.root = newNode; \n    }\n\n    else\n    { \n      this.insertNode(this.root, newNode);\n    } \n  }\n  \n  insertNode(node, newNode) \n  { \n    if(newNode.data < node.data) \n    { \n      if(node.left === null) \n      { \n        node.left = newNode; \n      } else { \n        this.insertNode(node.left, newNode); \n      } \n    } \n    else { \n      if(node.right === null) \n      { \n        node.right = newNode; \n      } else { \n        this.insertNode(node.right,newNode); \n      } \n    } \n  } \n}",
        "abap": "\" Define an interface for our Node class\nINTERFACE zcl_tree_node\n  PUBLIC.\n  DATA: data TYPE i,\n        left  TYPE REF TO zcl_tree_node,\n        right  TYPE REF TO zcl_tree_node.\nENDINTERFACE.\n\nCLASS lcl_binary_search_tree DEFINITION\n  INHERITING FROM cl_abap_object_model\n  FINAL\n  CREATE PUBLIC .\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" Create a new root node for the binary search tree\n      create_root\n        RETURNING VALUE(ro_node) TYPE REF TO zcl_tree_node,\n      \n      \" Insert data into the binary search tree\n      insert_data\n        IMPORTING\n          iv_data   TYPE i\n        RETURNING\n          value(rv_node) TYPE REF TO zcl_tree_node.\n  PRIVATE SECTION.\n    DATA: ro_root TYPE REF TO zcl_tree_node.\n\n    METHODS:\n      _insert_data\n        CHANGING\n          cv_node TYPE REF TO zcl_tree_node,\n        IMPORTING\n          iv_data TYPE i,\n      \n      insert_node\n        CHANGING\n          cv_node TYPE REF TO zcl_tree_node,\n        IMPORTING\n          iv_left  TYPE REF TO zcl_tree_node,\n          iv_right TYPE REF TO zcl_tree_node.\nENDCLASS.\n\nCLASS lcl_binary_search_tree IMPLEMENTATION\n  INHERITING FROM cl_abap_object_model\n  FINAL .\n  METHOD create_root.\n    DATA: lo_node TYPE REF TO zcl_tree_node.\n\n    CREATE OBJECT lo_node\n      EXPORTING\n        data = iv_data.\n    ro_root = lo_node.\n  ENDMETHOD.\n\n  METHOD insert_data.\n    DATA: lv_node TYPE REF TO zcl_tree_node,\n          li_left TYPE REF TO zcl_tree_node,\n          li_right TYPE REF TO zcl_tree_node.\n\n    CREATE OBJECT lv_node\n      EXPORTING\n        data = iv_data.\n\n    IF ro_root IS NOT BOUND.\n      ro_root = lv_node.\n    ELSE.\n      CALL METHOD _insert_data\n        CHANGING\n          cv_node = ro_root\n        IMPORTING\n          iv_data = iv_data.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD insert_node.\n    DATA: lv_left TYPE REF TO zcl_tree_node,\n          lv_right TYPE REF TO zcl_tree_node.\n\n    IF cv_node->left IS BOUND.\n      CALL METHOD insert_node\n        CHANGING\n          cv_node = cv_node-left\n        IMPORTING\n          iv_left  = li_left\n          iv_right = li_right.\n    ELSE.\n      cv_node->left = li_left.\n      cv_node->right = li_right.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD _insert_data.\n    IF cv_node IS BOUND.\n      IF cv_node->data < iv_data.\n        CALL METHOD insert_node\n          CHANGING\n            cv_node = cv_node-left\n          IMPORTING\n            iv_left  = cv_node\n            iv_right = li_right.\n      ELSEIF cv_node->data > iv_data.\n        CALL METHOD insert_node\n          CHANGING\n            cv_node = cv_node-right\n          IMPORTING\n            iv_left  = li_left\n            iv_right = cv_node.\n      ENDIF.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write code to find the intersection of two sorted lists",
        "input": "list1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]",
        "output": "def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))",
        "abap": "TYPES: BEGIN OF ty_elem,\n          value TYPE i,\n        END OF ty_elem.\n\nDATA: it_list1 TYPE STANDARD TABLE OF ty_elem,\n      it_list2 TYPE STANDARD TABLE OF ty_elem,\n      it_intersection TYPE STANDARD TABLE OF ty_elem.\n\nINITIALIZATION.\nit_list1 = VALUE #( ( 1 ) ( 3 ) ( 4 ) ( 6 ) ).\nit_list2 = VALUE #( ( 1 ) ( 2 ) ( 5 ) ( 6 ) ).\n\nSTART-OF-SELECTION.\n  DATA: lv_p1 TYPE i,\n        lv_p2 TYPE i.\n\n  lv_p1 = 0.\n  lv_p2 = 0.\n\n  WHILE lv_p1 < lines( it_list1 ).\n    IF it_list1[ lv_p1 ] = it_list2[ lv_p2 ].\n      APPEND VALUE #( value = it_list1[ lv_p1 ] ) TO it_intersection.\n      lv_p1 = lv_p1 + 1.\n      lv_p2 = lv_p2 + 1.\n    ELSEIF it_list1[ lv_p1 ] < it_list2[ lv_p2 ].\n      lv_p1 = lv_p1 + 1.\n    ELSE.\n      lv_p2 = lv_p2 + 1.\n    ENDIF.\n\n  ENDDO.\n\n  WRITE: / it_intersection.\n"
    },
    {
        "instruction": "Softmax a list of numbers and then sum the output.",
        "input": "[1, 2, 3]",
        "output": "def softmax(arr): \n    a = np.exp(arr)\n    return a / np.sum(a) \ndef sum_softmax(arr): \n    return np.sum(softmax(arr))",
        "abap": "CLASS lcl_softmax DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \"Compute softmax of an array\n      compute_softmax\n        IMPORTING\n          iv_arr TYPE STANDARD TABLE OF f DECIMAL DIGITS 10,   \" Input array\n        EXPORTING\n          ev_result TYPE STANDARD TABLE OF f DECIMAL DIGITS 10. \" Result array\n\nCLASS lcl_softmax IMPLEMENTATION.\n  METHOD compute_softmax.\n    DATA: lt_exp TYPE STANDARD TABLE OF f DECIMAL DIGITS 10,\n          lv_sum  TYPE f DECIMAL DIGITS 10.\n\n    \" Exponentiate the input array\n    LOOP AT iv_arr INTO DATA(ls_tmp).\n      APPEND ls_tmp * exp( 1 ) TO lt_exp.\n    ENDLOOP.\n\n    \" Compute sum of exponentials\n    MOVE-CORRESPONDING iv_arr TO lv_sum.\n    lv_sum = reduce <fs> FOR fs IN it_exp TYPE f DECIMAL DIGITS 10 INTO fs WHERE sy-tabix IS SUPPLIED = ls_tmp.\n\n    \" Normalize the array to get softmax\n    LOOP AT iv_arr INTO DATA(ls_result).\n      ls_result = ls_tmp / lv_sum.\n      APPEND ls_result TO ev_result.\n    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a JavaScript code to valid a password based on the following rules:",
        "input": "",
        "output": "function validatePassword(password) {\n  // Minimum 8 characters, one uppercase letter, one lowercase letter, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/;\n  if (password.match(re)) {\n    return true;\n  }\n  return false;\n}",
        "abap": "CLASS zcl_password_validator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      validate_password\n        IMPORTING\n          VALUE(iv_password) TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS zcl_password_validator IMPLEMENTATION.\n  METHOD validate_password.\n    DATA: lv_regex TYPE string,\n          lv_matches TYPE i.\n\n    \" Minimum 8 characters, one uppercase letter, one lowercase letter, one number, and one special character\n    lv_regex = '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})'.\n\n    TRY.\n        CALL FUNCTION 'CHECK_PATTERN_IN_STRING'\n          EXPORTING\n            pat             = lv_regex\n            string          = iv_password\n            match_count_out = lv_matches.\n\n        IF lv_matches > 0.\n          rv_result = abap_true.\n        ELSE.\n          rv_result = abap_false.\n        ENDIF.\n      CATCH CX_NO_CHECK_PATTERN_FOUND.\n        MESSAGE 'Error: No check pattern found' TYPE 'E'.\n    ENDTRY.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lr_validator TYPE REF TO zcl_password_validator,\n       lv_password  TYPE string VALUE 'Password123!'.\n\n\nlr_validator = NEW #( ).\nrv_result = lr_validator->validate_password( iv_password = lv_password ).\n\nIF rv_result = abap_true.\n  WRITE: / 'Valid password'.\nELSE.\n  WRITE: / 'Invalid password'.\nENDIF.\n"
    },
    {
        "instruction": "Correct the following HTML code to remove mistakes and indentation errors",
        "input": "`<html><head><title>My Site</title></head>\n <body>\n   <h1>Welcome!</h1><p>My website\n </body>\n </html>`",
        "output": "<html>\n  <head>\n    <title>My Site</title>\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n    <p>My website</p>\n  </body>\n</html>",
        "abap": "REPORT zhello_world.\n\nCLASS lcl_hello_world DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main\n        IMPORTING\n          !\n        EXPORTING\n          !\n        RAISING\n          !\n        RETURNS\n          TYPE string.\nENDCLASS.\n\nCLASS lcl_hello_world IMPLEMENTATION.\n  METHOD main.\n    DATA: lv_string TYPE string.\n\n    lv_string = 'Welcome! My website'.\n    WRITE : lv_string.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-PROGRAM.\n  lcl_hello_world=>main( ).\n"
    },
    {
        "instruction": "Use try-except statements to detect and handle exceptions in the code.",
        "input": "for i in range(n):\n    x = 1/i",
        "output": "try:\n    for i in range(n):\n        x = 1/i\nexcept ZeroDivisionError:\n    print(\"Zero division error encountered!\")",
        "abap": "DATA: lv_n TYPE i.\n\nlv_n = 'n'. \" Hier sollte der Wert von n eingegeben werden\n\nDO.\n  lv_i = sy-index - 1. \" Die Schleifvariable wird nicht explizit deklariert, daher ist sie mit sy-index zu ermitteln\n  TRY.\n      DATA: lv_x TYPE f VALUE '1 / ' && lv_i.\n\n    CATCH cx_sy_zerodiv.\n      WRITE: / 'Division durch Null!'.\n\n      EXIT.\n  ENDTRY.\nENDDO.\n"
    },
    {
        "instruction": "Write code that removes spaces from a given string.",
        "input": "string = \" A B C D \"",
        "output": "def remove_spaces(string): \n    return \"\".join(string.split())",
        "abap": "CLASS lcl_string_util DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Removes spaces from a given string\n      \"! @param <string_to_process> Input string to process\n      \"! @return Processed string without leading/trailing spaces\n      METHOD remove_spaces\n        IMPORTING\n          VALUE( iv_string ) TYPE string\n        RETURNING\n          VALUE( rv_result   ) TYPE string.\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_string_util IMPLEMENTATION.\n  METHOD remove_spaces.\n    DATA: lv_temp TYPE string.\n\n    \" Remove leading and trailing spaces from the input string\n    TRANSLATE iv_string TO UPPER CASE.\n    TRANSLATE iv_string WITHOUT OUT-OF-PLACE REPLACEMENTS.\n    rv_result = iv_string.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Please write a program to create a JavaScript function that is used to validate an email address.",
        "input": "",
        "output": "// Function to validate email address \nfunction validateEmail(email) {\n  var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; \n  \n  if (pattern.test(email)) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "abap": "CLASS lcl_email_validator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      validate_email\n        IMPORTING\n          value( i_email ) TYPE string\n        EXPORTING\n          result TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_email_validator IMPLEMENTATION.\n  METHOD validate_email.\n    DATA: lv_pattern TYPE string.\n\n    lv_pattern = '^(([^<>()[\\\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$'.\n\n    IF matches( val = lv_pattern pattern = lv_pattern submatch = i_email ).\n      result = abap_true.\n    ELSE.\n      result = abap_false.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Normalize a given array such that it adds up to 1.",
        "input": "[3, 0, 9, 5]",
        "output": "[0.15, 0.0, 0.45, 0.3]",
        "abap": "DATA: lt_numbers TYPE STANDARD TABLE OF f.\n\nlt_numbers = VALUE #( ( 0.15 )\n                       ( 0.00 )\n                       ( 0.45 )\n                       ( 0.30 ) ).\n"
    },
    {
        "instruction": "Create an HTML form with two input boxes and a submit button.",
        "input": "",
        "output": "<form>\n   <label>Name: </label>\n   <input type=\"text\" name=\"name\"><br>\n   <label>Age: </label>\n   <input type=\"number\" name=\"age\"><br>\n   <input type=\"submit\" value=\"Submit\">\n </form>",
        "abap": "DATA: lv_name TYPE string,\n      lv_age  TYPE i.\n\nDATA: ls_form TYPE ty_form.\n\nls_form-name = 'Name'.\nls_form-age = ''.\nAPPEND ls_form TO data(lt_form).\n\nFORM submit FORM.\n  DATA: lr_form TYPE REF TO cl_abap_fortran_input_type_form,\n        ls_data TYPE ty_form.\n\n  lr_form = NEW cl_abap_fortran_input_type_form( i_form = lt_form ).\n\n  lv_name = lr_form->read_string( name = 'name' ).\n  lv_age = lr_form->read_number( name = 'age' ).\n\n  WRITE: / 'Name:', lv_name.\n  WRITE: / 'Age:', lv_age.\n\nENDFORM.\n\nTYPES: BEGIN OF ty_form,\n         name TYPE string,\n         age  TYPE i,\n       END OF ty_form.\n\nDATA: lt_form TYPE TABLE OF ty_form,\n      ls_form LIKE LINE OF lt_form.\n"
    },
    {
        "instruction": "Obtain the type of the data in the given code.",
        "input": "let number = 10;",
        "output": "number is of type number.",
        "abap": "A simple one!\n\nIn ABAP, this would be translated to:\n\n`DATA: lv_number TYPE i.`\n\nWhere `lv_number` is a variable named \"number\" of type integer (`i`). \n\nHowever, if you are talking about the more modern ABAP syntax with data types like `ty_number = 'N'`, it would be:\n\n`DATA: ty_number TYPE 'N'.`"
    },
    {
        "instruction": "Create a function in Python for reversing a list.",
        "input": "my_list = [1,2,3,4,5]",
        "output": "def reverse_list (my_list):\n  return my_list[::-1]\n  \nreverse_list(my_list)",
        "abap": "CLASS zcl_reverse_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_list\n        IMPORTING\n          !my_list TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(reverse) TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS zcl_reverse_list IMPLEMENTATION.\n  METHOD reverse_list.\n    DATA: lv_index TYPE i,\n          ls_data LIKE LINE OF my_list.\n\n    \" Create an empty table to hold the reversed list\n    DATA: lt_reversed TYPE STANDARD TABLE OF i.\n\n    \" Reverse the list using a loop\n    DO.\n      WHILE sy-index <= lines( my_list ).\n        ADD 1 TO lv_index.\n        DELETE my_list INDEX sy-index.\n        APPEND my_list[lv_index] TO lt_reversed.\n      ENDDO.\n      UNTIL sy-index > lines( my_list ).\n\n    \" Return the reversed list\n    reverse = lt_reversed.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: my_list TYPE STANDARD TABLE OF i,\n       reverse TYPE STANDARD TABLE OF i.\n\nmy_list = VALUE #( (1) (2) (3) (4) (5) ).\nreverse_list( EXPORTING my_list  = my_list\n                        IMPORTING reverse = DATA(rev_list) ).\n\nWRITE: / 'Original List:'.\nLOOP AT my_list INTO DATA(ls_data).\n  WRITE ls_data.\nENDLOOP.\n\nWRITE:/ .\n\nWRITE: / 'Reversed List:'.\nLOOP AT rev_list INTO ls_data.\n  WRITE ls_data.\nENDLOOP.\n"
    },
    {
        "instruction": "Design a program to find the intersection of two given arrays.",
        "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]",
        "output": "def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst",
        "abap": "REPORT zintersection.\n\nCLASS lcl_intersection DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      intersection\n        IMPORTING\n          !iv_list_one TYPE STANDARD TABLE OF string\n          !iv_list_two TYPE STANDARD TABLE OF string\n        RETURNING\n          VALUE(rv_result) TYPE STANDARD TABLE OF string.\nENDCLASS.\n\nCLASS lcl_intersection IMPLEMENTATION.\n  METHOD intersection.\n    DATA: lt_result TYPE STANDARD TABLE OF string.\n\n    LOOP AT iv_list_one INTO DATA(ls_one).\n      READ TABLE iv_list_two WITH KEY table_line = ls_one TRANSPORTING NO FIELDS INTO DATA(ls_two).\n      IF sy-subrc <> 0.\n        CONTINUE.\n      ENDIF.\n\n      INSERT ls_one INTO TABLE lt_result.\n    ENDLOOP.\n\n    rv_result = lt_result.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  TYPES: BEGIN OF ty_string_table,\n           string TYPE string,\n         END OF ty_string_table.\n\n  DATA:\n    lt_list_one TYPE STANDARD TABLE OF ty_string_table,\n    lt_list_two TYPE STANDARD TABLE OF ty_string_table,\n    lt_result   TYPE STANDARD TABLE OF ty_string_table.\n\n  \" Initialize the input lists\n  APPEND VALUE #( string = 'apple' ) TO lt_list_one.\n  APPEND VALUE #( string = 'banana' ) TO lt_list_one.\n  APPEND VALUE #( string = 'orange' ) TO lt_list_two.\n\n  \" Perform intersection operation\n  lt_result = lcl_intersection=>intersection( lt_list_one  = lt_list_one\n                                              lt_list_two = lt_list_two ).\n\n  \" Print the result\n  WRITE: / 'Intersection Result:'.\n  LOOP AT lt_result INTO DATA(ls_result).\n    WRITE: / ls_result-string.\n  ENDLOOP.\n"
    },
    {
        "instruction": "What is the correct syntax for an infinite loop in C++?",
        "input": "",
        "output": "while (true) {\n    // Code to run\n}",
        "abap": "WHILE wA TRUE.\n  \" Code to run\nENDWHILE.\n"
    },
    {
        "instruction": "Create a JavaScript class that returns the area and circumference of a circle when given the radius.",
        "input": "",
        "output": "class Circle {\n  constructor(radius) {\n    this._radius = radius;\n  }\n \n  get area() {\n    return Math.PI * this._radius * this._radius;\n  }\n \n  get circumference() {\n    return 2 * Math.PI * this._radius;\n  }\n}",
        "abap": "CLASS zcl_circle DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_rap_object.\n    METHODS:\n      constructor IMPORTING radius TYPE i,\n      get_area RETURNING VALUE(area) TYPE f,\n      get_circumference RETURNING VALUE(circumference) TYPE f.\nENDCLASS.\n\nCLASS zcl_circle IMPLEMENTATION.\n  METHOD constructor.\n    me->radius = radius.\n  ENDMETHOD.\n\n  METHOD get_area.\n    area = pi * radius * radius.\n  ENDMETHOD.\n\n  METHOD get_circumference.\n    circumference = 2 * pi * radius.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Parse the string \"Hello[1]World[4]123[3]\" into a list.",
        "input": "string = \"Hello[1]World[4]123[3]\"",
        "output": "my_list = string.split('[')\nmy_list = [item.replace(']', '') for item in my_list]\nmy_list = [int(item) for item in my_list[1::2]]",
        "abap": "DATA: lv_string TYPE string,\n      lt_list   TYPE STANDARD TABLE OF i.\n\n\" Assuming lv_string contains the input string\nlv_string = '1]2]3]4].\n\n\" Remove all occurrences of ']'\nREPLACE ALL OCCURRENCES OF '[' IN lv_string WITH ''.\nREPLACE ALL OCCURRENCES OF ']' WITH ''.\n\n\" Split the string into a table and remove empty lines\nSPLIT lv_string AT space INTO TABLE lt_list.\nDELETE lt_list INDEX 1. \" Remove the first line (empty)\n\n\" Convert each item to integer and only keep every second item\nDO.\n  READ TABLE lt_list TRANSPORTING NO FIELDS WITH KEY sy-index MOD 2 INTO DATA(lv_item).\n  IF sy-subrc <> 0.\n    EXIT.\n  ENDIF.\n  APPEND val = lv_item TO lt_list.\nENDDO.\n\n\" Display the resulting list\nWRITE: / 'Result:'.\nLOOP AT lt_list INTO DATA(lv_value).\n  WRITE: / lv_value.\nENDLOOP.\n"
    },
    {
        "instruction": "What is the purpose of the \"break\" keyword in C language?",
        "input": "",
        "output": "The \"break\" keyword is used to immediately break out of a loop in the C programming language. It can also be used to break out of a switch statement. It is used to terminate a loop or switch statement and transfer program control to the next statement after the loop or switch.",
        "abap": "DO...ENDDO:\nLOOP AT ... UNTIL sy-subrc = 0.\n    ...\nENDLOOP.\n\nIF cond THEN\n    EXIT.\nENDIF.\n\nCASE val.\n    WHEN val1 | val2.\n        IF cond1 THEN\n            EXIT.\n        ELSEIF cond2 THEN\n            EXIT.\n        ENDIF.\n    ENDCASE.\n\nCASE val.\n    WHEN val3.\n        EXIT.\n    ENDCASE.\n"
    },
    {
        "instruction": "Write C++ code to find the maximum subarray sum",
        "input": "",
        "output": "int maxSubarraySum(int arr[], int n) { \n    int max_so_far = 0, max_ending_here = 0; \n  \n    for (int i = 0; i < n; i++) { \n        max_ending_here = max_ending_here + arr[i]; \n        if (max_so_far < max_ending_here) \n            max_so_far = max_ending_here; \n  \n        if (max_ending_here < 0) \n            max_ending_here = 0; \n    } \n    return max_so_far; \n}",
        "abap": "REPORT zmax_subarray.\n\nCLASS lcl_max_subarray DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" calculate maximum subarray sum\n      max_subarray_sum IMPORTING\n        arr     TYPE STANDARD TABLE OF i\n        n       TYPE i\n        RETURNING\n          VALUE(result) TYPE i.\nENDCLASS.\n\nCLASS lcl_max_subarray IMPLEMENTATION.\n  METHOD max_subarray_sum.\n    DATA: lv_max_so_far TYPE i,\n          lv_max_ending_here TYPE i.\n\n    DO n TIMES.\n      lv_max_ending_here = lv_max_ending_here + arr sy-index - sy-index + 1.\n      IF lv_max_so_far < lv_max_ending_here.\n        lv_max_so_far = lv_max_ending_here.\n      ENDIF.\n      \n      IF lv_max_ending_here < 0.\n        lv_max_ending_here = 0.\n      ENDIF.\n    ENDDO.\n\n    result = lv_max_so_far.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_subarray TYPE REF TO lcl_max_subarray,\n      arr TYPE STANDARD TABLE OF i,\n      n TYPE i,\n      result TYPE i.\n\nCREATE OBJECT lo_subarray.\n\nn = 5.\narr = VALUE #( ( 3 ) ( -4 ) ( 2 ) ( 1 ) (-6) ).\n\nresult = lo_subarray->max_subarray_sum( arr = arr n = n ).\nWRITE: / 'Maximum subarray sum:', result.\n"
    },
    {
        "instruction": "Write a SQL query to display all products in the database which have not been sold yet.",
        "input": "",
        "output": "SELECT * FROM Products WHERE product_id NOT IN (SELECT product_id FROM Sales);",
        "abap": "DATA: lt_products TYPE STANDARD TABLE OF ty_product.\nTYPES: BEGIN OF type_product,\n         product_id   TYPE i,\n       END OF type_product.\n\nSELECT *\n  INTO CORRESPONDING FIELDS OF TABLE lt_products\n  FROM products.\n\nDELETE lt_products WHERE product_id IN (\n  SELECT product_id FROM sales ).\n"
    },
    {
        "instruction": "Complete the following code to shuffle an array of elements.",
        "input": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):",
        "output": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):  \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i+1)\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr",
        "abap": "CLASS lcl_shuffler DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      shuffle\n        IMPORTING\n          !iv_arr TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_arr) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_shuffler IMPLEMENTATION.\n  METHOD shuffle.\n    DATA: lv_index TYPE i,\n          lv_rand TYPE i.\n\n    DO.\n      lv_index = sy-index - 1.\n      IF lv_index < 0.\n        EXIT.\n      ENDIF.\n\n      lv_rand = val_2 Randolph( i = 0\n                              j = lv_index + 1 ).\n\n      PERFORM swap USING: iv_arr[ lv_index ]\n                       iv_arr[ lv_rand ].\n    ENDDO.\n\n    \" Convert internal table to standard table\n    rv_arr[] = iv_arr[].\n  ENDMETHOD.\n\nFORM swap USING:\n  iv_first TYPE i\n  iv_second TYPE i.\n  DATA: lv_temp TYPE i.\n\n  lv_temp = iv_first.\n  iv_first = iv_second.\n  iv_second = lv_temp.\n\nENDFORM.\n"
    },
    {
        "instruction": "Debug the following code to make it compile properly.",
        "input": "def addNumbers(num1, num2)\n  return num1 + num2",
        "output": "def addNumbers(num1, num2):\n  return num1 + num2",
        "abap": "CLASS lcl_add_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      add_numbers\n        IMPORTING\n          iv_num1 TYPE i\n          iv_num2 TYPE i\n        EXPORTING\n          ev_result TYPE i.\nENDCLASS.\n\nCLASS lcl_add_numbers IMPLEMENTATION.\n  METHOD add_numbers.\n    DATA: lv_result TYPE i.\n\n    lv_result = iv_num1 + iv_num2.\n    ev_result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a JavaScript object to represent a person's name and age.",
        "input": "",
        "output": "let person = {\n  name: \"John Doe\",\n  age: 25\n};",
        "abap": "TYPES: BEGIN OF ty_person,\n  name TYPE string,\n  age   TYPE i,\nEND OF ty_person.\n\nDATA: ls_person TYPE ty_person.\n\nls_person-name = 'John Doe'.\nls_person-age = 25.\n"
    },
    {
        "instruction": "Construct an if-else statement that returns \u2018even\u2019 if the given number is even and \u2018odd\u2019 if the given number is odd.",
        "input": "",
        "output": "if n % 2 == 0:\n    return 'even'\nelse:\n    return 'odd'",
        "abap": "DATA: lv_n TYPE i.\n\nlv_n = n.\nIF lv_n MOD 2 EQ 0.\n  RETURN 'even'.\nELSE.\n  RETURN 'odd'.\nENDIF.\n"
    },
    {
        "instruction": "Describe how to use the following code to sort an array in ascending order.",
        "input": "function bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (arr[j] > arr[j+1]) {\n               let temp = arr[j];\n               arr[j] = arr[j+1];\n               arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}",
        "output": "// To sort an array in ascending order using the bubble sort algorithm:\n// 1. Initialize the array to be sorted\n// 2. Iterate over the array and compare adjacent elements\n// 3. If the element on the left is greater than the element on the right, swap them\n// 4. Repeat steps 2 and 3 until the array is sorted\n// 5. Return the sorted array",
        "abap": "CLASS lcl_sort_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_array IMPORTING\n                  VALUE( it_array ) TYPE STANDARD TABLE OF i\n        RAISING\n          cx_static_check.\nENDCLASS.\n\nCLASS lcl_sort_array IMPLEMENTATION.\n  METHOD sort_array.\n    DATA: lv_i TYPE i,\n          lv_j TYPE i,\n          tmp  TYPE i.\n\n    DO it_array[] = sy-sapunf. \"resize array for easier handling\n\n    WHILE sy-cucum <> 1. \"bubble through the array\n      lv_i = sy-index - 1.\n      WHILE lv_i >= 2 AND sy-index-1 <> it_array[ 0 ].\n        IF it_array[ lv_i ] > it_array[ lv_i + 1 ].\n          tmp = it_array[ lv_i ].\n          it_array[ lv_i ] = it_array[ lv_i + 1 ].\n          it_array[ lv_i + 1 ] = tmp.\n        ENDIF.\n        lv_i = lv_i - 1.\n      ENDDO.\n\n      sy-index = sy-index + 1.\n    ENDWHILE.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function that takes a string and reverses the words.",
        "input": "text = \"Hello World!\"",
        "output": "def reverseWords(text):\n    return ' '.join(text.split()[::-1])\n\nreverseWords(text) # \"World! Hello\"",
        "abap": "REPORT zreverse_words.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_words\n        IMPORTING\n          value(iv_text) TYPE string\n        RETURNING\n          VALUE(rv_reversed) TYPE string.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD reverse_words.\n    DATA: lv_words TYPE TABLE OF string,\n          lv_word  TYPE string.\n\n    SPLIT iv_text AT space INTO TABLE lv_words.\n\n    LOOP AT lv_words INTO lv_word.\n      INSERT lv_word INTO TABLE lv_words.\n    ENDLOOP.\n\n    SORT lv_words DESCENDING.\n    TRANSFER lv_words[] TO rv_reversed SEPARATED BY space.\n\n    CLEAR: lv_words, lv_word.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_text TYPE string.\nlv_text = 'World! Hello'.\nrv_reversed = lcl_main=>reverse_words( iv_text = lv_text ).\nWRITE: / rv_reversed.\n"
    },
    {
        "instruction": "Implement a function in JavaScript to calculate the average of all elements in an array.",
        "input": "[2, 3, 9]",
        "output": "function avg(arr) {\n    let sum = 0;\n    for (const val of arr) {\n        sum += val;\n    }\n    return sum/arr.length;\n}\n\nconsole.log(avg([2,3,9])); // 4.666",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      avg\n        IMPORTING\n          value TYPE STANDARD TABLE OF i\n        EXPORTING\n          result TYPE f.\n\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD avg.\n    DATA: sum TYPE f.\n\n    LOOP AT value INTO DATA(line).\n      sum = line + sum.\n    ENDLOOP.\n\n    result = ( sum / lines( value ) ).\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM avg EXPORTING value = VALUE #( ( 2 ) ( 3 ) ( 9 ) )\n               IMPORTING result = DATA(result).\n  WRITE: / result. \" 4.6666\n"
    },
    {
        "instruction": "Find the index of the given word in the sentence.",
        "input": "Word: music\nSentence: I love listening to music.",
        "output": "7.",
        "abap": "It seems like you're asking me to write or translate some ABAP code, but you haven't provided any specific context or the actual piece of code that needs translation.\n\nIf you could provide more details about what you need help with (such as translating a piece of JavaScript or another programming language into ABAP, or even writing an example in ABAP), I'd be happy to assist you."
    },
    {
        "instruction": "Create a JSON object from the following data provided:",
        "input": "Name: John Smith\nAge: 34\nCountry: US",
        "output": "{\n  \"Name\": \"John Smith\",\n  \"Age\": 34,\n  \"Country\": \"US\"\n}",
        "abap": "DATA: ls_person TYPE ty_person.\n\nTYPES:\n  BEGIN OF type_person,\n    name  TYPE string,\n    age   TYPE i,\n    country TYPE string,\n  END OF type_person.\n\nls_person-name = 'John Smith'.\nls_person-age = 34.\nls_person-country = 'US'.\n\nWRITE: / ls_person-name.\nWRITE: / ls_person-age.\nWRITE: / ls_person-country.\n"
    },
    {
        "instruction": "Rewrite the given JavaScript code in Python.",
        "input": "let array = [0,1,2,3];\n  const newArray = array.map(item => item + 3);",
        "output": "array = [0,1,2,3]\nnew_array = list(map(lambda item: item + 3, array))",
        "abap": "DATA: array TYPE STANDARD TABLE OF i.\narray = VALUE #( ( 0 ) ( 1 ) ( 2 ) ( 3 ) ).\n\nDO.\n  LOOP AT array INTO DATA(item).\n    NEW ARRAY = value #( #( val = item + 3 ) ).\n    WRITE: / new_array.\nENDLOOP.\n"
    },
    {
        "instruction": "Swap the contents of two variables.",
        "input": "a = 10\nb = 15",
        "output": "a, b = b, a",
        "abap": "A classic example!\n\nThis is a simple swap operation in Python, but it can be translated to ABAP as follows:\n\nDATA: a TYPE i,\n      b TYPE i.\n\n\" initial values for demonstration purposes\na = 5.\nb = 10.\n\n\" equivalent ABAP code:\nSWAP: p1 TYPE i VALUE a,\n      p2 TYPE i VALUE b.\n\nWRITE: / 'Before swap:', a, b.\n\nSWAP: p1 = p2,\n       p2 = p1.\n\nWRITE: / 'After swap:', p1, p2.\n\nOr if you prefer to use a temporary variable:\n\nDATA: t TYPE i.\nt = a.\na = b.\nb = t.\n\nHowever, in ABAP 7 and above, you can also use the `SWAP` statement with three variables directly:\n\nSWAP: a,\n       b."
    },
    {
        "instruction": "Describe how to use the following code to generate random numbers.",
        "input": "import random\n\ndef random_with_N_digits(n):\n    range_start = 10**(n-1)\n    range_end = (10**n)-1\n    return random.randint(range_start, range_end)",
        "output": "// To generate random numbers using the code provided:\n// 1. Specify number of digits to generate\n// 2. Use the random_with_N_digits function to generate the random number\n// 3. Pass the desired number of digits as the argument in the function\n// 4. The function will return a random number between 10^(n-1) and 10^n-1\n// 5. Use the returned random number for the desired purpose",
        "abap": "REPORT zrandom_number.\n\nCLASS lcl_random DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_random_number IMPORTING\n        p_n DIGITS TYPE i\n        RETURNING\n          VALUE(random_number) TYPE f.\nENDCLASS.\n\nCLASS lcl_random IMPLEMENTATION.\n  METHOD generate_random_number.\n    DATA: lv_upper_bound TYPE f.\n\n    lv_upper_bound = ( p_n * 10 ) - 1.\n    random_number = sy-datum + sy-uzeit / 1000000.\n    WHILE random_number >= lv_upper_bound.\n      random_number = sy-datum + sy-uzeit / 1000000.\n    ENDWHILE.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: number_of_digits TYPE i VALUE 5,\n      random_num       TYPE f.\n\nrandom_num = lcl_random=>generate_random_number( p_n = number_of_digits ).\nWRITE: 'Random Number with', number_of_digits, 'digits:', random_num.\n"
    },
    {
        "instruction": "Write a SQL query to select the row with the customer id \"CID001\" from the customers table.",
        "input": "",
        "output": "SELECT * FROM customers WHERE customer_id = 'CID001';",
        "abap": "DATA: lr_customers TYPE REF TO cl_customer.\n\nSELECT * INTO CORRESPONDING FIELDS OF TABLE @lr_customers\n  FROM zcustomers\n  WHERE customer_id = 'CID001'.\n"
    },
    {
        "instruction": "Construct an if-else statement in Java for printing the square root of a given number.",
        "input": "",
        "output": "if (x >= 0) {\n  System.out.println(Math.sqrt(x));\n} else {\nSystem.out.println(\"The number is negative\");\n}",
        "abap": "DATA: lv_x TYPE i.\n\nlv_x = x. \" assuming x is passed as a parameter or defined elsewhere\n\nIF lv_x >= 0.\n  WRITE: / |{ sqrt( val = lv_x ) }|.\nELSE.\n  WRITE: / 'The number is negative'.\nENDIF.\n"
    },
    {
        "instruction": "Write an expression to calculate the average of the values in the following list",
        "input": "lst = [3, 8, 13, 5, 9]",
        "output": "average = sum(lst) / len(lst)",
        "abap": "DATA: average TYPE f.\n\n\" calculate sum\nDATA: sum TYPE i.\nLOOP AT itab INTO DATA(ls_item).\n  ADD ls_item TO sum.\nENDLOOP.\n\n\" check if list is empty\nIF sum NE 0.\n  \" calculate average\n  average = sum / sy-tfill.\nENDIF.\n"
    },
    {
        "instruction": "Create a function to find the position of a substring in a string",
        "input": "",
        "output": "def find_substring(string, substring):\n    \"\"\"\n    Find the position of a substring in a string\n    :param string: the string\n    :param substring: the substring to find\n    :return: the position of the substring in the string\n    \"\"\"\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            return i\n    return -1  # substring not found",
        "abap": "CLASS lcl_substring_finder DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_substring\n        IMPORTING\n          iv_string TYPE string \" input string\n          iv_substring TYPE string \" substring to find\n        EXPORTING\n          ev_position TYPE i \" position of the substring in the string\n        RAISING\n          cx_no_substring FOUND.\n\nENDCLASS.\n\nCLASS lcl_substring_finder IMPLEMENTATION.\n  METHOD find_substring.\n    DATA: lv_len TYPE i,\n          lv_i   TYPE i.\n\n    lv_len = strlen( iv_substring ).\n    DO.\n      lv_i = sy-index - lv_len + 1.\n      IF lv_i > strlen( iv_string ) OR\n         iv_string+lv_i(lv_len) <> iv_substring.\n        RAISE EXCEPTION type cx_no_substring FOUND.\n      ENDIF.\n      EXIT.\n    ENDDO.\n\n    ev_position = lv_i.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python script to count the number of occurances of each character in a given string.",
        "input": "string = \"Mississippi\"",
        "output": "def count_chars(string):\n char_occurrences = {}\n for char in string:\n  if char not in char_occurrences:\n   char_occurrences[char] = 1\n  else:\n   char_occurrences[char] += 1\n return char_occurrences",
        "abap": "TYPES: ty_char_occurrences TYPE STANDARD TABLE OF ty_occurrence.\nTYPES: BEGIN OF ty_occurrence,\n          char TYPE c LENGTH 1,\n          count TYPE i,\n        END OF ty_occurrence.\n\nDATA: lt_char_occurrences TYPE ty_char_occurrences.\n\nLOOP AT string INTO DATA(lv_char).\n  READ TABLE lt_char_occurrences WITH KEY char = lv_char TRANSPORTING NO FIELDS.\n  IF sy-subrc <> 0.\n    APPEND VALUE #( char = lv_char count = 1 ) TO lt_char_occurrences.\n  ELSE.\n    MODIFY TABLE lt_char_occurrences FROM VALUE #( BASE lt_char_occurrences line-char = lv_char line-count = line-count + 1 ).\n  ENDIF.\nENDLOOP.\n\nDATA: lr_result TYPE REF TO cl_lrf_string_table_type.\nCREATE OBJECT lr_result TYPE cl_lrf_string_table_type.\nlr_result->set_table_value( lt_char_occurrences ).\n\nTYPES: BEGIN OF ty_occurrence,\n          char TYPE c LENGTH 1,\n          count TYPE i,\n        END OF ty_occurrence.\n\nDATA: lv_json TYPE string.\nDATA: lr_occurrences TYPE REF TO if_ixui_object.\nCREATE OBJECT lr_occurrences TYPE cl_ix_ui_obj_string_table_type.\nlr_occurrences->set_table_value( lt_char_occurrences ).\n\n\" convert the internal table to a json string\nCALL METHOD lr_occurrences->as_json\n  IMPORTING\n    ev_result = lv_json.\n\nWRITE: / lv_json.\n"
    },
    {
        "instruction": "Create a function to calculate the Levenshtein distance between two strings",
        "input": "str1 = \"geeks\", str2 = \"geek\"",
        "output": "def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]",
        "abap": "FORM lev_dist\n  USING\n    str1 TYPE string\n    str2 TYPE string\n  RETURNING\n    value(result) TYPE i.\n\n  DATA: lv_length TYPE i,\n        lv_diff   TYPE abap_bool,\n        lt_prev_row TYPE STANDARD TABLE OF i,\n        lt_curr_row TYPE STANDARD TABLE OF i.\n  \n  IF strlen( str1 ) < strlen( str2 ).\n    TRANSLATE str1 TO LOWER CASE.\n    TRANSLATE str2 TO LOWER CASE.\n    CALL FUNCTION 'SUSR_STRING_TRANSLATE'\n      EXPORTING\n        text  = str1\n      IMPORTING\n        result = str1\n      EXCEPTIONS\n        OTHERS = ''\n      .\n    CALL FUNCTION 'SUSR_STRING_TRANSLATE'\n      EXPORTING\n        text  = str2\n      IMPORTING\n        result = str2\n      EXCEPTIONS\n        OTHERS = ''\n      .\n    RETURN lev_dist( str2, str1 ).\n  ENDIF.\n\n  lv_length = strlen( str1 ).\n\n  IF strlen( str2 ) = 0.\n    result = lv_length.\n  ELSE.\n    lt_prev_row = VALUE #( BASE sy-tc val = strlen( str2 ) * -1 ).\n    DO lv_length TIMES.\n      lv_diff = abap_false.\n\n      LOOP AT lt_prev_row INTO DATA(cur_val).\n        lv_diff = abap_true.\n        APPEND cur_val + 1 TO lt_curr_row.\n        IF cur_val <> sy-tc AND str1+sy-tc(1) <> str2+cur_val(1).\n          lv_diff = abap_true.\n          EXIT.\n        ENDIF.\n      ENDDO.\n\n      IF NOT lt_prev_row IS INITIAL.\n        DELETE lt_prev_row INDEX 1.\n      ENDIF.\n\n      IF lv_diff = abap_false.\n        result = cur_val.\n        RETURN.\n      ENDIF.\n\n      LT_CURR_ROW-UNSHIFED = LT_PREV_ROW.\n\n    ENDDO.\n\n    result = sy-tc - 1.\n  ENDIF.\nENDFORM.\n"
    },
    {
        "instruction": "Can you explain what is imperative programming?",
        "input": "",
        "output": "Imperative programming is a programming paradigm that describes computation in terms of statements that change a program\u2019s state. Imperative programming focuses on describing how a program operates. It describes lists of instructions that the computer should execute, describing the steps from start to finish. Contrast this with functional programming, which describes what the program must do. In imperative programming, instructions are typically presented using decision-making (conditional) and looping (iteration) constructs. Examples of imperative programming languages are C, Java, and Python.",
        "abap": "REPORT zsum_calculator.\n\nDATA: lv_list TYPE STANDARD TABLE OF i,\n      lv_sum  TYPE i VALUE 0.\n\n\" Populate list with numbers\nAPPEND 1 TO lv_list.\nAPPEND 2 TO lv_list.\nAPPEND 3 TO lv_list.\n\nLOOP AT lv_list INTO DATA(lv_number).\n  ADD lv_number TO lv_sum.\nENDLOOP.\n\nWRITE: / lv_sum. \" Output the sum\n"
    },
    {
        "instruction": "Write a function to remove all whitespace characters from a given string.",
        "input": "myString = \"Hello   World    \"",
        "output": "def remove_whitespaces(myString):\n    return ''.join(myString.split())\n\nmyString = \"Hello   World    \"\nprint(remove_whitespaces(myString))",
        "abap": "REPORT zremove_whitespaces.\n\nCLASS zcl_remove_whitespaces DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      remove_whitespaces\n        IMPORTING\n          value( val ) TYPE string\n        EXPORTING\n          result TYPE string.\nENDCLASS.\n\nCLASS zcl_remove_whitespaces IMPLEMENTATION.\n  METHOD remove_whitespaces.\n    result = cl_abap_char_utilities=>collapse_space(\n              val ).\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_string TYPE string VALUE 'Hello   World    '.\nCALL METHOD zcl_remove_whitespaces=>remove_whitespaces\n  EXPORTING\n    val        = lv_string\n  IMPORTING\n    result     = lv_string.\nWRITE: / lv_string.\n"
    },
    {
        "instruction": "Create a JSX code that renders a \"Hello, World!\" message in the browser.",
        "input": "",
        "output": "import React from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello, World!</h1>\n    </div>\n  );\n}\n\nexport default App;",
        "abap": "REPORT zhello_world.\n\nCLASS lcl_app DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_html_string\n        RETURNING\n          VALUE(rv_html_string) TYPE string.\nENDCLASS.\n\nCLASS lcl_app IMPLEMENTATION.\n  METHOD get_html_string.\n    rv_html_string = '<html>'.\n    APPEND '<head></head>' TO rv_html_string.\n    APPEND '<body>'.\n    APPEND '<h1>Hello, World!</h1>'.\n    APPEND '</body>'.\n    APPEND '</html>' TO rv_html_string.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_html TYPE string.\n\n  CALL METHOD lcl_app=>get_html_string\n    IMPORTING\n      ev_html_string = lv_html.\n\n  WRITE: / lv_html.\n"
    },
    {
        "instruction": "Create a dictionary to store the key-value pairs and print out the values of the dictionary keys.",
        "input": "myDict = {\n    \"cat\" : \"meow\",\n    \"dog\" : \"bark\",\n    \"horse\" : \"neigh\"\n}",
        "output": "for key, value in myDict.items(): \n    print(value) \n\n# Output\nmeow\nbark\nneigh",
        "abap": "DATA: lt_dictionary TYPE STANDARD TABLE OF ty_key_value,\n      ls_entry       TYPE LINE OF ty_key_value.\n\nTYPES:\n  BEGIN TYPE-BLOCK.\n    TYPE string.\n  END OF TYPE-BLOCK.\nty_key_value TYPE TABLE OF :\n              BEGIN OF line type,\n                key TYPE string,\n                value TYPE string\n              END OF line type.\n\nlt_dictionary = VALUE #( ( name  = 'meow'   value = 'meow' )\n                           ( name  = 'bark'   value = 'bark' )\n                           ( name  = 'neigh'  value = 'neigh') ).\n\nLOOP AT lt_dictionary INTO ls_entry.\n  WRITE: / ls_entry-value.\nENDLOOP.\n\n\" Output\n\" meow\n\" bark\n\" neigh\n"
    },
    {
        "instruction": "Write a code to convert a given spredsheet in csv format to json format.",
        "input": "",
        "output": "import csv\nimport json\n\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\n\ncsv_to_json()",
        "abap": "REPORT zcsv_to_json.\n\nTYPES: BEGIN OF ty_data,\n         field1 TYPE string,\n         field2 TYPE string,\n       END OF ty_data.\n\nDATA: lv_csv_name TYPE string VALUE 'mycsvfile.csv',\n      lv_json_name TYPE string VALUE 'myjsonfile.json',\n      lt_data TYPE STANDARD TABLE OF ty_data.\n\nOPEN DATASET lv_csv_name FOR INPUT IN TEXT MODE ENCODING DEFAULT.\nIF sy-subrc <> 0.\n  MESSAGE id 'E' type 'I' number '123' WITH 'Error opening csv file'.\nENDIF.\n\nDATA: lo_data TYPE REF TO cl_excel_reader,\n      li_line TYPE i,\n      lt_fields LIKE STANDARD TABLE OF ty_data.\n\nCREATE OBJECT lo_data\n  EXPORTING\n    input_file = lv_csv_name.\n\nDO.\n  DATA(lo_iterator) = lo_data->read_next_record( ).\n  IF lo_iterator IS NOT BOUND.\n    EXIT.\n  ENDIF.\n  DATA(ls_line) = lo_iterator->get_data( ).\n  APPEND ls_line TO lt_fields.\nENDDO.\n\nOPEN DATASET lv_json_name FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.\nIF sy-subrc <> 0.\n  MESSAGE id 'E' type 'I' number '123' WITH 'Error opening json file'.\nENDIF.\n\nDATA: lo_writer TYPE REF TO cl_basic_writer,\n      li_line TYPE i.\n\nCREATE OBJECT lo_writer\n  EXPORTING\n    writer = lv_json_name\n    data_type = if_ixml=>c_data_type_xstring\n    options = value #( kind = cl_abap_char_utilities=>kind_crlf ).\n\nlo_writer->write_line( |{ json Pretty Printer::to_json( lt_fields ) }| ).\n"
    },
    {
        "instruction": "Write a MySQL query to print the column names of a table named 'employees'.",
        "input": "",
        "output": "SELECT column_name FROM information_schema.columns WHERE table_name = 'employees';",
        "abap": "DATA: lv_table TYPE string VALUE 'employees'.\n\nSELECT column_name FROM dd03l\n  INTO TABLE @DATA(lt_columns)\n  WHERE tabname = @lv_table.\n"
    },
    {
        "instruction": "Return a subset of a given array of size K",
        "input": "arr = [3, 6, 2, 5, 7, 4], K = 3",
        "output": "def subset(arr, K): \n    n = len(arr) \n    subset_arr = [0]; \n      \n    for i in range (0, n): \n        x = len(subset_arr) \n        for j in range(0, x): \n              \n            # Generate subset by adding \n            # elements of A\n            temp = [] \n            temp = subset_arr[j] \n            temp.append(arr[i]) \n              \n            # Append in the list \n            subset_arr.append(temp) \n              \n    # Return K size subset \n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -1\n    \nprint(subset(arr, K))",
        "abap": "TYPES: ty_array TYPE STANDARD TABLE OF i.\n\nDATA: arr TYPE ty_array,\n      k    TYPE i,\n      subset_arr TYPE STANDARD TABLE OF ty_array.\n\nMETHOD subset.\n  DATA: n TYPE i,\n        temp TYPE ty_array,\n        x    TYPE i.\n\n  CALL FUNCTION 'FILL_ARRAY_WITH_RANGES'\n    EXPORTING\n      i4range  = sy-dbcnt\n    IMPORTING\n      r       =\n      arr     =\n    EXCEPTIONS\n      OTHERS   = 0.\n  \n  n = lines( arr ).\n\n  \" Initialize subset array with empty subsets\n  APPEND LINES: val = '()' TO subset_arr.\n\n  DO n TIMES.\n    x = lines( subset_arr ).\n    LOOP AT subset_arr INTO temp.\n      DATA: sub TYPE ty_array,\n            i    TYPE i.\n      MOVE-CORRESPONDING temp TO sub.\n      APPEND sub TO subset_arr.\n    ENDLOOP.\n  ENDDO.\n\n  \" Return K size subset\n  IF lines( subset_arr ) >= k.\n    SORT subset_arr BY key = lines( val ).\n    DELETE subset_arr FROM lines( subset_arr ) - k + 1 TO lines( subset_arr ).\n  ELSE.\n    MOVE-CORRESPONDING -1 TO subset_arr.\n  ENDIF.\n\nENDMETHOD.\n\nCLASS lcl_subset DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      subset\n        IMPORTING\n          VALUE(arr) TYPE ty_array\n          VALUE(k)    TYPE i\n        EXPORTING\n          VALUE(result) TYPE STANDARD TABLE OF ty_array.\nENDCLASS.\n\nDATA: arr TYPE ty_array,\n      k   TYPE i,\n      result TYPE STANDARD TABLE OF ty_array.\n\nSTART-OF-SELECTION.\n  DATA: temp TYPE i.\n  DO 10 TIMES.\n    APPEND sy-index TO arr.\n    CLEAR: sy-index, temp.\n  ENDDO.\n  k = 3.\n  CALL METHOD lcl_subset=>subset\n    EXPORTING\n      arr     = arr\n      k       = k\n    IMPORTING\n      result  = result.\n\n  LOOP AT result INTO DATA(subset).\n    WRITE: / subset.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Re-write the following function to use list comprehension.",
        "input": "def negative_list(numbers):\n    negative = []\n    for num in numbers:\n        if num < 0:\n            negative.append(num)\n    return negative",
        "output": "def negative_list(numbers):\n    return [num for num in numbers if num < 0]",
        "abap": "CLASS lcl_negative_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_negative_numbers\n        IMPORTING\n          VALUE( iv_numbers ) TYPE STANDARD TABLE OF integer\n        RETURNING\n          VALUE( rv_result ) TYPE STANDARD TABLE OF integer.\n\nENDCLASS.\n\nCLASS lcl_negative_list IMPLEMENTATION.\n  METHOD get_negative_numbers.\n    LOOP AT iv_numbers INTO DATA(lv_num).\n      IF lv_num < 0.\n        INSERT lv_num INTO TABLE rv_result.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python function to compute the maximum value for each key in a given dictionary.",
        "input": "d = {'a':10, 'b':20, 'c':30}",
        "output": "def max_values(d):\n return {key: max(d.values()) for key in d}",
        "abap": "TYPES: BEGIN OF ty_table,\n          key TYPE string,\n          value TYPE i,\n        END OF ty_table.\n\nDATA: ls_result TYPE STANDARD TABLE OF ty_table.\n\nDATA: lt_dict LIKE LINE OF d.\n\nLOOP AT d INTO lt_dict.\n  READ TABLE ls_result WITH KEY key = lt_dict-key BINARY SEARCH.\n  IF sy-subrc <> 0.\n    APPEND VALUE #( key = lt_dict-key value = lt_dict-value ) TO ls_result.\n  ELSE.\n    MODIFY ls_result INDEX sy-tabix FROM VALUE #( key = lt_dict-key value = max( VALUE #( ( lt_dict-value )( sy-tfill ) ) ) ).\n  ENDIF.\nENDLOOP.\n\n\" or alternative version using SORT and GROUP BY\n\nDATA: lt_sorted TYPE STANDARD TABLE OF ty_table.\n\nSORT d BY -value.\nGROUP d BY key INTO ls_result.\n\nls_result[ table_name = sy-cprog ]-key = keys.\nls_result[ table_name = sy-cprog ]-value = value.\n"
    },
    {
        "instruction": "Create a program to write an overwriting if-else logic for the following switch statement",
        "input": "switch(a) {\n  case 1: \n    func1();\n    break;\n  case 2: \n    func2();\n    break;\n}",
        "output": "\"\"\"\nCreate a program to write an overwriting if-else logic for the following switch statement\n\"\"\"\n\ndef switch_to_if_else(a):\n  if a == 1:\n    func1()\n  elif a == 2:\n    func2()\n\nif __name__ == '__main__':\n    switch_to_if_else(a)",
        "abap": "CLASS lcl_switch_to_if_else DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: if_elseif_a1 IMPORTING a TYPE i.\nENDCLASS.\n\nCLASS lcl_switch_to_if_else IMPLEMENTATION.\n  METHOD if_elseif_a1.\n    IF a = 1.\n      \" func1() equivalent in ABAP would be to call function module or method\n      WRITE: 'You called function with argument 1'.\n    ELSEIF a = 2.\n      \" func2() equivalent in ABAP would be to call function module or method\n      WRITE: / 'You called function with argument 2'.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.\n\n\" Main program\n\nCLASS lcl_main DEFINITION INHERITING FROM cl_pbo_class DEFINITION FINAL.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \" equivalent of __main__ in Python\n      main IMPORTING a TYPE i.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD main.\n    CALL METHOD lcl_switch_to_if_else=>if_elseif_a1( a ).\n  ENDMETHOD.\n\nINITIALIZER.\n*   This is equivalent to the if __name__ == '__main__': block in Python\n  DATA: lo_obj TYPE REF TO lcl_main.\n\n  CREATE OBJECT lo_obj TYPE lcl_main.\n  CALL METHOD lo_obj->main( ).\n\nEND-OF-INITIALIZATION.\n"
    },
    {
        "instruction": "Explain what a Turing machine is.",
        "input": "",
        "output": "A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.",
        "abap": "CLASS lcl_turing_machine DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" Initialze the machine with an initial state, tape and instructions\n      initialize\n        IMPORTING\n          iv_initial_state   TYPE string\n          iv_tape            TYPE string\n          it_instructions     TYPE STANDARD TABLE OF ty_instruction,\n      \" Move the head one step to the right or left\n      move_right\n        RAISING\n          cx_program_error.\n      \" Write a symbol on the tape at the current position of the head\n      write_symbol\n        IMPORTING\n          iv_symbol TYPE string\n        RAISING\n          cx_program_error,\n      \" Read the symbol from the tape at the current position of the head\n      read_symbol\n        RETURNING\n          VALUE(iv_symbol) TYPE string\n        RAISING\n          cx_program_error,\n      \" Move to a new state and write a symbol on the tape\n      transition\n        IMPORTING\n          iv_state TYPE string\n          iv_symbol TYPE string\n        EXPORTING\n          ev_new_state   TYPE string\n          ev_new_tape    TYPE string\n        RAISING\n          cx_program_error.\n\n  PRIVATE SECTION.\n    DATA: mv_initial_state TYPE string,\n          mt_instructions   TYPE STANDARD TABLE OF ty_instruction,\n          mv_current_state  TYPE string,\n          mv_current_position TYPE i,\n          mv_tape            TYPE string,\n          mv_head            TYPE i.\nENDCLASS.\n\nCLASS lcl_turing_machine IMPLEMENTATION.\n  METHOD initialize.\n    mv_initial_state = iv_initial_state.\n    mt_instructions   = it_instructions.\n    mv_current_state  = mv_initial_state.\n    mv_current_position = strlen( mv_tape ).\n    mv_tape            = iv_tape.\n    mv_head            = mv_current_position.\n\n  ENDMETHOD.\n\n  METHOD move_right.\n    IF mv_current_position < strlen( mv_tape ).\n      mv_current_position = mv_current_position + 1.\n    ELSE.\n      RAISE cx_program_error(\n        EXPORTING\n          message_v2   = 'Move right: Out of bounds' ).\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD write_symbol.\n    IF mv_current_position <= strlen( mv_tape ).\n\n      DATA: lv_length TYPE i,\n            lv_offset TYPE i.\n\n      lv_length = strlen( mv_tape ).\n      lv_offset = mv_current_position - 1.\n      mv_tape = mv_tape( up to lv_offset ) && iv_symbol && mv_tape+lv_offset+1 .\n\n    ELSE.\n\n      RAISE cx_program_error(\n        EXPORTING\n          message_v2   = 'Write symbol: Out of bounds' ).\n\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD read_symbol.\n    IF mv_current_position <= strlen( mv_tape ).\n      iv_symbol = mv_tape+mv_current_position-1(1).\n    ELSE.\n      RAISE cx_program_error(\n        EXPORTING\n          message_v2   = 'Read symbol: Out of bounds' ).\n\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD transition.\n    READ TABLE mt_instructions WITH KEY state = iv_state symbol = iv_symbol INTO DATA(ls_instruction).\n\n    IF ls_instruction IS NOT ASSIGNED.\n\n      RAISE cx_program_error(\n        EXPORTING\n          message_v2   = 'Transition: Instruction not found' ).\n\n    ENDIF.\n\n    ev_new_state   = ls_instruction-state.\n    ev_new_tape    = ls_instruction-tape.\n    mv_current_position = ls_instruction-position.\n\n  ENDMETHOD.\n\nENDCLASS.\n\nTYPES:\n  BEGIN OF ty_instruction,\n    state TYPE string,\n    symbol TYPE string,\n    tape TYPE string,\n    position TYPE i,\n  END OF ty_instruction.\n\nDATA: lt_instructions TYPE STANDARD TABLE OF ty_instruction,\n\n      lv_initial_state TYPE string VALUE 'q0',\n      lv_tape            TYPE string VALUE '10101010'.\n\nlt_instructions = VALUE #(\n  ( state = 'q0' symbol = '1' tape = '2' position = 5 )\n  ( state = 'q0' symbol = '0' tape = '3' position = 6 )\n).\n\nDATA: lo_machine TYPE REF TO lcl_turing_machine.\n\nlo_machine = NEW #( .\n\nlo_machine->initialize(\n    EXPORTING\n      iv_initial_state   = lv_initial_state\n      iv_tape            = lv_tape\n      it_instructions     = lt_instructions ).\n\nWHILE mv_current_position <= strlen( mv_tape ).\n  DATA: lv_symbol TYPE string,\n        lv_new_state TYPE string,\n        lv_new_tape TYPE string.\n\n  lo_machine->read_symbol(\n    IMPORTING\n      iv_symbol         = lv_symbol\n    CHANGING\n      cv_symbol              = ).\n\n  READ TABLE lt_instructions WITH KEY state = mv_current_state symbol = lv_symbol INTO ls_instruction.\n\n  IF ls_instruction IS ASSIGNED.\n    \" Transition to new state, write a symbol on the tape and move the head\n    lo_machine->transition(\n        EXPORTING\n          iv_state         = mv_current_state\n          iv_symbol              = lv_symbol\n        IMPORTING\n          ev_new_state   = lv_new_state\n          ev_new_tape    = lv_new_tape ).\n\n    IF ls_instruction-position NE mv_current_position.\n      lo_machine->move_right( ).\n    ENDIF.\n\n  ELSE.\n\n    \" If no transition is defined, stay in the same state and do nothing\n    CONTINUE.\n\n  ENDIF.\n\nENDWHILE.\n"
    },
    {
        "instruction": "Calculate the sum of all elements in a given list using Python.",
        "input": "list1 = [1, 2 ,3, 4, 5]",
        "output": "sum_list = 15",
        "abap": "DATA: sum TYPE i.\n\nsum = 15.\nWRITE: / sum.\n"
    },
    {
        "instruction": "Construct a Java program for sorting a given array in ascending order.",
        "input": "",
        "output": "public class ArraySort { \n    public static int[] sortArray(int[] arr) { \n        int n = arr.length; \n        for (int i = 0; i < n - 1; i++) { \n            int min_idx = i; \n            for (int j = i + 1; j < n; j++) \n                if (arr[j] < arr[min_idx]) \n                    min_idx = j; \n            int temp = arr[min_idx]; \n            arr[min_idx] = arr[i]; \n            arr[i] = temp; \n        } \n        return arr; \n    } \n}",
        "abap": "CLASS lcl_array_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Sorts an array in ascending order using bubble sort algorithm\n      \"! @param <p_arr> Array of integers to be sorted\n      \"! @return Sorted array\n      METHODS: sort_array IMPORTING p_arr TYPE int4_t[] RETURNING value(result) TYPE int4_t[] ).\nENDCLASS.\n\nCLASS lcl_array_sort IMPLEMENTATION.\n  METHOD sort_array.\n    DATA: n TYPE i,\n          min_idx TYPE i,\n          temp TYPE i.\n\n    n = lines( p_arr ).\n\n    DO n - 1 TIMES.\n      min_idx = sy-index.\n\n      DO n - sy-index TIMES.\n        IF p_arr[ sy-index + 1 ] < p_arr[ min_idx ].\n          min_idx = sy-index + 1.\n        ENDIF.\n      ENDDO.\n\n      temp = p_arr[ min_idx ].\n      p_arr[ min_idx ] = p_arr[ sy-index ].\n      p_arr[ sy-index ] = temp.\n\n    ENDDO.\n\n    result = p_arr.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function to find the longest string in a list of strings.",
        "input": "",
        "output": "def find_longest_string(strings):\n    \"\"\"\n    Find and return the longest string in a list of strings.\n    :param strings: the list of strings\n    :return: the longest string\n    \"\"\"\n    longest = \"\"\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest",
        "abap": "CLASS lcl_find_longest_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_longest_string\n        IMPORTING\n          iv_strings   TYPE STANDARD TABLE OF string\n        EXPORTING\n          ev_longest_string TYPE string.\n\nENDCLASS.\n\nCLASS lcl_find_longest_string IMPLEMENTATION.\n  METHOD find_longest_string.\n    DATA: lv_longest_string TYPE string.\n\n    LOOP AT iv_strings INTO DATA(lv_current_string).\n      IF strlen( lv_current_string ) > strlen( lv_longest_string ).\n        lv_longest_string = lv_current_string.\n      ENDIF.\n    ENDLOOP.\n\n    ev_longest_string = lv_longest_string.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create an if-else statement to classify a given number into an even or an odd.",
        "input": "",
        "output": "if (num % 2 == 0):\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
        "abap": "IF num MOD 2 = 0.\n  WRITE: / 'Even'.\nELSE.\n  WRITE: / 'Odd'.\nENDIF.\n"
    },
    {
        "instruction": "Write a C# function which takes 2 strings as parameters and returns a new string which is a concatenation of the two parameters.",
        "input": "'Hello', 'World!'",
        "output": "string ConcatenateStrings(string str1, string str2)\n{\n   return str1 + str2;\n}",
        "abap": "CLASS lcl_concatenator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      concatenate_strings\n        IMPORTING\n          iv_str1 TYPE string\n          iv_str2 TYPE string\n        RETURNING\n          VALUE(rv_concatenated) TYPE string.\nENDCLASS.\n\nCLASS lcl_concatenator IMPLEMENTATION.\n  METHOD concatenate_strings.\n    rv_concatenated = iv_str1 && iv_str2.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "What is the next output when this code is executed?",
        "input": "i = 0 \nwhile (i < 5): \n    print(i, sep = \", \")\n    i += 1",
        "output": "0, 1, 2, 3, 4",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i.\n\nINITIALIZATION.\n  APPEND 0 TO lv_list.\n  APPEND 1 TO lv_list.\n  APPEND 2 TO lv_list.\n  APPEND 3 TO lv_list.\n  APPEND 4 TO lv_list.\n"
    },
    {
        "instruction": "Create a C++ algorithm to compute the Fibonacci sequence.",
        "input": "",
        "output": "#include <iostream> \n\nint fibonacci(int n) { \n    if (n <= 1) \n        return n; \n    return fibonacci(n - 1) + fibonacci(n - 2); \n} \n  \nint main() { \n    int n = 10; \n    std::cout << \"The Fibonacci number at position \" << n << \" is \" << fibonacci(n); \n    return 0; \n}",
        "abap": "REPORT zfibonacci.\n\nCLASS lcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fibonacci IMPORTING\n                  iv_position TYPE i\n        EXPORTING\n          ev_result   TYPE i.\nENDCLASS.\n\nCLASS lcl_fibonacci IMPLEMENTATION.\n  METHOD fibonacci.\n    IF iv_position <= 1.\n      ev_result = iv_position.\n    ELSE.\n      DATA: lv_prev Prev = fibonacci( iv_position - 1 ),\n            lv_curr   curr = fibonacci( iv_position - 2 ).\n\n      ev_result = lv_prev + lv_curr.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM fibonacci USING 10 CHANGING DATA(lv_result) TYPE i.\n  WRITE: 'The Fibonacci number at position ', 10, ' is ', lv_result.\n"
    },
    {
        "instruction": "What will happen when the following code is executed?",
        "input": "a_list = [1, 2, 3, 4, 5]\n\nfor i in a_list:\n    a_list.append(i + 6)\n\nprint(a_list)",
        "output": "[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\n\nlv_array = VALUE #( ( 1 )\n                   ( 2 )\n                   ( 3 )\n                   ( 4 )\n                   ( 5 )\n                   ( 7 )\n                   ( 8 )\n                   ( 9 )\n                   ( 10 )\n                   ( 11 )\n                   ( 12 ) ).\n\nWRITE: / lv_array.\n"
    },
    {
        "instruction": "Create a function that takes an array as an argument and returns the sum of all the elements in the array.",
        "input": "arr = [1, 2, 3, 4, 5]",
        "output": "def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "abap": "REPORT zarray_sum.\n\nCLASS lcl_array_sum DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      arraySum\n        IMPORTING\n          it_arr TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_array_sum IMPLEMENTATION.\n  METHOD array_sum.\n    DATA: lv_total TYPE i.\n\n    LOOP AT it_arr INTO DATA(ls_num).\n      lv_total = lv_total + ls_num.\n    ENDLOOP.\n\n    rv_result = lv_total.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_array TYPE STANDARD TABLE OF i,\n        lv_sum   TYPE i.\n\n  APPEND 1 TO lt_array. \" example array\n  APPEND 2 TO lt_array.\n  APPEND 3 TO lt_array.\n\n  lv_sum = lcl_array_sum=>arraySum( it_arr = lt_array ).\n\n  WRITE: / 'The sum of the array is:', lv_sum.\n"
    },
    {
        "instruction": "How would you modify the following code to print the square of each number in the given list?",
        "input": "nums = [1, 2, 3, 4]",
        "output": "nums = [1, 2, 3, 4]\n\nfor i in range(len(nums)):\n    nums[i] = nums[i] * nums[i]\n\nprint(nums) # [1, 4, 9, 16]",
        "abap": "DATA: lv_nums TYPE STANDARD TABLE OF f.\n\nlv_nums = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ).\n\nLOOP AT lv_nums INTO DATA(lv_num) .\n  lv_num = lv_num * lv_num.\n  MODIFY lv_nums INDEX sy-tabix FROM lv_num.\nENDLOOP.\n\nWRITE: / lv_nums.\n"
    },
    {
        "instruction": "Write a simple calculator program.",
        "input": "",
        "output": "def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")",
        "abap": "REPORT zcalculator.\n\nPARAMETERS: p_num1 TYPE i, \" First Number\n            p_num2 TYPE i. \" Second Number\n\nAT SELECTION-SCREEN OUTPUT.\n  WRITE:/ 'Please choose operation -'.\n  WRITE:/ '1. Add'.\n  WRITE:/ '2. Subtract'.\n  WRITE:/ '3. Multiply'.\n  WRITE:/ '4. Divide'.\n\nDATA: l_choice TYPE i.\n\nSTART-OF-SELECTION.\n  PERFORM get_user_input USING p_num1 p_num2 CHANGING l_choice.\n  PERFORM calculate_result USING l_choice p_num1 p_num2.\n\nFORM get_user_input\n  USING\n    p_num1 TYPE i,\n    p_num2 TYPE i\n  CHANGING\n    l_choice TYPE i.\n\n  WRITE:/ 'Please enter first number:'.\n  READ INPUT FROM cl_gui_frontend_services->read_text(\n    INTO p_num1 ).\n  WRITE:/ 'Please enter second number:'.\n  READ INPUT FROM cl_gui_frontend_services->read_text(\n    INTO p_num2 ).\n\n  WRITE:/ 'Please choose operation -' .\n  WRITE:/ '1. Add' .\n  WRITE:/ '2. Subtract'.\n  WRITE:/ '3. Multiply'.\n  WRITE:/ '4. Divide'.\n\n  WRITE:/ 'Enter your choice: '.\n  READ INPUT FROM cl_gui_frontend_services->read_text(\n    INTO l_choice ).\n\nENDFORM.\n\nFORM calculate_result\n  USING\n    p_choice TYPE i,\n    p_num1   TYPE f,\n    p_num2   TYPE f.\n\n  CASE p_choice.\n    WHEN 1.\n      WRITE:/ 'Answer={}'( p_num1 + p_num2 ).\n    WHEN 2.\n      WRITE:/ 'Answer={}'( p_num1 - p_num2 ).\n    WHEN 3.\n      WRITE:/ 'Answer={}'( p_num1 * p_num2 ).\n    WHEN 4.\n      IF p_num2 <> 0.\n        WRITE:/ 'Answer={}'( p_num1 / p_num2 ).\n      ELSE.\n        MESSAGE 'Error: Division by zero' TYPE 'E'.\n      ENDIF.\n    WHEN OTHERS.\n      MESSAGE 'Invalid Choice' TYPE 'E'.\n  ENDCASE.\n\nENDFORM.\n"
    },
    {
        "instruction": "Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.",
        "input": "#!/usr/bin/python\nprint \"Hello, World!\"",
        "output": "#!/usr/bin/python\nprint(\"Hello, World!\")",
        "abap": "REPORT zhello_world.\n\nCLASS lcl_hello_world DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main IMPORTING\n               \"! Parameters\n                \"! <Parameter Name> TYPE <Data Type>\n               .\nENDCLASS.\n\nCLASS lcl_hello_world IMPLEMENTATION.\n  METHOD main.\n    WRITE: / 'Hello, World!'.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SECTION.\n  PERFORM main.\n"
    },
    {
        "instruction": "Edit the following code to add try catch block.",
        "input": "x = \"5\"\ny = \"2\"\nsum = int(x) + int(y)\nprint(\"Sum of x and y is\", sum)",
        "output": "x = \"5\"\ny = \"2\"\ntry:\n   sum = int(x) + int(y)\n   print(\"Sum of x and y is\", sum)\nexcept:\n   print(\"Error: Invalid input\")",
        "abap": "DATA: lv_x TYPE string VALUE '5',\n      lv_y TYPE string VALUE '2'.\n\nTRY.\n  DATA(lv_sum) = lv_x + lv_y.\n  WRITE: / 'Sum of x and y is', lv_sum.\nCATCH cx_sy_conversion_no_number INTO DATA(lv_exception).\n  WRITE: / 'Error: Invalid input'.\nENDTRY.\n"
    },
    {
        "instruction": "Edit the following JavaScript code to reverse the characters of a given string.",
        "input": "",
        "output": "function reverseString(string) {\n  let reversedString = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n  return reversedString;\n}",
        "abap": "CLASS lcl_string_reverser DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_reversed TYPE string .\nENDCLASS.\n\nCLASS lcl_string_reverser IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_reversed TYPE string,\n          lv_index   TYPE i.\n\n    CLEAR lv_reversed.\n\n    DO.\n      ADD 1 TO lv_index.\n      IF lv_index > strlen( iv_string ).\n        EXIT.\n      ENDIF.\n      CONCATENATE iv_string+lv_index-1 lv_reversed INTO lv_reversed.\n    ENDDO.\n\n    ev_reversed = lv_reversed.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a method in Java to return the largest of three numbers.",
        "input": "",
        "output": "public static int max(int num1, int num2, int num3) {\nint max = num1;\nif (num2 > max) {\n max = num2;\n}\nif (num3 > max) {\n max = num3;\n}\nreturn max;\n}",
        "abap": "FORM f_max USING\n  p_num1 TYPE i\n  p_num2 TYPE i\n  p_num3 TYPE i\n  p_max  TYPE i.\n\n\" find maximum value\nDATA: lv_max TYPE i.\nlv_max = p_num1.\n\nIF p_num2 > lv_max.\n  lv_max = p_num2.\nENDIF.\n\nIF p_num3 > lv_max.\n  lv_max = p_num3.\nENDIF.\n\np_max = lv_max.\n\nENDFORM. \n"
    },
    {
        "instruction": "Edit the code to create a try-except block to handle the exception.",
        "input": "a = 5\nb = 0\n\nans = a/b",
        "output": "try:\n    a = 5\n    b = 0\n\n    ans = a/b\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero.\")",
        "abap": "DATA: lv_a TYPE i VALUE '5',\n      lv_b TYPE i,\n      lv_ans TYPE f.\n\nlv_b = 0.\n\nTRY.\n    lv_ans = lv_a / lv_b.\nCATCH cx_sy_zerodiv.\n    WRITE: / 'Cannot divide by zero.'.\nENDTRY.\n"
    },
    {
        "instruction": "Find the smallest element in a given array.",
        "input": "[6, 8, 1, 4, 5]",
        "output": "1",
        "abap": "That's a single digit.\n\nHere is the equivalent ABAP statement:\n\n\"1\".\n\nIf you'd like to provide more context or code, I can try to help with translation. For example, if you have JavaScript code you'd like me to translate to ABAP, please go ahead and share it!"
    },
    {
        "instruction": "Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.",
        "input": "sentence = \"Hello World!\"",
        "output": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict",
        "abap": "REPORT zletter_counts.\n\nCLASS lcl_letter_counts DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      letter_counts\n        IMPORTING\n          sentence TYPE string\n        RETURNING\n          VALUE(result) TYPE ty_count_dict\n        RAISING\n          cx_no_check.\n\nTYPES: BEGIN OF ty_count_dict,\n         char     TYPE c,\n         count    TYPE i,\n       END OF ty_count_dict.\n\nDATA: lt_count TYPE STANDARD TABLE OF ty_count_dict.\n\nCLASS-METHODS:\n  letter_counts\n    IMPORTING\n      sentence TYPE string\n    RETURNING\n      VALUE(result) TYPE STANDARD TABLE OF ty_count_dict\n    RAISING\n      cx_no_check.\n\nMETHOD letter_counts.\n  DATA: lv_char TYPE char1,\n        lv_index TYPE i.\n\n  LOOP AT sentence INTO lv_char.\n    IF NOT lv_char IS SPACE.\n      READ TEXT 'EN' WITH KEY code = lv_char INTO DATA:lv_code.\n      IF sy-subrc EQ 0 AND NOT lv_code CS 'ABCDEF'.\n        READ TABLE lt_count ASSIGNING FIELD-SYMBOL(<ls_count>) WITH KEY char = lv_char.\n        IF sy-subrc EQ 0.\n          <ls_count>-count = <ls_count>-count + 1.\n        ELSE.\n          INSERT VALUE #( char = lv_char count = 1 ) INTO TABLE lt_count.\n        ENDIF.\n      ENDIF.\n    ENDIF.\n  ENDLOOP.\n\n  result = lt_count.\nENDMETHOD.\n"
    },
    {
        "instruction": "Write code to flatten a nested list",
        "input": "",
        "output": "def flatten_list(list):\n    \"\"\"\n    Flatten a nested list\n    :param list: the nested list to flatten\n    :return: a flattened list\n    \"\"\"\n    flattened_list = []\n    for item in list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "abap": "CLASS lcl_flattener DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      flatten_list\n        IMPORTING\n          it_nested_list TYPE ty_nested_list\n        RETURNING\n          VALUE(rt_flattened) TYPE ty_flattened_list.\nENDCLASS.\n\nCLASS lcl_flattener IMPLEMENTATION.\n  METHOD flatten_list.\n    DATA: lt_flattened TYPE ty_flattened_list,\n          ls_item      LIKE LINE OF it_nested_list.\n\n    lt_flattened = it_nested_list[].\n\n    LOOP AT it_nested_list INTO ls_item.\n      IF ls_item-type EQ 'S'.\n        APPEND LINES OF lcl_flattener=>flatten_list( ls_item-value ) TO lt_flattened.\n      ELSE.\n        INSERT ls_item INTO TABLE lt_flattened.\n      ENDIF.\n    ENDLOOP.\n\n    rt_flattened = lt_flattened.\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: BEGIN OF ty_nested_list,\n         type TYPE c VALUE 'S',\n         value TYPE ANY,\n       END OF ty_nested_list.\n\nTYPES: BEGIN OF ty_flattened_list,\n         TYPE TYPE c VALUE '',\n         VALUE TYPE sydatum,\n       END OF ty_flattened_list.\n\nDATA: lt_nested_list TYPE STANDARD TABLE OF ty_nested_list,\n      lt_flattened   TYPE STANDARD TABLE OF ty_flattened_list.\n\nlt_nested_list = VALUE #( ( type = 'S' value = VALUE #(\n                       ( type = 'S'\n                         value = VALUE #(\n                           ( type = 'I' value = 1 )\n                           ( type = 'S' value = VALUE #(\n                             ( type = 'C' value = 'Hello, ' )\n                             ( type = 'S' value = VALUE #(\n                               ( type = 'C' value = 'World!' ) ) ) ) ) ) ) ) ).\n\nlt_flattened = lcl_flattener=>flatten_list( lt_nested_list ).\n\nWRITE: / |Flattened List:|.\n\nLOOP AT lt_flattened INTO DATA(ls_item).\n  WRITE: ls_item-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a PHP page to add two numbers.",
        "input": "",
        "output": "<html>\n <head>\n  <title>Add two numbers</title>\n </head>\n <body>\n  <?php\n   if (isset($_POST['add'])) {\n   $num1 = $_POST['num1'];\n   $num2 = $_POST['num2'];\n   $sum = $num1 + $num2;\n   ?>\n    <p>The sum of <?php echo $num1; ?> and <?php echo $num2; ?> is <?php echo $sum; ?></p>\n   <?php\n   } else {\n   ?>\n   <form action=\"add.php\" method=\"post\">\n    <label>Enter first number:</label>\n    <input type=\"text\" name=\"num1\">\n    <br>\n    <label>Enter second number:</label>\n    <input type=\"text\" name=\"num2\">\n    <input type=\"submit\" name=\"add\" value=\"Add\">\n   </form>\n   <?php\n   }\n  ?>\n </body>\n</html>",
        "abap": "REPORT ztest.\n\nDATA: ls_form TYPE form,\n      lv_num1 TYPE i,\n      lv_num2 TYPE i,\n      lv_sum  TYPE f.\n\n\" Create a form to add two numbers\nCREATE OBJECT ls_form TYPE cl_abap_form_factory=>form_new(\n  EXPORTING\n    form_key     = 'ADD'\n    description  = 'Add Two Numbers'\n    data_object   = 'ZADD_FORM'\n  IMPORTING\n    form          = DATA(lv_form)\n).\n\n\" Check if the form has been submitted\nIF ls_form->is_submitted( ) EQ abap_true.\n\n  \" Get the input values from the form\n  lv_num1 = ls_form->get_input_field_value( 'NUM1' ).\n  lv_num2 = ls_form->get_input_field_value( 'NUM2' ).\n\n  \" Calculate the sum\n  lv_sum = lv_num1 + lv_num2.\n\n  \" Display the result\n  WRITE: / 'The sum of', lv_num1, 'and', lv_num2, 'is', lv_sum.\n\nENDIF.\n\n\" Create a form to input two numbers\nFORM display_form.\n\n  DATA: ls_form TYPE REF TO cl_abap_form_factory=>form_new,\n        lv_html  TYPE string.\n\n  \" Create a new form\n  CREATE OBJECT ls_form TYPE cl_abap_form_factory=>form_new(\n    EXPORTING\n      form_key     = 'ADD'\n      description  = 'Add Two Numbers'\n      data_object   = 'ZADD_FORM'\n  ).\n\n  \" Add input fields to the form\n  ls_form->add_input_field(\n    EXPORTING\n      name       = 'NUM1'\n      label_text = 'Enter first number:'\n  ).\n\n  ls_form->add_input_field(\n    EXPORTING\n      name       = 'NUM2'\n      label_text = 'Enter second number:'\n  ).\n\n  \" Create a submit button\n  ls_form->add_submit_button(\n    EXPORTING\n      text     = 'Add'\n  ).\n\n  \" Get the HTML code for the form\n  lv_html = ls_form->get_html( ).\n\n  WRITE: / lv_html.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a replace method for a string class which replaces the given string with a given set of characters.",
        "input": "string = \"Hello World!\"\nreplace_with = \"Greetings!\"",
        "output": "def replace(self, replace_with):\n    new_string = \"\"\n    for char in self:\n        if char == \" \":\n            new_string += replace_with\n        else:\n            new_string += char\n    return new_string",
        "abap": "CLASS lcl_replace DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      replace IMPORTING\n                value(replace_with) TYPE string\n                RETURNING\n                VALUE(result) TYPE string.\nENDCLASS.\n\nCLASS lcl_replace IMPLEMENTATION.\n  METHOD replace.\n    DATA: lv_string TYPE string.\n\n    \" Assume the current object has a string attribute (e.g. in an instance of this class)\n    DATA: lr_current_object TYPE REF TO data,\n          lv_attribute_name TYPE string VALUE 'string_attribute'. \" Replace with actual name\n\n    SET PARAMETER ID 'A1' FIELD lv_attribute_name.\n    GET ATTRIBUTE\n      EXPORTING\n        value  = lr_current_object\n      IMPORTING\n        attr   = DATA(lv_string).\n\n    LOOP AT lv_string INTO DATA(line).\n      SPLIT line AT space INTO TABLE DATA(lines_split).\n      READ TABLE lines_split WITH KEY table_line = replace_with TRANSPORTING NO FIELDS.\n      IF sy-subrc <> 0.\n        SPLIT line AT space INTO lines_split.\n        REPLACE ALL OCCURRENCES OF ' ' IN lines_split SEPARATED BY space WITH replace_with INTO DATA(result_string).\n        CONCATENATE result_string line INTO result_line SEPARATED BY space.\n      ELSE.\n        CONCATENATE lines_split line INTO result_line SEPARATED BY space.\n      ENDIF.\n    ENDLOOP.\n\n    result = lr_current_object->string_attribute. \" Replace with actual name\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Compile a C program to print the number of arguments passed.",
        "input": "#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n    printf(\"number of arguments passed: %d\\n\", argc);\n    return 0;\n}",
        "output": "gcc -o program program.c",
        "abap": "REPORT zprogram.\n\nCLASS lcl_program DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main.\nENDCLASS.\n\nCLASS lcl_program IMPLEMENTATION.\n  METHOD main.\n    WRITE: 'Program executed successfully.'.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_program TYPE REF TO lcl_program.\n  CREATE OBJECT lo_program.\n  lo_program->main( ).\n"
    },
    {
        "instruction": "Print out the content of a two-dimensional array.",
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "def print_2d_array(arr):\n    for row in arr:\n        for el in row:\n            print(el, end=' ')\n        print(\"\")",
        "abap": "CLASS lcl_print_2d_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      print_2d_array IMPORTING value(it_arr) TYPE ty_2d_array.\nENDCLASS.\n\nCLASS lcl_print_2d_array IMPLEMENTATION.\n  METHOD print_2d_array.\n    LOOP AT it_arr INTO DATA(ls_row).\n      LOOP AT ls_row INTO DATA(lv_elem).\n        WRITE: lv_elem, space.\n      ENDLOOP.\n      WRITE:/.\n    ENDLOOP.\n  ENDMETHOD.\n\nTYPES:\n  BEGIN OF TYPE ty_2d_array,\n    arr TYPE STANDARD TABLE OF string,\n  END OF TYPE ty_2d_array.\n\nDATA: lr_arr TYPE lcl_print_2d_array=>ty_2d_array.\nINITIALIZER.\nlr_arr-arr = VALUE #( ( \"Row1\" \"Row2\"\n      ( \"A\" \"B\" ) ( \"C\" \"D\" )\n    ).\n\nlcl_print_2d_array=>print_2d_array( lr_arr ).\n"
    },
    {
        "instruction": "Is it possible to set a breakpoint that is not associated with any source code line in a GDB program?",
        "input": "",
        "output": "Yes, it is possible to set a breakpoint that is not associated with any source code line in a GDB program. For example, you can set a breakpoint on a function or a memory address. You can do this by using the break command with '*' prefix followed by the address of the breakpoint.",
        "abap": "REPORT ztest.\n\n\" Define an external function to be used as a breakpoint\nFORM demo_function.\n  WRITE: / 'Breakpoint hit'.\nENDFORM.\n\n\" Set a breakpoint on the line that calls the external function\nSET DEBUG POINTERS FOR ALL LINE *L0002.\n\nSTART-OF-SECTION.\n  \" Call the external function to trigger the breakpoint\n  CALL DEMO_FUNCTION( ).\nEND-OF-SECTION.\n"
    },
    {
        "instruction": "Create a function in JavaScript that takes an array of integers and returns the largest number.",
        "input": "",
        "output": "function findMax(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}",
        "abap": "FORM find_max\n  USING\n    p_arr TYPE STANDARD TABLE OF i.\n\nDATA: lv_max TYPE f.\n\n\" initialize max with the first element of the array\nlv_max = p_arr[ 1 ].\n\nDO.\n  \" loop through the array starting from the second element\n  LOOP AT p_arr FROM 2 INTO DATA(lv_current).\n    IF lv_current > lv_max.\n      \" update max if current value is larger\n      lv_max = lv_current.\n    ENDIF.\n  ENDDO.\nENDDO.\n\n\" return the maximum value found\nRETURN lv_max.\n"
    },
    {
        "instruction": "Create a Swift code that show the number of days in the given month.",
        "input": "int month = 5",
        "output": "let month = 5\nlet daysEndingInth = [3, 0, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3]\nlet daysInMonth = daysEndingInth[month - 1] \nprint(\"The number of days in the month of \\(month) is \\(daysInMonth).\")",
        "abap": "DATA: lv_month TYPE i VALUE 5,\n      lt_days TYPE STANDARD TABLE OF i,\n      lv_days_in_month TYPE i.\n\n\" Define the array of days ending with 3 or 0\nlt_days = value #( 3 0 3 2 3 2 3 3 2 3 2 3 ).\n\n\" Get the number of days in the current month\nlv_days_in_month = lt_days[ lv_month - 1 ].\n\n\" Print the result\nWRITE: / 'The number of days in the month of ', lv_month, ' is ', lv_days_in_month.\n"
    },
    {
        "instruction": "Purge all rows from the following dataframe that have a negative value in the Age column.",
        "input": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)",
        "output": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)\n\ndf = df[df['Age'] >= 0]",
        "abap": "REPORT zage_filter.\n\nTYPES: BEGIN OF ty_person,\n         name TYPE string,\n         age   TYPE i,\n       END OF ty_person.\n\nDATA: ls_person LIKE LINE OF STANDARD TABLE OF ty_person.\nDATA: lt_data TYPE STANDARD TABLE OF ty_person.\n\n\" Create internal table with data\nAPPEND VALUE #( name = 'Jerry' age = 20 ) TO lt_data.\nAPPEND VALUE #( name = 'Peter' age = 22 ) TO lt_data.\nAPPEND VALUE #( name = 'Paul' age = -18 ) TO lt_data.\nAPPEND VALUE #( name = 'John' age = 24 ) TO lt_data.\n\n\" Filter internal table for positive ages\nLOOP AT lt_data INTO ls_person WHERE age >= 0.\n  WRITE: / ls_person-name ls_person-age.\nENDLOOP.\n"
    },
    {
        "instruction": "Classify the given article as spam or ham.",
        "input": "Hello everyone, this is a spam message.",
        "output": "Spam",
        "abap": "REPORT zexample.\n\nDATA: lv_text TYPE string VALUE 'Hello, World!'.\n\nWRITE: / lv_text.\n"
    },
    {
        "instruction": "Pre-process the following dataset and convert it into a tabular format using Pandas.",
        "input": "data = [{\"name\": \"john\", \"age\": 20, \"location\": \"New York\"},\n        {\"name\": \"sarah\", \"age\": 30, \"location\": \"Los Angeles\"}]",
        "output": "import pandas as pd\n\ndf = pd.DataFrame(data)\n\n# Create tabular format \n df = df[[\"name\", \"age\", \"location\"]]",
        "abap": "DATA: ls_data TYPE ty_data,\n      lt_data TYPE STANDARD TABLE OF ty_data.\n\n\" Assuming that you have a typed table definition for the data\nTYPES: BEGIN OF ty_data.\n  name TYPE string,\n  age   TYPE i,\n  location TYPE string.\n  ENDS OF ty_data.\n\nls_data-name = 'John Doe'.\nls_data-age = 30.\nls_data-location = 'New York'.\n\nAPPEND ls_data TO lt_data.\n\n\" Select the columns to display\nDATA: lt_columns TYPE TABLE OF string.\n\nlt_columns = VALUE #( ( \"name\" )\n                    ( \"age\" )\n                    ( \"location\" ) ).\n\ncl_salv_table=>display( it_out_tab  = lt_data\n                         it_column_cat = lt_columns ).\n"
    },
    {
        "instruction": "Write SQL code to find the product details of the item with ID 1234.",
        "input": "",
        "output": "SELECT * FROM products WHERE id = 1234;",
        "abap": "DATA: lv_id TYPE i.\n\nlv_id = 1234.\nSELECT * FROM products INTO TABLE @DATA(products) WHERE id = @lv_id.\n"
    },
    {
        "instruction": "Write a Python program that tests if a given number is divisible by 3.",
        "input": "num = 51",
        "output": "if (num % 3 == 0):\n    print(\"The number is divisible by 3\")\nelse:\n    print(\"The number is not divisible by 3\")",
        "abap": "DATA: lv_num TYPE i.\n\nlv_num = num. \" assume 'num' is already declared and initialized\n\nIF num MOD 3 EQ 0.\n    WRITE: / 'The number is divisible by 3'.\nELSE.\n    WRITE: / 'The number is not divisible by 3'.\nENDIF.\n"
    },
    {
        "instruction": "Write a function that checks if a string is a palindrome or not.",
        "input": "string = \"ana\"",
        "output": "def is_palindrome(string):\n    rev = ''.join(reversed(string))\n    if rev == string:\n        return True\n    else:\n        return False",
        "abap": "CLASS lcl_is_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome\n        IMPORTING\n          value(string) TYPE string\n        RETURNING\n          VALUE(result) TYPE abap_bool .\nENDCLASS.\n\nCLASS lcl_is_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: rev TYPE string.\n\n    \" Reverse the input string\n    LOOP AT string INTO rev FROM strlen( val = string ) - 1 TO 0 BY -1.\n      SET PARAMETER ID 'C'.\n      APPEND chr09 TO parameter.\n      TRANSLATE parameter USING space.\n      WRITE : rev.\n    ENDLOOP.\n\n    \" Compare the original and reversed strings\n    IF string EQ rev.\n      result = abap_true.\n    ELSE.\n      result = abap_false.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write code to implement Bubble Sort.",
        "input": "arr = [5, 8, 2, 4, 7, 10]",
        "output": "def bubble_sort(arr):\n    \"\"\"\n    Implementation of the Bubble Sort algorithm.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
        "abap": "REPORT zbubble_sort.\n\nCLASS lcl_bubble_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort IMPORTING\n        p_arr TYPE STANDARD TABLE OF i .\nENDCLASS.\n\nCLASS lcl_bubble_sort IMPLEMENTATION.\n  METHOD sort.\n    DATA: lv_i TYPE i,\n          lv_j TYPE i,\n          lv_temp TYPE i.\n\n    DO.\n      lv_i = sy-index - 1.\n      IF lv_i < 0.\n        EXIT.\n      ENDIF.\n\n      DO lv_i TIMES.\n        lv_j = lv_i.\n        LOOP AT p_arr INTO DATA(p_arr) FROM lv_j.\n          IF p_arr > p_arr+1.\n            MOVE-CORRESPONDING p_arr+1 TO p_arr.\n            MOVE-CORRESPONDING p_arr  TO p_arr+1.\n          ENDIF.\n\n          AT END-OF-LOOP.\n            lv_j = lv_j + 1.\n          ENDEXECUTE.\n      ENDDO.\n\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a basic REST API in python that takes a string as input and returns the reversed string",
        "input": "",
        "output": "from fastapi import FastAPI\n@app.get(\"/reverse-string/{string}\")\n\ndef reverse_string(string: str):\n    return string[::-1]",
        "abap": "CLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_reversed TYPE string.\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_reversed TYPE string VALUE ''.\n\n    DO strlen( iv_string ) TIMES.\n      CONCATENATE lv_reversed iv_string+0(1) INTO lv_reversed OVERWRITE result.\n      DELETE iv_string INDEX 1.\n    ENDDO.\n\n    ev_reversed = lv_reversed.\n  ENDMETHOD.\n\nENDCLASS.\n\n\" Example usage\nDATA: lo_reverse_string TYPE REF TO lcl_reverse_string,\n      ls_result TYPE string.\n\nCREATE OBJECT lo_reverse_string.\nlo_reverse_string->reverse_string(\n  EXPORTING\n    iv_string = 'Hello World'\n  IMPORTING\n    ev_reversed = ls_result ).\n\nWRITE: /ls_result. \" Output: dlroW olleH\n"
    },
    {
        "instruction": "Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.",
        "input": "\"1,2,3,4\"",
        "output": "def sum_numbers(nums): \n    nums = nums.split(',')\n    total = 0\n  \n    # Traverse the string and add all elements \n    # of it to the total. \n    for i in range(len(nums)): \n        total += int(nums[i]) \n  \n    # return total \n    return total \n\nprint(sum_numbers(\"1,2,3,4\")) # 10",
        "abap": "REPORT zsum_numbers.\n\nCLASS lcl_sum_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_numbers IMPORTING\n        nums TYPE string\n        EXPORTING\n          result TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_numbers IMPLEMENTATION.\n  METHOD sum_numbers.\n    DATA: lv_total TYPE i VALUE 0,\n          lv_num TYPE p.\n\n    \" Split the input string by comma and convert each number to an integer\n    SPLIT nums AT ',' INTO TABLE DATA(lt_nums).\n    LOOP AT lt_nums INTO Data(num) .\n      ADD num TO lv_total.\n    ENDLOOP.\n\n    result = lv_total.\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM sum_numbers USING '1,2,3,4' CHANGING result TYPE i.\n  WRITE: / result. \" Outputs: 10\n"
    },
    {
        "instruction": "Write an SQL query to calculate the average order price for each product category in the \"orders\" table.",
        "input": "",
        "output": "SELECT category, AVG(price) as \"Average Order Price\"\nFROM orders\nGROUP BY category;",
        "abap": "REPORT zaverage_order_price.\n\nTYPES: BEGIN OF ty_orders,\n          category  TYPE string,\n          price     TYPE f,\n        END OF ty_orders.\n\nDATA: lt_orders TYPE STANDARD TABLE OF ty_orders,\n      ls_orders LIKE LINE OF lt_orders.\n\nSELECT *\n  INTO CORRESPONDING FIELDS FROM orders\n  APPENDING TABLE lt_orders.\n\nLOOP AT lt_orders INTO ls_orders.\n  UPDATE lt_orders SET ls_orders-price = ls_orders-price / 100. \" Falls in Tabelle Daten von anderen Systemen stammen, muss das Geldwert geteilt werden\nENDLOOP.\n\nDATA: lv_average_price TYPE f,\n      lv_category     TYPE string.\n\nLOOP AT lt_orders INTO ls_orders.\n  lv_average_price = ls_orders-price.\n  lv_category    = ls_orders-category.\n  IF sy-index > 1.\n    lv_average_price = ( lv_average_price + ls_orders-price ) / 2.\n  ENDIF.\n  DELETE lt_orders INDEX sy-tabix.\n\n  INSERT ls_orders INTO TABLE lt_orders.\n\n  CLEAR: ls_orders,\n         lv_average_price,\n         lv_category.\n\nENDLOOP.\n\nDATA: lt_result TYPE STANDARD TABLE OF ty_orders,\n      ls_result LIKE LINE OF lt_result.\n\nLOOP AT lt_orders INTO ls_orders.\n  ls_orders-average_order_price = lv_average_price.\n  INSERT ls_orders INTO TABLE lt_result.\nENDLOOP.\n\nSELECT category\n  FROM orders\n  GROUP BY category\n  APPENDING SUBTABLE CORRESPONDING FIELDS OF TABLE lt_result. \" Hier wird die resultierende Tabelle dem SELECT-Angebot hinzugef\u00fcgt\n\nDATA: lo_data TYPE REF TO cl_salv_table,\n      ls_fieldcat TYPE salv_dict_fieldcat.\n\nCALL METHOD cl_salv_table=>set_model(\n  EXPORTING\n    model              = 'SAP_LIASC'\n    i_default          = abap_true ).\n\nCALL METHOD cl_salv_table=>display(\n  CHANGING\n    it_outtab          = lt_result ).\n\nDATA: lr_grid TYPE REF TO cl_salv_column.\nCALL METHOD lo_data->get_columns(\n  IMPORTING\n    et_columns       = DATA(lt_columns) ).\nLOOP AT lt_columns INTO ls_columns.\n  CALL METHOD lr_grid->set_sort_expressions( 2 ).\n  IF ls_columns-columnname = 'category'.\n    CALL METHOD lr_grid->set_sort_expressions( 0 ).\n  ENDIF.\n\nENDLOOP.\n\nDATA: lv_counter TYPE i,\n      ls_data LIKE LINE OF lt_result.\n\nLOOP AT lt_result INTO ls_data.\n  lv_counter = sy-tabix.\n  ls_data-average_order_price = ls_data-average_order_price / lv_counter.\n  MODIFY TABLE lt_result FROM ls_data INDEX sy-tabix.\nENDLOOP.\n\ncl_salv_table=>refresh( ).\n"
    },
    {
        "instruction": "Implement a function that finds the maximum element in a given array.",
        "input": "arr = [45, 7, 0, 82, 23]",
        "output": "def find_max_element(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \narr = [45, 7, 0, 82, 23]\nmax_element = find_max_element(arr) \nprint(max_element)",
        "abap": "REPORT zmax_element.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_max_element IMPORTING\n                          !iv_array TYPE STANDARD TABLE OF i\n                        EXPORTING\n                          value( ev_result ) TYPE i.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD find_max_element.\n    DATA: lv_max_element TYPE i,\n          lv_index TYPE i.\n\n    lv_max_element = iv_array[ 1 ].\n    DO.\n      lv_index = sy-index + 1.\n      IF lv_index > lines( iv_array ).\n        EXIT.\n      ENDIF.\n      IF iv_array[ lv_index ] > lv_max_element.\n        lv_max_element = iv_array[ lv_index ].\n      ENDIF.\n    ENDDO.\n\n    ev_result = lv_max_element.\n  ENDMETHOD.\n\nINITIALIZATION.\n  DATA: lt_numbers TYPE STANDARD TABLE OF i,\n        lv_max_element TYPE i.\n\n  lt_numbers = VALUE #( ( 45 ) ( 7 ) ( 0 ) ( 82 ) ( 23 ) ).\n  lv_max_element = lcl_main=>find_max_element( iv_array = lt_numbers ).\n\n  WRITE: / 'Max element:', lv_max_element.\nEND-OF-INITIALIZATION.\n\nCLASS zmax_element DEFINITION INHERITING FROM cl_alv_table DEFINITION.\nENDCLASS.\n\nCLASS zmax_element IMPLEMENTATION.\n  METHOD on_before_output.\n    DATA: lo_layout TYPE REF TO if_salv_layout_options,\n          lo_model   TYPE REF TO if_sav_service_model,\n          lt_numbers TYPE STANDARD TABLE OF i.\n\n    lt_numbers = VALUE #( ( 45 ) ( 7 ) ( 0 ) ( 82 ) ( 23 ) ).\n\n    \" get layout and model\n    lo_layout = cl_salv_parameters=>get_parameter( 'layout' ).\n    lo_model   = cl_sav_service_model=>if_sav_service_model~new( ).\n\n    \" set data to the model\n    lo_model->set_data( lt_numbers ).\n\n    \" use ALV for output\n    super->on_before_output( ).\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_max_element TYPE i.\nlv_max_element = lcl_main=>find_max_element( iv_array = VALUE #( ( 45 ) ( 7 ) ( 0 ) ( 82 ) ( 23 ) ) ).\nWRITE: / 'Max element:', lv_max_element.\n"
    },
    {
        "instruction": "Please generate a system variable in C language.",
        "input": "",
        "output": "#include <stdlib.h>\nint system_variable = 5;",
        "abap": "DATA: lv_system_variable TYPE i VALUE 5.\n"
    },
    {
        "instruction": "What is the meaning of static in Java?",
        "input": "",
        "output": "In Java, the static keyword is used to indicate that an entity is associated with a class rather than an instance of a class. It can be used to denote class variables, class methods and other class elements, and is also used in various access modifiers. Static members are associated with the class itself, rather than any particular instance of the class.",
        "abap": "DATA: lv_static_variable TYPE i. \" Not static\nDATA: CLASS-lv_static_variable TYPE i. \" Static variable\n\nCLASS-lv_static_variable = 10.\nlv_static_variable = 20.\n"
    },
    {
        "instruction": "Create a Java 8 Stream to filter a list of objects by a given field.",
        "input": "[\n    {'name': 'John', 'age': 20},\n    {'name': 'Smith', 'age': 30},\n    {'name': 'Bill', 'age': 40}\n]",
        "output": "List<Object> list = Arrays.asList({\n    {'name': 'John', 'age': 20},\n    {'name': 'Smith', 'age': 30},\n    {'name': 'Bill', 'age': 40}\n});\n\nStream<Object> stream = list.stream();\n\n// Filter records whose age greater than 25\nstream.filter(record -> (int) record.get(\"age\") > 25).forEach(System.out::println);",
        "abap": "TYPES: BEGIN OF ty_person,\n          name  TYPE string,\n          age   TYPE i,\n        END OF ty_person.\n\nDATA: list TYPE STANDARD TABLE OF ty_person WITH DEFAULT KEY,\n      stream TYPE REF TO cl_lrc_stream_iterator.\nDATA: ls_person LIKE LINE OF list.\n\n\" populate the internal table\nINSERT VALUE #( name = 'John' age = 20 ) INTO table list.\nINSERT VALUE #( name = 'Smith' age = 30 ) INTO table list.\nINSERT VALUE #( name = 'Bill' age = 40 ) INTO table list.\n\n\" create a stream iterator for the internal table\nstream = cl_lrc_stream_iterator=>create( itab = list ).\n\n\" filter records whose age greater than 25\nDATA: filtered_stream TYPE REF TO cl_lrc_stream_iterator.\nfiltered_stream = stream->filter(\n  CHAINING method mo_stream_type->is_greater_than (\n    \"age\" = 25 ) ).\n\n\" iterate over the filtered stream and print each record\nDO.\n  DATA: lv_is_next TYPE abap_bool.\n  WHILE filtered_stream->has_next( IMPORTING next = lv_is_next ).\n    IF lv_is_next IS INITIAL.\n      EXIT.\n    ENDIF.\n\n    DATA: ls_person LIKE LINE OF list.\n    filtered_stream->next( IMPORTING data = ls_person ).\n\n    WRITE: / ls_person-name, ls_person-age.\n\n  ENDDO.\n\nENDPROGRAM.\n"
    },
    {
        "instruction": "Write a JavaScript function for reversing a string.",
        "input": "",
        "output": "function reverseString(str) {\n    let revStr = '';\n    for(let i = str.length-1; i >= 0; i--) {\n        revStr += str[i];\n    }\n    return revStr;\n}",
        "abap": "CLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          VALUE(im_str) TYPE string\n        RETURNING\n          VALUE(ro_reversed) TYPE string .\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_index TYPE i,\n          ls_char TYPE c.\n\n    DO strlen( im_str ) TIMES.\n      ADD 1 TO lv_index.\n      SPLIT im_str AT space INTO TABLE DATA(lt_chars).\n      TRANSFER lt_chars[ lv_index ] TO ro_reversed.\n    ENDDO.\n\n    \"or alternatively:\n\n    DATA: lv_length TYPE i,\n          lv_char   TYPE c.\n\n    lv_length = strlen( im_str ).\n    LOOP AT im_str IN reversed.\n      ASSIGN lv_char TO FIELD-SYMBOL(<fs_char>).\n      IF sy-index > lv_length.\n        EXIT.\n      ENDIF.\n      ro_reversed+0(1) = <fs_char>.\n    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a C# program to create the list of prime numbers in a given range.",
        "input": "",
        "output": "public class PrimeNumber\n{\n static void Main()\n {\n int n1 = 2;\n int n2 = 10;\n while (n1 < n2)\n {\n bool isPrime = true;\n for (int i = 2; i <= n1 / 2; i++)\n {\n if (n1 % i == 0)\n {\n isPrime = false;\n break;\n }\n }\n if (isPrime)\n Console.Write(n1 + \" \");\n n1++;\n }\n }\n}",
        "abap": "CLASS lcl_prime_number DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_prime IMPORTING\n                    iv_number TYPE i\n        EXPORTING\n          ev_is_prime TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_prime_number IMPLEMENTATION.\n  METHOD check_prime.\n    DATA: lv_i TYPE i.\n    FIELD-SYMBOLS: <ls_factor> LIKE TABLE OF sy-index.\n\n    CLEAR ev_is_prime.\n    LOOP AT sy-tcline INTO DATA(lv_tc_line) FROM 2 LE  iv_number / 2 .\n      IF MOD( iv_number, lv_tc_line ) = 0 .\n        ev_is_prime = abap_false.\n        EXIT.\n      ENDIF.\n    ENDLOOP.\n\n    ev_is_prime = abap_true.\n  ENDMETHOD.\n\nCLASS lcl_main DEFINITION INHERITING FROM cl_alv_application_object DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main IMPORTING\n             iv_n1 TYPE i\n             iv_n2 TYPE i\n       EXPORTING\n         ev_output TYPE string.\n\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD main.\n    DATA: lv_prime TYPE abap_bool,\n          lr_pn TYPE REF TO lcl_prime_number,\n          lv_n TYPE i.\n\n    CREATE OBJECT lr_pn.\n\n    DO iv_n2 - iv_n1 TIMES .\n      lv_n = iv_n1 + sy-index - 1.\n      lr_pn->check_prime( exporting\n                            iv_number   = lv_n\n                          importing\n                            ev_is_prime = lv_prime ).\n\n      IF lv_prime CP 'ABAP_TRUE'.\n        APPEND lv_n TO ev_output.\n      ENDIF.\n    ENDDO.\n\n    FREE OBJECT lr_pn.\n\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_app TYPE REF TO cl_alv_application_object,\n         lo_app_obj TYPE REF TO lcl_main.\n\n  CREATE OBJECT lo_app_obj .\n  CALL METHOD lo_app_obj->main(\n      exporting\n        iv_n1 = 2\n        iv_n2 = 10\n      importing\n        ev_output   = DATA(lv_output) ).\n\n  WRITE: / lv_output.\n"
    },
    {
        "instruction": "Append a string \"Welcome to the party\" at the end of the provided array.",
        "input": "words = [\"Hello\", \"there\"]",
        "output": "words = [\"Hello\", \"there\", \"Welcome to the party\"]",
        "abap": "DATA: lv_words TYPE STANDARD TABLE OF string.\n\nlv_words = VALUE #( ( \"Hello\" )\n                   ( \"there\" )\n                   ( \"Welcome to the party\" ) ).\n"
    },
    {
        "instruction": "Compare the two strings character-by-character and return the number of differences using Java.",
        "input": "String 1: Hello\nString 2: Halle",
        "output": "int diff = 0;\n\nfor (int i=0; i < Math.min(str1.length(), str2.length()); i++) {\n    if (str1.charAt(i) != str2.charAt(i)) {\n        diff++;\n    }\n}\nreturn diff;",
        "abap": "DATA: lv_diff TYPE i.\n\nLOOP AT ip_str1 INTO DATA(lv_char)\n  WHILE lv_char-index LT\n      MIN( strlen( ip_str1 ), strlen( ip_str2 ) ).\n\n  IF ip_str1+lv_char-index CA ip_str2+lv_char-index.\n    ADD 1 TO lv_diff.\n  ENDIF.\n\nENDLOOP.\n\nRETURN lv_diff.\n"
    },
    {
        "instruction": "Make a code to determine whether a given number is prime or not.",
        "input": "",
        "output": "def is_prime(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True",
        "abap": "CLASS lcl_prime CHECKED METHOD is_prime\n  IMPORTING\n    iv_number TYPE i.\n\n  DATA: lv_sqrt TYPE f,\n        lv_divisor TYPE i.\n\n  IF iv_number <= 1.\n    RETURN.\n  ENDIF.\n\n  \" Calculate square root of number\n  lv_sqrt = sqrt( iv_number ).\n\n  DO.\n    \" Check if any divisor up to the square root exists\n    lv_divisor = lv_sqrt + 0.5.\n    IF sy-index = 0.\n      \" Square root is an integer, no divisors needed for the result to be prime\n      RETURN abap_true.\n    ENDIF.\n\n    \" Check if number is divisible by any divisor\n    IF iv_number MOD lv_divisor = 0.\n      RETURN abap_false.\n    ENDIF.\n\n    \" Increase divisor until it's greater than square root or no more divisors needed\n    lv_divisor = sy-index + 1.\n  ENDDO.\n\n  \" If loop has run without finding any divisors, number is prime\n  RETURN abap_true.\nENDCLASS.\n"
    },
    {
        "instruction": "Clean the given data in Python by replacing NaN and None with 0.",
        "input": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])",
        "output": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\n\ndf.fillna(0, inplace = True)",
        "abap": "TYPES: BEGIN OF ty_data,\n          id TYPE i,\n          name TYPE string,\n          age TYPE f,\n       END OF ty_data.\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_data.\n\nAPPEND VALUE #( id = 1 name = 'John' age = cl_abap_char_utilities=>no_check ) TO lt_data.\nAPPEND VALUE #( id = 2 name = 'Jane' age = 18.0 ) TO lt_data.\nAPPEND VALUE #( id = 3 name = 'Rudy' age = cl_abap_math=>nan() ) TO lt_data.\n\nDATA: lo_table TYPE REF TO cl_samlll_table,\n      lv_row LIKE LINE OF lt_data.\n\nCREATE OBJECT lo_table.\n\nDO.\n  WHILE sy-index <= lines( lt_data ).\n\n    MOVE-CORRESPONDING lt_data[ sy-index ] TO lv_row.\n    lo_table->insert_value( lv_row ).\n    MODIFY lt_data INDEX sy-index REFERENCE INTO lv_row.\n    ENDDO.\nEND.\n\nDATA: lv_index TYPE i,\n      lv_value TYPE f.\n\nLOOP AT lt_data ASSIGNING <ls_table_line>.\n  lv_index = sy-tabix.\n  IF ls_table_line-age IS INITIAL.\n    REPLACE ALL OCCURRENCES OF 'INITIAL' IN ls_table_line-age WITH '0'.\n  ENDIF.\n  MODIFY TABLE lt_data INDEX lv_index FROM ls_table_line.\nENDLOOP.\n\nDATA: lo_dataframe TYPE REF TO cl_abap_excel_df,\n      lo_context TYPE REF TO if_mdh_context.\n\nlo_dataframe = cl_abap_excel_df=>create( ).\n\nDO.\n  WHILE sy-index <= lines( lt_data ).\n\n    lo_context->set_row( lv_index ).\n    lo_dataframe->insert_value( <ls_table_line> ).\n    MODIFY lt_data INDEX sy-index REFERENCE INTO ls_table_line.\n    ENDDO.\nEND.\n\nlo_context = cl_abap_excel_df=>create_context(\n  context-attributes = VALUE #( ( name = 'id' ) ( name = 'name' ) ( name = 'age' ) )\n).\n"
    },
    {
        "instruction": "Find all substrings from a given string.",
        "input": "",
        "output": "def find_substring(str):\n    substrings = []\n    for length in range(1, len(str)+1):\n        for start in range(len(str)- length + 1):\n            substrings.append(str[start:start+length])\n    return substrings",
        "abap": "TYPES: ty_string TYPE string.\n\nCLASS lcl_substring_finder DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_substrings\n        IMPORTING\n          iv_string TYPE ty_string\n        RETURNING\n          VALUE(rv_substrings) TYPE TABLE OF ty_string.\nENDCLASS.\n\nCLASS lcl_substring_finder IMPLEMENTATION.\n  METHOD find_substrings.\n    DATA: lv_length TYPE i,\n          lt_substrings TYPE TABLE OF ty_string.\n\n    DO.\n      ADD 1 TO lv_length.\n      IF lv_length > strlen( iv_string ).\n        EXIT.\n      ENDIF.\n      DATA(lv_start) = sy-index - lv_length + 1.\n      WHILE lv_start <= strlen( iv_string ) AND lv_length <= strlen( iv_string ).\n        APPEND substring( val = iv_string\n                          off = lv_start\n                          len = lv_length ) TO lt_substrings.\n        ADD 1 TO lv_length.\n        SUBTRACT 1 FROM lv_start.\n      ENDWHILE.\n    ENDDO.\n\n    rv_substrings = lt_substrings.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create an array from elements 0 to 10 in JavaScript.",
        "input": "",
        "output": "const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\n\nlv_array = VALUE #( ( 0 ) ( 1 ) ( 2 ) ( 3 ) ( 4 )\n                     ( 5 ) ( 6 ) ( 7 ) ( 8 )\n                     ( 9 ) ( 10 ) ).\n\n\" Alternatively, you can use a DO loop to populate the array\nDATA: lv_array TYPE STANDARD TABLE OF i.\n\nDO 11 TIMES.\n  APPEND sy-index TO lv_array.\nENDDO.\n"
    },
    {
        "instruction": "Write a SQL query to get the total amount from orders table where status is \"complete\".",
        "input": "",
        "output": "SELECT SUM(amount)\nFROM orders\nWHERE status = 'completed';",
        "abap": "DATA: lv_sum TYPE p.\n\nSELECT SUM( oamount ) INTO lv_sum\n  FROM ord\n  WHERE ostaus = 'C'.\n\nWRITE: / lv_sum.\n"
    },
    {
        "instruction": "Sort the given list of numbers in ascending order using Python.",
        "input": "numbers = [3, 5, 7, 1, 2]",
        "output": "sorted_numbers = [1, 2, 3, 5, 7]",
        "abap": "DATA: sorted_numbers TYPE STANDARD TABLE OF i.\nsorted_numbers = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 5 ) ( 7 ) ).\n"
    },
    {
        "instruction": "Generate a list of odd numbers from 80 to 100.",
        "input": "",
        "output": "[81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i.\n\nlv_list = VALUE #( ( 81 )\n                     ( 83 )\n                     ( 85 )\n                     ( 87 )\n                     ( 89 )\n                     ( 91 )\n                     ( 93 )\n                     ( 95 )\n                     ( 97 )\n                     ( 99 ) ).\n\nWRITE: / lv_list.\n"
    },
    {
        "instruction": "Describe how to create a 'dockerfile'",
        "input": "",
        "output": "A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.",
        "abap": "DATA: lv_base_image TYPE string,\n       lt_commands   TYPE ty_table.\n\nlv_base_image = 'ubuntu:latest'.\nlt_commands  = VALUE #( (\n                      description = 'Update package manager'\n                      command     = '/bin/bash -c \"apt-get update\"'\n                    )\n                    ( description = 'Install dependencies'\n                      command     = '/bin/bash -c \"apt-get install -y curl\"'\n                    )\n                    ( description = 'Set environment variables'\n                      command     = '/bin/bash -c \"export FOO=bar; export BAZ=qux\"'\n                    )\n                    ( description = 'Copy files from host filesystem to image'\n                      command     = '/bin/bash -c \"cp /path/to/file.txt ./\"'\n                    )\n                    ( description = 'Set entrypoint for container'\n                      command     = '/bin/bash -c \"exec /path/to/entrypoint.sh\"'\n                    ) ).\n\nLOOP AT lt_commands INTO DATA(ls_command).\n  WRITE: / ls_command-command.\nENDLOOP.\n\nDATA: lv_image_name TYPE string,\n      lv_command    TYPE string.\n\nlv_image_name = 'my-image'.\nlv_command   = '/bin/bash -c \"FROM ' || lv_base_image || '; ' && ls_command-command && ' RUN true\" '.\n\nWRITE: lv_image_name, lv_command.\n"
    },
    {
        "instruction": "Given a character sequence, find the longest palindromic substring.",
        "input": "sequence: madam",
        "output": "madam",
        "abap": "A palindrome!\n\nHere is the translation of \"madam\" into ABAP (Advanced Business Application Programming):\n\nDATA: lv_palindrome TYPE string.\n\nlv_palindrome = 'MADAM'.\n\nWRITE: lv_palindrome."
    },
    {
        "instruction": "Explain the concept of Generative Adversarial Networks (GANs).",
        "input": "",
        "output": "Generative Adversarial Networks (GANs) are a type of deep neural network that are composed of two sub-networks; a generative network and a discriminative network. The generative network produces samples such as images, audio, or text that try to fool the discriminator network, which is trained to recognize real data from generated data. The two networks are trained together in an adversarial setting, in which the generator attempts to generate data that is indistinguishable from real data and the discriminator tries to distinguish real data from generated data.",
        "abap": "\" Define the interface for the Generative Adversarial Network (GAN)\nINTERFACE zif_gan.\n\n  \" Interface methods\n  METHODS:\n    \" Initialize the GAN model\n    init\n      IMPORTING\n        VALUE( iv_seeds ) TYPE i,\n    \" Generate data with the generator network\n    generate_data\n      IMPORTING\n        VALUE( iv_input ) TYPE string,\n    \" Train the discriminator network to recognize real data from generated data\n    train_discriminator\n      IMPORTING\n        VALUE( iv_real_data ) TYPE string\n        VALUE( iv_generated_data ) TYPE string,\n    \" Get the probability of a given sample being real or generated\n    get_probability\n      IMPORTING\n        VALUE( iv_sample ) TYPE string.\n\nENDINTERFACE.\n"
    },
    {
        "instruction": "Toast a Python function to swap the values of two given variables.",
        "input": "a = 10, b= 20",
        "output": "def swap(a, b): \n    a, b = b, a \n    return (a,b)",
        "abap": "CLASS lcl_swap DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      swap IMPORTING ip_a TYPE any ip_b TYPE any\n             EXPORTING ep_result TYPE ty_swap\n         RAISING   cx_no_check .\nENDCLASS.\n\nCLASS lcl_swap IMPLEMENTATION.\n  METHOD swap.\n    DATA: lv_temp TYPE string.\n    lv_temp = ip_b.\n    ip_b = ip_a.\n    ip_a = lv_temp.\n    ep_result = VALUE #( ip_a = ip_a ip_b = ip_b ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a HTML code that create a form for user to fill out their current address.",
        "input": "",
        "output": "<form action=\"\">\n    <label for=\"street\">Street</label>\n    <input type=\"text\" name=\"street\" id=\"street\">\n    <label for=\"city\">City</label>\n    <input type=\"text\" name=\"city\" id=\"city\">\n    <label for=\"state\">State</label>\n    <input type=\"text\" name=\"state\" id=\"state\">\n    <label for=\"zip\">Zip Code</label>\n    <input type=\"text\" name=\"zip\" id=\"zip\"> \n    <input type=\"submit\" value=\"Submit\">\n</form>",
        "abap": "REPORT z_address_form.\n\nDATA: ls_address TYPE ty_saddress,\n      lv_street  TYPE string,\n      lv_city    TYPE string,\n      lv_state   TYPE string,\n      lv_zip     TYPE string.\n\nPARAMETERS: p_stre TYPE string OBLIGATORY,\n            p_city TYPE string OBLIGATORY,\n            p_stat TYPE string OBLIGATORY,\n            p_zip  TYPE string OBLIGATORY.\n\nls_address-street = p_stre.\nls_address-city   = p_city.\nls_address-state  = p_stat.\nls_address-zip    = p_zip.\n\nWRITE: 'Street:', ls_address-street, '.',\n       ' City:', ls_address-city, '.',\n       ' State:', ls_address-state, '.',\n       ' Zip Code:', ls_address-zip.  \n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      submit_address\n        IMPORTING\n          p_street TYPE string\n          p_city   TYPE string\n          p_state  TYPE string\n          p_zip    TYPE string.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD submit_address.\n    ls_address-street = p_street.\n    ls_address-city   = p_city.\n    ls_address-state  = p_state.\n    ls_address-zip    = p_zip.\n\n    WRITE: 'Street:', ls_address-street, '.',\n           ' City:', ls_address-city, '.',\n           ' State:', ls_address-state, '.',\n           ' Zip Code:', ls_address-zip.  \n\n  ENDMETHOD.\nENDCLASS.\n\nINITIALIZATION.\n  PERFORM submit_address\n    USING: p_stre = '123 Street'\n            p_city = 'Anytown'\n            p_stat = 'CA'\n            p_zip  = '12345'.\n\n\"Alternatively, you can also use the following code:\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_saddress.\n\nAPPEND VALUE #( street = '123 Street' city = 'Anytown' state = 'CA' zip = '12345' ) TO lt_data.\n\nLOOP AT lt_data INTO ls_address.\n  WRITE: 'Street:', ls_address-street, '.',\n         ' City:', ls_address-city, '.',\n         ' State:', ls_address-state, '.',\n         ' Zip Code:', ls_address-zip.  \nENDLOOP.\n"
    },
    {
        "instruction": "Visualize the following on a line chart.",
        "input": "Data points = [12, 13, 19, 20, 25]",
        "output": "import matplotlib.pyplot as plt\n\ndata_points = [12, 13, 19, 20, 25]\n\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlabel(\"index\")\nplt.title(\"Line chart of data points\")\n\nplt.show()",
        "abap": "REPORT zmatplot_example.\n\nDATA: lv_data TYPE i VALUE '12' \" X-Axis\n      ,lt_data TYPE STANDARD TABLE OF i. \" Y-Axis\n\nlt_data = VALUE #( ( 12 ) ( 13 ) ( 19 ) ( 20 ) ( 25 ) ).\n\nDATA: lr_chart TYPE REF TO cl_gui_chart.\n\nCREATE OBJECT lr_chart TYPE cl_gui_chart.\n\nlr_chart->set_x_values( value #( 1 2 3 4 5 ) ).\nlr_chart->set_y_values( lt_data ).\n\nDATA: lv_title TYPE string.\nlv_title = 'Line chart of data points'.\n\nCALL METHOD of lr_chart\n  set_axis_titles(\n    EXPORTING\n      axis_titles = VALUE #( ( \"X-Axis\" \"Y-Axis\" )\n                              ( description = 'data points' title = 'Index' )\n                              ( description = lv_title ) ) ).\n\nCALL METHOD of lr_chart\n  add_line(\n    EXPORTING\n      line_description = 'Line chart'\n    CHANGING\n      line = VALUE #( ( 'Line1' 'Point1' pt_x = 1.0 pt_y = 12.0 )\n                      ( 'Line2' 'Point2' pt_x = 2.0 pt_y = 13.0 )\n                      ( 'Line3' 'Point3' pt_x = 3.0 pt_y = 19.0 )\n                      ( 'Line4' 'Point4' pt_x = 4.0 pt_y = 20.0 )\n                      ( 'Line5' 'Point5' pt_x = 5.0 pt_y = 25.0 ) ).\n\nCALL METHOD of lr_chart\n  display(\n    EXPORTING\n      chart_type = cl_gui_chart=>c_chart_type_line ).\n\nCALL METHOD of lr_chart\n  dispose( ).\n"
    },
    {
        "instruction": "Modify the following function to return the number of unique elements in a given array.",
        "input": "int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int i; \n    for (i = 0; i < n; i++) { \n        int j; \n        for (j = 0; j < i; j++) { \n            if (array[i] == array[j]) \n                break; \n        } \n        if (i == j) \n            count++; \n    } \n    return count; \n}",
        "output": "int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int visited[n]; \n    for (int i = 0; i < n; i++) \n        visited[i] = 0; \n\n    for (int i = 0; i < n; i++) { \n        if (!visited[i]) { \n            visited[i] = 1; \n            count++; \n            for (int j = i + 1; j < n; j++) \n                if (array[i] == array[j]) \n                    visited[j] = 1; \n        } \n    } \n    return count; \n}",
        "abap": "FORM count_unique USING r_array TYPE STANDARD TABLE OF i\n                  RETURNING value(r_count) TYPE i.\n\nDATA: lv_visited TYPE STANDARD TABLE OF boole_d.\n  FIELD-SYMBOLS: <fs_visit> TYPE boole_d.\n\nCREATE DATA lv_visited LIKE r_array WITH HEADER LINE.\n\nDO n = 1 TIMES.\n  DELETE lv_visited INDEX sy-index.\nENDDO.\n\nLOOP AT r_array INTO DATA(lv_value).\n  IF lv_value NOT IN lv_visited.\n    lv_visited-APPEND abap_true.\n    DO.\n      READ TABLE r_array FROM sy-tabix ASSIGNING <fs_visit>.\n      IF <fs_visit> IS ASSIGNED AND <fs_visit> = lv_value.\n        DELETE lv_visited INDEX sy-index.\n        EXIT.\n      ENDIF.\n      ENDDO.\n    lv_count = lv_count + 1.\n  ENDIF.\nENDLOOP.\n\nlv_visited-UNASSIGN.\n\nr_count = lv_count.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write code in Java to generate the Fibonacci sequence up to N numbers.",
        "input": "N = 10",
        "output": "public class Fibonacci { \n  \n    public static void FibonacciN(int n) { \n        int i, f=0, s=1; \n  \n        if (n == 1) \n            System.out.print(f+ \" \"); \n  \n        else { \n            System.out.print(f+\" \"+s+\" \"); \n  \n            for (i = 2; i < n; i++) { \n                int next = f + s; \n                System.out.print(next+\" \"); \n                f= s; \n                s = next; \n            } \n        } \n    } \n}",
        "abap": "CLASS zcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fibonacci_n IMPORTING n TYPE i\n                  EXPORTING result TYPE ti_bell-xstring .\nENDCLASS.\n\nCLASS zcl_fibonacci IMPLEMENTATION.\n  METHOD fibonacci_n.\n    DATA: f TYPE i,\n          s TYPE i,\n          next TYPE i,\n          i TYPE i.\n\n    IF n = 1.\n      WRITE: f, SPACE.\n    ELSE.\n      WRITE: f, SPACE, s, SPACE.\n      DO.\n        READ TABLE result WITH KEY index IS '2' INTO FIELD-SYMBOL(<ls_result>).\n        IF sy-subrc <> 0.\n          EXIT.\n        ENDIF.\n\n        next = f + s.\n        WRITE: next, SPACE.\n        f = s.\n        s = next.\n      ENDDO.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a code to sort the following array in increasing order.",
        "input": "[10, 2, 7, 8, 32, 4]",
        "output": "# sorting array using insertion sort\narr = [10, 2, 7, 8, 32, 4] \n\n# traverse through all array elements \nfor i in range(1, len(arr)):\n    key = arr[i]\n\n    # move elements of arr[0..i-1], that are greater than key,\n    # to one position ahead of their current position\n    j = i-1\n    while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n    arr[j + 1] = key\n  \n#print the sorted array\nprint(arr)",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i.\n\n\" Define the initial array values\nAPPEND 10 TO lv_arr.\nAPPEND 2 TO lv_arr.\nAPPEND 7 TO lv_arr.\nAPPEND 8 TO lv_arr.\nAPPEND 32 TO lv_arr.\nAPPEND 4 TO lv_arr.\n\n\" Traverse through all array elements\nDO.\n  DATA: lv_i TYPE i,\n        lv_key TYPE i,\n        lv_j TYPE i.\n\n  \" Start the traversal from the second element (index 1)\n  lv_i = sy-index - 1.\n  IF lv_i >= 0. \" Only process non-negative indices\n    lv_key = lv_arr[ lv_i ].\n    DO lv_i TIMES.\n      lv_j = lv_i - sy-index.\n      IF lv_j < 0.\n        EXIT.\n      ENDIF.\n\n      IF lv_key <= lv_arr[ lv_j ].\n        EXIT.\n      ENDIF.\n\n      \" Shift elements to the right\n      lv_arr[ lv_i - sy-index + 1 ] = lv_arr[ lv_j ].\n    ENDDO.\n\n    \" Insert the key at the correct position\n    lv_arr[ lv_i - sy-index + 1 ] = lv_key.\n  ENDDIF.\n\n  UNTIL lv_i < 0 OR sy-index > lines( lv_arr ).\n\n\" Print the sorted array\nDATA: lo_writer TYPE REF TO cl_abap_char_out,\n      lv_sorted TYPE string.\n\nlo_writer = cl_abap_char_out=>new( ).\nLOOP AT lv_arr INTO DATA(lv_value).\n  lo_writer->write( lv_value ).\n  WRITE ' '.\nENDLOOP.\nWRITE /.\n"
    },
    {
        "instruction": "Write a Python function to check if a value exists in a list.",
        "input": "",
        "output": "def is_in_list(lst, val):\n    return val in lst",
        "abap": "FORM is_in_list\n  USING\n    p_list TYPE STANDARD TABLE OF any\n    p_val  TYPE any.\n\n  RETURN val = abap_true.\n"
    },
    {
        "instruction": "Provide a function to find the length of a string.",
        "input": "",
        "output": "def length(s):\n    i = 0\n    for ch in s:\n        i += 1\n    return i",
        "abap": "FORM length CHANGING cs TYPE string.\n  DATA: lv_length TYPE i.\n\n  DO.\n    IF cs IS INITIAL.\n      EXIT.\n    ENDIF.\n    lv_length = lv_length + 1.\n    READ TABLE cs INTO cs.\n  ENDDO.\n\n  RETURN.\nENDFORM.\n"
    },
    {
        "instruction": "What is the purpose of treemaps in data visualization?",
        "input": "",
        "output": "Treemaps are used to represent hierarchical data visually. They are used to visualize large datasets by dividing them into rectangles proportional to their values. This makes it easier to quickly compare values and identify patterns across datasets.",
        "abap": "REPORT ztreemap_example.\n\nTYPES: BEGIN OF ty_data,\n          id    TYPE i,\n          parent TYPE i,\n          value  TYPE f,\n        END OF ty_data.\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_data.\n\nINITIALIZATION.\n  lt_data = VALUE #( ( id = 1 parent = 0 value = 100 )\n                      ( id = 2 parent = 1 value = 80 )\n                      ( id = 3 parent = 1 value = 20 )\n                      ( id = 4 parent = 2 value = 60 )\n                      ( id = 5 parent = 2 value = 20 ) ).\n\nCLASS lcl_treemap DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_tree_data IMPORTING\n                          it_data TYPE STANDARD TABLE OF ty_data\n                          CHANGING\n                            ct_tree_data TYPE STANDARD TABLE OF ty_data,\n      draw_treemap IMPORTING\n                     iv_level TYPE i.\n\nCLASS lcl_treemap IMPLEMENTATION.\n  METHOD create_tree_data.\n    DATA: ls_node TYPE ty_data.\n\n    LOOP AT it_data INTO ls_node.\n      MOVE-CORRESPONDING ls_node TO DATA(ls_node2).\n      ls_node2-parent = sy-dbcname.\n      ct_tree_data = VALUE #( BASE ct_tree_data ( ls_node2 ) ).\n      IF ls_node-parent EQ 0 AND lines( it_data ) > 1.\n        INSERT ls_node INTO TABLE it_data INDEX 1.\n      ENDIF.\n    ENDLOOP.\n\n    LOOP AT it_data INTO ls_node.\n      MOVE-CORRESPONDING ls_node TO DATA(ls_node2).\n      ct_tree_data = VALUE #( BASE ct_tree_data ( ls_node2 ) ).\n    ENDLOOP.\n\n  ENDMETHOD.\n\n  METHOD draw_treemap.\n    DATA: ls_node TYPE ty_data,\n          lv_width TYPE i,\n          lv_height TYPE i,\n          lt_nodes TYPE STANDARD TABLE OF ty_data.\n\n    CALL FUNCTION 'FUGR_APPL_LAYOUT'\n      EXPORTING\n        iv_level = iv_level\n        it_data   = ct_tree_data[]\n      IMPORTING\n        et_layout  = lt_nodes[].\n    \" Write nodes to database or display them in a report\n\n  ENDMETHOD.\n\nENDCLASS.\n\nINITIALIZATION.\n  lcl_treemap=>create_tree_data(\n    EXPORTING\n      it_data = lt_data\n    CHANGING\n      ct_tree_data = DATA(ctree) ).\n\nSTART-OF-SELECTION.\n  CALL METHOD cl_gui_cpf_ct_remap=>draw\n    EXPORTING\n      iv_level = 0\n    IMPORTING\n      et_layout  = lcl_treemap=>draw_treemap( iv_level = 0 ).\n"
    },
    {
        "instruction": "Create a SQL query to calculate the count of each type of book in a library.",
        "input": "Noinput",
        "output": "SELECT books.type, COUNT(*) AS book_count\nFROM books\nGROUP BY books.type;",
        "abap": "TYPES: BEGIN OF ty_book_type,\n          type TYPE string,\n        END OF ty_book_type.\n\nDATA: lt_books TYPE STANDARD TABLE OF ty_book_type.\n\nSELECT type INTO CORRESPONDING FIELDS OF TABLE lt_books\n  FROM books\n  GROUP BY type.\n\nLOOP AT lt_books INTO DATA(ls_book).\n  WRITE: ls_book-type, ls_book-book_count.\nENDLOOP.\n"
    },
    {
        "instruction": "Design a PHP code snippet to create a simple calculator.",
        "input": "",
        "output": "<?php \n\n// Function to get the addition of two numbers \nfunction addition($num1, $num2){ \n\t$sum = $num1 + $num2; \n\techo \"Result of addition is: \" . $sum; \n} \n\n// Function to get the subtraction of two numbers \nfunction subtraction($num1, $num2){ \n\t$diff = $num1 - $num2; \n\techo \"Result of subtraction is: \" . $diff; \n}\n\n// Function to get the multiplication of two numbers \nfunction multiplication($num1, $num2){ \n\t$prod = $num1 * $num2; \n\techo \"Result of multiplication is: \" . $prod; \n}\n\n// Function to get the division of two numbers \nfunction division($num1, $num2){ \n\t$quot = $num1 / $num2; \n\techo \"Result of division is: \" . $quot; \n} \n\n?>",
        "abap": "REPORT zdemo_arithmetic_operations.\n\nCLASS demo_arithmetic_operations DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      addition\n        IMPORTING\n          num1 TYPE i\n          num2 TYPE i\n        EXPORTING\n          result TYPE i,\n      subtraction\n        IMPORTING\n          num1 TYPE i\n          num2 TYPE i\n        EXPORTING\n          result TYPE i,\n      multiplication\n        IMPORTING\n          num1 TYPE i\n          num2 TYPE i\n        EXPORTING\n          result TYPE i,\n      division\n        IMPORTING\n          num1 TYPE f\n          num2 TYPE f\n        EXPORTING\n          result TYPE f.\n\n  CLASS-METHODS:\n    execute_arithmetic_operations\n        IMPORTING\n          num1 TYPE i\n          num2 TYPE i\n        EXPORTING\n          result TYPE string.\nENDCLASS.\n\nCLASS demo_arithmetic_operations IMPLEMENTATION.\n  METHOD addition.\n    DATA: ls_result TYPE i.\n    ls_result = num1 + num2.\n    WRITE: 'Result of addition is: ', ls_result.\n    result = ls_result.\n  ENDMETHOD.\n\n  METHOD subtraction.\n    DATA: ls_result TYPE i.\n    ls_result = num1 - num2.\n    WRITE: 'Result of subtraction is: ', ls_result.\n    result = ls_result.\n  ENDMETHOD.\n\n  METHOD multiplication.\n    DATA: ls_result TYPE i.\n    ls_result = num1 * num2.\n    WRITE: 'Result of multiplication is: ', ls_result.\n    result = ls_result.\n  ENDMETHOD.\n\n  METHOD division.\n    DATA: ls_result TYPE f.\n    IF num2 <> 0.\n      ls_result = num1 / num2.\n      WRITE: 'Result of division is: ', ls_result.\n    ELSE.\n      WRITE: 'Error: Division by zero'.\n    ENDIF.\n    result = ls_result.\n  ENDMETHOD.\n\n  METHOD execute_arithmetic_operations.\n    DATA: ls_num1 TYPE i,\n          ls_num2 TYPE i,\n          ls_result TYPE string.\n\n    WRITE: 'Performing arithmetic operations'.\n\n    CASE op-code.\n      WHEN 'A' ( addition( EXPORTING num1 = ls_num1 num2 = ls_num2 IMPORTING result = ls_result ) ).\n        CALL METHOD demo_arithmetic_operations=>addition\n          EXPORTING\n            num1  = ls_num1\n            num2  = ls_num2\n          IMPORTING\n            result = ls_result.\n      WHEN 'S' ( subtraction( EXPORTING num1 = ls_num1 num2 = ls_num2 IMPORTING result = ls_result ) ).\n        CALL METHOD demo_arithmetic_operations=>subtraction\n          EXPORTING\n            num1  = ls_num1\n            num2  = ls_num2\n          IMPORTING\n            result = ls_result.\n      WHEN 'M' ( multiplication( EXPORTING num1 = ls_num1 num2 = ls_num2 IMPORTING result = ls_result ) ).\n        CALL METHOD demo_arithmetic_operations=>multiplication\n          EXPORTING\n            num1  = ls_num1\n            num2  = ls_num2\n          IMPORTING\n            result = ls_result.\n      WHEN 'D' ( division( EXPORTING num1 = ls_num1 num2 = ls_num2 IMPORTING result = ls_result ) ).\n        CALL METHOD demo_arithmetic_operations=>division\n          EXPORTING\n            num1  = ls_num1\n            num2  = ls_num2\n          IMPORTING\n            result = ls_result.\n      WHEN OTHERS.\n    ENDCASE.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: ls_num1 TYPE i,\n        ls_num2 TYPE i.\n\n  CALL METHOD demo_arithmetic_operations=>execute_arithmetic_operations\n    EXPORTING\n      num1  = 10\n      num2  = 5\n    IMPORTING\n      result = DATA(lt_result).\n\n  WRITE: / lt_result.\n"
    },
    {
        "instruction": "Create a quick-sort algorithm in Python.",
        "input": "",
        "output": "def quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)",
        "abap": "CLASS lcl_quick_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" Sort a work area of numbers in ascending order using the Quick-Sort algorithm\n      sort\n        IMPORTING\n          !ir_arr TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(ro_sorted) TYPE STANDARD TABLE OF i\n        RAISING\n          cx_static_check.\n\nENDCLASS.\n\nCLASS lcl_quick_sort IMPLEMENTATION.\n  METHOD sort.\n    DATA: lv_pivot TYPE i,\n          lt_left TYPE STANDARD TABLE OF i,\n          lt_right TYPE STANDARD TABLE OF i.\n\n    IF line_exists( ir_arr[ 1 ] ).\n      \" Set the pivot to the first element of the array\n      lv_pivot = ir_arr[ 1 ].\n\n      \" Separate elements into left and right arrays based on the pivot\n      LOOP AT ir_arr INTO DATA(ls_current).\n        IF ls_current < lv_pivot.\n          APPEND ls_current TO lt_left.\n        ELSEIF ls_current > lv_pivot.\n          APPEND ls_current TO lt_right.\n        ENDIF.\n      ENDLOOP.\n\n      \" Recursively sort and concatenate the left, middle, and right arrays\n      ro_sorted = VALUE #( base = lcl_quick_sort=>sort( IMPORTING ir_arr = lt_left ) )\n                   + VALUE #( ( lv_pivot ) )\n                   + VALUE #( base = lcl_quick_sort=>sort( IMPORTING ir_arr = lt_right ) ).\n    ELSE.\n      \" Base case: An empty array is sorted\n      ro_sorted = VALUE #( ).\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Construct a switch statement to log different grades messages based on the grade variable.",
        "input": "var grade = \"A+\";",
        "output": "switch(grade){\n   case \"A+\":\n      console.log(\"Excellent job!\");\n      break;\n   case \"A\":\n      console.log(\"Well done!\");\n      break;\n   case \"B\":\n      console.log(\"Good job!\");\n      break;\n   case \"C\":\n      console.log(\"Keep up the good work!\");\n      break;\n   default: \n      console.log(\"Keep up the hard work!\");\n      break;\n}",
        "abap": "DATA: lv_grade TYPE string.\n\nlv_grade = 'A+'.  \" replace with actual value of grade\n\nCASE lv_grade IS\n  WHEN 'A+'\n    INTO DATA(lv_message).\n    WRITE: / lv_message.\n  WHEN 'A' INTO DATA(lv_message).\n    WRITE: / lv_message.\n  WHEN 'B' INTO DATA(lv_message).\n    WRITE: / lv_message.\n  WHEN 'C' INTO DATA(lv_message).\n    WRITE: / lv_message.\n  WHEN OTHERS INTO DATA(lv_message).\n    WRITE: / lv_message.\nENDCASE.\n\nTYPES: BEGIN OF ty_data,\n          grade TYPE string,\n        END OF ty_data.\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_data.\n\nlt_data = VALUE #( ( grade = 'A+' )\n                   ( grade = 'A' )\n                   ( grade = 'B' )\n                   ( grade = 'C' ) ).\n\nLOOP AT lt_data INTO DATA(ls_item).\n  CASE ls_item-grade IS\n    WHEN 'A+'\n      INTO DATA(lv_message).\n      WRITE: / lv_message.\n    WHEN 'A' INTO DATA(lv_message).\n      WRITE: / lv_message.\n    WHEN 'B' INTO DATA(lv_message).\n      WRITE: / lv_message.\n    WHEN 'C' INTO DATA(lv_message).\n      WRITE: / lv_message.\n    WHEN OTHERS INTO DATA(lv_message).\n      WRITE: / lv_message.\n  ENDCASE.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a function to find the total area of a triangle, given its base and height.",
        "input": "",
        "output": "def findAreaOfTriangle(base, height):\n return 0.5 * base * height",
        "abap": "FORM calculate_triangle_area\n  USING p_base TYPE f\n       p_height TYPE f\n  RETURNING value(r_result) TYPE f.\n\n  r_result = ( p_base * p_height ) / 2.\n\nENDFORM.\n"
    },
    {
        "instruction": "Using Python, create a function to check if a given string contains an uppercase letter.",
        "input": "",
        "output": "def contains_uppercase(text):\n  for char in text:\n    if char.isupper():\n      return True\n  return False",
        "abap": "REPORT zcontains_uppercase.\n\nCLASS lcl_contains_uppercase DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: contains_uppercase\n      IMPORTING\n        iv_text TYPE string\n      RETURNING\n        VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_contains_uppercase IMPLEMENTATION.\n  METHOD contains_uppercase.\n    DATA: lv_char TYPE c.\n    DO strlen( iv_text ) TIMES.\n      READ TEXT-POOL INTO lv_char FROM sy-index - 1.\n      IF lv_char CA 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n        rv_result = abap_true.\n        EXIT.\n      ENDIF.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lr_contains_uppercase TYPE REF TO lcl_contains_uppercase,\n      lv_text                TYPE string.\n\nlv_text = 'Hello World'.\n\nCREATE OBJECT lr_contains_uppercase.\n\nrv_result = lr_contains_uppercase->contains_uppercase( iv_text = lv_text ).\n\nWRITE: / rv_result.\n"
    },
    {
        "instruction": "Create a regex to match the characters \"CDE\" in any order.",
        "input": "",
        "output": "regex = r\"(C|D|E){3}\"",
        "abap": "DATA: lv_regex TYPE string.\n\nlv_regex = 'C{3}D{3}E{3}'.\n"
    },
    {
        "instruction": "Modify the function to also remove all whitespace from the string.",
        "input": "",
        "output": "import re\n\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))",
        "abap": "CLASS lcl_string_util DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: METHOD remove_special_chars_and_whitespace\n      IMPORTING\n        value(s) TYPE string\n      RETURNING\n        value(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_string_util IMPLEMENTATION.\n  METHOD remove_special_chars_and_whitespace.\n    rv_result = cl_abap_char_utilities=>remove_spaces(\n                 cl_abap_char_utilities=>remove_non_chars( s ) ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Find the greatest common divisor of these two numbers.",
        "input": "9 and 15",
        "output": "3",
        "abap": "It seems like you'd like me to translate a single line of code, possibly in a language other than ABAP, into ABAP.\n\nHowever, since you only provided the number \"3\", I'm going to assume it's not code at all but rather just a numerical value. If that's the case, there isn't much to translate!\n\nIf you could provide some actual code you'd like me to translate (for example, Python, Java, C++, etc.), I'd be happy to help you with that."
    },
    {
        "instruction": "To what type of data can the following MySQL query return?",
        "input": "SELECT *\nFROM table1 t1\nINNER JOIN table2 t2\nON t1.id = t2.id",
        "output": "The query can return results of any combination of columns from the two tables. It will return a set of records with the matching id from Table 1 and Table 2.",
        "abap": "CREATE TABLE ZTAB1 (\n  ID TYPE I,\n  COLA TYPE C LENGTH 10,\n  COLB TYPE C LENGTH 20\n)\n"
    },
    {
        "instruction": "Write a function to calculate the average score of a list of numbers.",
        "input": "",
        "output": "def get_average(numbers):\n    \"\"\"\n    Calculate and return the average of a list of numbers\n    :param numbers: the list of numbers\n    :return: the average of the numbers\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)",
        "abap": "REPORT zaverage_calculator.\n\nCLASS lcl_average DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_average\n        IMPORTING\n          VALUE(im_numbers) TYPE STANDARD TABLE OF f\n        RETURNING\n          VALUE(rv_average) TYPE p DECIMAL16.\nENDCLASS.\n\nCLASS lcl_average IMPLEMENTATION.\n  METHOD get_average.\n    DATA: lv_total TYPE p DECIMAL16,\n          lv_count TYPE i.\n\n    lv_total = REDUCE expression = { sum | i = val( im_numbers ) }\n                 INTO rv_average\n                 FROM TABLE im_numbers.\n\n    IF sy-subrc <> 0.\n      MESSAGE 'Input list must not be empty' TYPE 'E'.\n      RETURN.\n    ENDIF.\n\n    rv_average = lv_total / lines( im_numbers ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a new CSS animation rule to rotate an object a full circle.",
        "input": "",
        "output": "@keyframes rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}",
        "abap": "DATA: ls_anim TYPE i,\n      lt_frames TYPE STANDARD TABLE OF cl_animate=>s_frame.\n\nlt_frames = VALUE #( ( ls_anim = 0 frame = 'rotate(0)' )\n                     ( ls_anim = 100 frame = 'rotate(360)' ) ).\n\ncl_animate=>animate( it_frames = lt_frames ).\n"
    },
    {
        "instruction": "Write a function to remove duplicate items in a list.",
        "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]",
        "output": "def remove_duplicates(mylist):\n    return set(mylist)",
        "abap": "REPORT z_remove_duplicates.\n\nCLASS lcl_remove_duplicates DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_duplicates IMPORTING\n                            iv_list TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_remove_duplicates IMPLEMENTATION.\n  METHOD remove_duplicates.\n    DATA: lt_split TYPE TABLE OF string,\n          lv_result TYPE string.\n\n    SPLIT val = iv_list at cl_abap_char_utilities=>cr_lf INTO TABLE lt_split.\n\n    SORT TABLE lt_split.\n    DELETE REJECT.\n\n    CONCATENATE LINES OF TABLE lt_split INTO rv_result SEPARATED BY space.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a React component that renders the provided state data in a table",
        "input": "state = {\n  data: [\n    { name: 'John', age: 20 },\n    { name: 'Alice', age: 18 }\n  ]\n}",
        "output": "import React from 'react';\n\nclass Table extends React.Component {\n  render() {\n    const state = this.props.state;\n    const dataRows = state.data.map(rowData => (\n      <tr>\n        <td>{rowData.name}</td>\n        <td>{rowData.age}</td>\n      </tr>\n    ));\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>{dataRows}</tbody>\n      </table>\n    );\n  }\n}\nexport default Table;",
        "abap": "REPORT ztable.\n\nTYPES: BEGIN OF ty_data,\n         name TYPE string,\n         age  TYPE i,\n       END OF ty_data.\n\nDATA: ls_state TYPE abap_statements,\n\n      lt_data TYPE TABLE OF ty_data.\nDATA(lo_table) = NEW cl_salv_table( ).\n\nlo_table->set_table_for_context(\n  EXPORTING\n    it_fieldcat = VALUE #( ( name = 'NAME' type = 'C' decimals = 0 length = 20 )\n                              ( name = 'AGE' type = 'I' decimals = 2 length = 3 ) )\n\n  CHANGING\n    ct_tabletype = lt_data ).\n\nCALL FUNCTION 'SALV_SET_LIST_DISPLAY'\n  EXPORTING\n    i_objectname            = 'ZTABLE'\n  IMPORTING\n    e_program_id             =\n  EXCEPTIONS\n    program_error            = 1\n    internal_error           = 2\n    OTHERS                   = 3.\n"
    },
    {
        "instruction": "You need to find the largest subset of an array that sums up to a given value.",
        "input": "arr = [1, 2, 3, 4, 5], target = 8",
        "output": "def find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n    return max_sum_list",
        "abap": "CLASS lcl_subset DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_largest_subset\n        IMPORTING\n          VALUE(iv_arr) TYPE STANDARD TABLE OF i\n          VALUE(iv_target) TYPE i\n        EXPORTING\n          VALUE(cv_max_sum_list) TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS lcl_subset IMPLEMENTATION.\n  METHOD find_largest_subset.\n    DATA:\n      lt_curr_sums   TYPE STANDARD TABLE OF i,\n      lt_max_sum_list TYPE STANDARD TABLE OF i.\n\n    FIELD-SYMBOLS: <fs_num> LIKE LINE OF iv_arr.\n    LOOP AT iv_arr INTO <fs_num>.\n      DATA(ls_new_sum) = <fs_num>.\n      LOOP AT lt_curr_sums INTO ls_new_sum.\n        ls_new_sum + <fs_num>.\n        IF ls_new_sum = iv_target.\n          IF sy-tabix > lines( val=lt_max_sum_list ).\n            APPEND LINES OF CORRESPONDING TYPES lt_curr_sums <fs_num> TO lt_max_sum_list.\n            MODIFY CORRESPONDING FIELDS OF TABLE lt_curr_sums FROM <fs_num>.\n          ENDIF.\n        ELSE.\n          INSERT ls_new_sum INTO TABLE lt_curr_sums.\n        ENDIF.\n      ENDLOOP.\n    ENDLOOP.\n\n    cv_max_sum_list = lt_max_sum_list.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Classify the following statement.",
        "input": "I must finish the project by tomorrow.",
        "output": "Imperative sentence.",
        "abap": "Translate the following imperative sentence:\n\n\"Write a function that converts Celsius to Fahrenheit.\"\n\nABAP equivalent:\nFUNCTION z_convert_celsius_to_fahrenheit\n  IMPORTING\n    VALUE(iv_celsius) TYPE f\n  EXPORTING\n    VALUE(ev_fahrenheit) TYPE f.\n\n  ev_fahrenheit = iv_celsius * 9 / 5 + 32.\nENDFUNCTION."
    },
    {
        "instruction": "Write a query in SQL to list the employee information from the given Employee table in descending order of their salaries.",
        "input": "Table structure:\nEmployee_ID  Name   Department   Salary",
        "output": "SELECT * FROM Employee \nORDER BY Salary DESC;",
        "abap": "REPORT zemployee_sort.\n\nDATA: ls_employee TYPE ocEmployee.\n\nSELECT *\n  FROM zemployee\n  ORDER BY salary DESC\n  INTO TABLE @DATA(gt_employees).\n\nLOOP AT gt_employees INTO DATA(ls_employee).\n  WRITE: / ls_employee-name, ls_employee-salary.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a simple web page with a div element and a child paragraph element.",
        "input": "",
        "output": "<!DOCTYPE html>\n<html>\n    <head>\n    <title>Simple Web Page</title>\n    </head>\n\n    <body>\n        <div>\n            <p>The quick brown fox jumps over the lazy dog.</p>\n        </div>\n    </body>\n</html>",
        "abap": "REPORT zsimple_web_page.\n\nDATA: lv_text TYPE string.\nlv_text = 'The quick brown fox jumps over the lazy dog.'.\ncl_gui_frontend_services=>set_screen_layout( cl_gui::screen_1 ).\n\ncl_gui_main_container=>push_last_child(\n  NEW cl_gui_custom_container( id = 'HTML_CONTAINER' ) ).\ncl_gui_cfw=>set_container_data_ref(\n  name = 'HTML_CONTAINER'\n  data_ref = NEW cl_abap_objectdescr( type_name = 'ZSIMPLE_WEB_PAGE' )->create_instance ).\n\nDATA: lo_http_client TYPE REF TO if_ixhttp_client.\n\nCREATE OBJECT lo_http_client\n  EXPORTING\n    client  = 'HTTP'\n    server  = 'www.example.com'.\nlo_http_client->request(\n  EXPORTING\n    data        = lv_text\n    method      = 'GET'\n    headers     = VALUE #( www_authenticate( 'Basic' ) )\n    uri         = '/simple-web-page'\n    version     = 'HTTP/1.0'\n  IMPORTING\n    data_received = DATA(lr_data)\n    http_status_code = DATA(lv_http_status_code) ).\n\nWRITE: / lr_data.\n\nDATA: lv_html TYPE string.\nlv_html = '<!DOCTYPE html>'.\nlv_html += '<html>'.\nlv_html += '<head>'.\nlv_html += '<title>Simple Web Page</title>'.\nlv_html += '</head>'.\nlv_html += '<body>'.\nlv_html += '<div>'.\nlv_html += '<p>' && lv_text && '</p>'.\nlv_html += '</div>'.\nlv_html += '</body>'.\nlv_html += '</html>'.\ncl_gui_frontend_services=>show_message( lv_html ).\n"
    },
    {
        "instruction": "Write a code to find the maximum subarray sum in an array using dynamic programming.",
        "input": "",
        "output": "def maxSubArraySum(arr): \n    n = len(arr) \n  \n    max_so_far = -float('inf') \n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far",
        "abap": "CLASS lcl_max_subarray_sum DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      max_sub_array_sum\n        IMPORTING\n          VALUE(iv_arr) TYPE standard table\n        RETURNING\n          VALUE(rv_max_sum) TYPE f.\nENDCLASS.\n\nCLASS lcl_max_subarray_sum IMPLEMENTATION.\n  METHOD max_sub_array_sum.\n    DATA: lv_n TYPE i,\n           lv_max_so_far TYPE f,\n           lv_max_ending_here TYPE f.\n\n    lv_n = lines( iv_arr ).\n\n    lv_max_so_far = -4294967295. \" equivalent to -float('inf')\n    lv_max_ending_here = 0.\n\n    DO.\n      IF sy-index <= lv_n.\n        lv_max_ending_here = lv_max_ending_here + iv_arr[ sy-index ].\n        IF lv_max_so_far < lv_max_ending_here.\n          lv_max_so_far = lv_max_ending_here.\n        ENDIF.\n\n        IF lv_max_ending_here < 0.\n          lv_max_ending_here = 0.\n        ENDIF.\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    rv_max_sum = lv_max_so_far.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Construct a for loop that prints out the numbers from 1 to 10",
        "input": "",
        "output": "for i in range(1, 11):\n    print(i)",
        "abap": "DO.\n  DATA: lv_counter TYPE i.\n\n  DO 10 TIMES.\n    WRITE lv_counter.\n    ADD 1 TO lv_counter.\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Classify a given sentence based on the intention behind it.",
        "input": "sentence = \"I want to buy a car\"",
        "output": "The given sentence is a request intention.",
        "abap": "It seems like you're asking me to translate code from another language into ABAP (Advanced Business Application Programming), which is a high-level programming language used primarily for business applications, particularly in the context of SAP systems.\n\nPlease go ahead and provide the code snippet that you'd like me to translate into ABAP. I'll do my best to assist you with the translation."
    },
    {
        "instruction": "Create a for loop in Java that iterates over the given array and prints the values.",
        "input": "Array: int[] arr = {1, 2, 3, 4, 5};",
        "output": "for (int i = 0; i < arr.length; i++) { \n  System.out.println(arr[i]); \n}",
        "abap": "DO.\n  DATA: lv_i TYPE i.\n\n  DO.\n    lv_i = lv_i + 1.\n    WRITE: / arr[lv_i].\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Create a function in HTML to display a blinking text on the webpage.",
        "input": "",
        "output": "<script> \nfunction blink() { \n    var text = document.getElementById('blink');\n    text.style.visibility = (text.style.visibility == 'hidden' ? '' : 'hidden');\n    setTimeout(\"blink()\", 500); \n} \nblink();\n</script> \n<span id=\"blink\">Text to blink</span>",
        "abap": "REPORT zblink.\n\nCLASS lcl_blink DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      blink IMPORTING itext TYPE string RAISING cx_no_blinkable.\nENDCLASS.\n\nCLASS lcl_blicker DEFINITION INHERITING FROM cl_gui_front_end_services_desktop.\n  PUBLIC SECTION.\n    INTERFACES ifaintool.\n    METHODS:\n      ifaintool~paint\n        REDEFINITION,\n      constructor IMPORTING itext TYPE string.\nENDCLASS.\n\nCLASS lcl_blicker IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( ).\n    DATA: ltimer TYPE i VALUE 500.\n\n    cl_gui_cfw=>set_screen_timer(\n      EXPORTING\n        interval = ltimer\n      CHANGING\n        caller   = 'BLINK' ).\n\n  ENDMETHOD.\n\n  METHOD ifaintool~paint.\n    DATA: ls_text TYPE lcl_blicker=>text,\n          lv_vis TYPE string.\n\n    IF itext <> ''.\n      ls_text = itext.\n    ENDIF.\n\n    CASE sy-ucomm.\n      WHEN cl_gui_cfw=>screen_timer.\n        lv_vis = ( ls_text-visibility = 'HIDDEN' ? '' : 'HIDDEN' ).\n        ls_text-visibility = lv_vis.\n        set_text( ls_text ).\n      ENDCASE.\n  ENDMETHOD.\n\n  METHOD set_text.\n    DATA: lo_tool TYPE REF TO lcl_blicker,\n          lt_line TYPE string,\n          ls_line TYPE lcl_blicker=>line,\n          ls_text TYPE lcl_blicker=>text.\n\n    ls_text = itext.\n    lo_tool->set_text( ls_text ).\n\n  ENDMETHOD.\n\nCLASS lcl_blink DEFINITION INHERITING FROM cl_global_context .\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      blink IMPORTING itext TYPE string RAISING cx_no_blinkable,\n      set_timer RAISING cx_no_blinkable.\n\nENDCLASS.\n\nCLASS lcl_blink IMPLEMENTATION.\n  METHOD blink.\n    DATA: ltimer TYPE i VALUE 500.\n\n    cl_gui_cfw=>set_screen_timer(\n      EXPORTING\n        interval = ltimer\n      CHANGING\n        caller   = 'BLINK' ).\n\n  ENDMETHOD.\n\n  METHOD set_timer.\n    RAISE EXCEPTION TYPE cx_no_blinkable MESSAGE 'This is an exception'.\n\n  ENDMETHOD.\n\nSTART-OF-SELECTION.\n  DATA: lo_blicker TYPE REF TO lcl_blicker,\n        ls_text TYPE lcl_blicker=>text.\n\n  ls_text-visibility = 'HIDDEN'.\n  ls_text-text = 'Text to blink'.\n  CREATE OBJECT lo_blicker\n    EXPORTING\n      itext = ls_text.\n"
    },
    {
        "instruction": "Write a SQL query to find the total number of orders placed between two given dates.",
        "input": "start_date = '2020-01-01'\nend_date = '2020-02-01'",
        "output": "SELECT COUNT(*)\nFROM orders\nWHERE order_date BETWEEN '2020-01-01' AND '2020-02-01';",
        "abap": "REPORT zorders.\n\nDATA: lv_count TYPE i,\n      lt_orders TYPE STANDARD TABLE OF ty_order.\n\nTYPES: BEGIN OF ty_order,\n         order_date TYPE dats.\n       TYPES: BEGUIND OF ty_order.\n\nSELECT COUNT(*)\n  INTO lv_count\n  FROM orders\n  WHERE order_date BETWEEN '20200101' AND '20200201'.\n\nWRITE: / lv_count.\n"
    },
    {
        "instruction": "Implement the following algorithm in Java.",
        "input": "// Bubble sort algorithm \nfor i in 0 to n-1 \n  for j in 0 to n-i-1 \n    if array[j] > array[j+1] \n      swap array[j] and array[j+1]",
        "output": "public void bubbleSort(int[] arr){\n  for (int i = 0; i < arr.length - 1; i++) {\n    for (int j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        int temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n}",
        "abap": "FORM bubble_sort USING p_arr TYPE STANDARD TABLE OF i.\n\n  DATA: lv_length TYPE i,\n         lv_i TYPE i,\n         lv_j TYPE i,\n         lv_temp TYPE i.\n\n  \" Get the length of the array\n  lv_length = lines( p_arr ).\n\n  \" Loop through the array for each pass\n  DO.\n    lv_i = lv_i + 1 - 1.\n    IF lv_i > lv_length - 1.\n      EXIT.\n    ENDIF.\n\n    \" Initialize inner loop to start from the first element of this pass\n    lv_j = 0.\n\n    \" Inner loop to compare adjacent elements and swap if necessary\n    DO.\n      lv_j = lv_j + 1.\n      IF lv_j > lv_length - lv_i - 1.\n        EXIT.\n      ENDIF.\n\n      IF p_arr[ lv_j ] > p_arr[ lv_j + 1 ].\n        \" Swap the two elements\n        lv_temp = p_arr[ lv_j ].\n        p_arr-unnit( lv_j ) = p_arr-unnit( lv_j + 1 ).\n        p_arr-unnit( lv_j + 1 ) = lv_temp.\n      ENDIF.\n\n    ENDDO.\n\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create an HTML form to accept the user's name, email, phone number and address.",
        "input": "",
        "output": "<form>\n  <input type=\"text\" name=\"name\" placeholder=\"Name\" required><br>\n  <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n  <input type=\"tel\" name=\"phone\" placeholder=\"Phone Number\" required><br>\n  <textarea name=\"address\" placeholder=\"Address\" required></textarea><br>\n  <input type=\"submit\">\n</form>",
        "abap": "CLASS lcl_form DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      create_form\n        EXPORTING\n          \"! Form fields and their values\n          form_data TYPE ty_form_data,\n        RAISING\n          cx_no_check.\n  PRIVATE SECTION.\n    TYPES: BEGIN OF ty_form_data,\n             name     TYPE string,\n             email    TYPE string,\n             phone    TYPE string,\n             address  TYPE string,\n           END OF ty_form_data.\n\nENDCLASS.\n\nCLASS lcl_form IMPLEMENTATION.\n  METHOD create_form.\n    DATA: lr_form TYPE REF TO cl_gui_input_form_container,\n          ls_form_fields TYPE ty_form_fields,\n          lv_name TYPE string,\n          lv_email TYPE string,\n          lv_phone TYPE string,\n          lv_address TYPE string.\n\n    CREATE OBJECT lr_form\n      EXPORTING\n        container = 'FORM_CONTAINER'.\n\n    \" Define form fields and their validators\n    ls_form_fields-name = 'name'.\n    ls_form_fields-type = 'INPUT'.\n    ls_form_fields-placeholder = 'Name'.\n    ls_form_fields-validator = 'NOT BLANK'.\n\n    ls_form_fields-email = 'email'.\n    ls_form_fields-type = 'EMAIL'.\n    ls_form_fields-placeholder = 'Email'.\n    ls_form_fields-validator = 'VALID EMAIL ADDRESS'.\n\n    ls_form_fields-phone = 'phone'.\n    ls_form_fields-type = 'TELEPHONE NUMBER'.\n    ls_form_fields-placeholder = 'Phone Number'.\n    ls_form_fields-validator = 'NOT BLANK'.\n\n    ls_form_fields-address = 'address'.\n    ls_form_fields-type = 'TEXTAREA'.\n    ls_form_fields-placeholder = 'Address'.\n    ls_form_fields-validator = 'NOT BLANK'.\n\n    lr_form->set_field_value( ls_form_fields-name  ).\n    lr_form->set_field_value( ls_form_fields-email ).\n    lr_form->set_field_value( ls_form_fields-phone ).\n    lr_form->set_field_value( ls_form_fields-address ).\n\n    \" Submit form\n    PERFORM submit_form CHANGING cs_form_data = data(form_data).\n\n  ENDMETHOD.\n\n  FORM submit_form CHANGING cs_form_data TYPE ty_form_data.\n    DATA: lv_name TYPE string,\n          lv_email TYPE string,\n          lv_phone TYPE string,\n          lv_address TYPE string.\n\n    READ TABLE form_data INTO cs_form_data WITH KEY name  = ls_form_fields-name .\n    IF sy-subrc <> 0.\n      MESSAGE 'No data found.' TYPE 'E'.\n    ENDIF.\n\n    ls_form_fields-name  = cs_form_data-name .\n    ls_form_fields-email = cs_form_data-email.\n    ls_form_fields-phone = cs_form_data-phone.\n    ls_form_fields-address = cs_form_data-address.\n\n    lv_name     = ls_form_fields-name .\n    lv_email    = ls_form_fields-email.\n    lv_phone    = ls_form_fields-phone.\n    lv_address  = ls_form_fields-address.\n\n    \" Validate form data\n    IF lv_name IS INITIAL OR lv_email IS INITIAL OR lv_phone IS INITIAL OR lv_address IS INITIAL.\n      RAISE cx_no_check.\n    ENDIF.\n\n    cs_form_data-name     = lv_name .\n    cs_form_data-email    = lv_email.\n    cs_form_data-phone    = lv_phone.\n    cs_form_data-address  = lv_address.\n  ENDFORM.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python function to check whether a string has all unique characters.",
        "input": "",
        "output": "def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True",
        "abap": "REPORT ztest.\n\nCLASS zcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_all_unique IMPORTING\n        iv_string TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS zcl_test IMPLEMENTATION.\n  METHOD is_all_unique.\n    DATA: lv_counter LIKE LINE OF VALUE TABLE TYPE i OCCURS 0 WITH DEFAULT KEY.\n\n    LOOP AT iv_string INTO DATA(lv_char).\n      READ TABLE lv_counter INDEX lv_char - 'ABCDEF'. \" Assume all possible chars\n      IF sy-subrc EQ 0. \" Char already found\n        rv_result = abap_false.\n        RETURN.\n      ELSE.\n        APPEND INITIAL LINE TO lv_counter INDEX lv_char - 'ABCDEF'.\n      ENDIF.\n    ENDLOOP.\n\n    rv_result = abap_true.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an SQL query to find the second highest salary of an employee.",
        "input": "",
        "output": "SELECT MAX(Salary) \nFROM Employee \nWHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);",
        "abap": "DATA: lv_max_salary TYPE p DECIMAL4.\n\nSELECT MAX( Salary )\n  INTO lv_max_salary\n  FROM zemployee.\n\nLOOP AT zemployee INTO DATA(ls_employee) WHERE max_sal = lv_max_salary.\n  DELETE zemployee INDEX sy-tabix.\nENDLOOP.\n\nSORT zemployee BY salary DESCENDING.\n\nDO.\n  READ TABLE zemployee INTO ls_employee INDEX 1.\n  IF sy-subrc <> 0 OR ls_employee-salary <> lv_max_salary.\n    EXIT.\n  ENDIF.\nENDDO.\n\nlv_max_salary = ls_employee-salary.\n"
    },
    {
        "instruction": "Write code to concatenate two given strings.",
        "input": "str1 = 'hello'\nstr2 = 'world'",
        "output": "def concatenate(str1, str2):\n    \"\"\"\n    Concatenates two given strings.\n    \"\"\"\n    return str1 + str2",
        "abap": "CLASS lcl_concatenate DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      concatenate IMPORTING\n        i_str1 TYPE string\n        i_str2 TYPE string\n        RETURNING\n          VALUE(ro_result) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_concatenate IMPLEMENTATION.\n  METHOD concatenate.\n    ro_result = i_str1 + i_str2.\n  ENDMETHOD.\nENDCLASS.\n\n\"Example usage:\nDATA: lv_result TYPE string.\n\nlv_result = cl_lcf_concatenate=>concatenate( 'Hello, ' 'World!' ).\n\nWRITE: / lv_result. \" Output: Hello, World!\n"
    },
    {
        "instruction": "Write a query to find out the maximum salary earned by an employee",
        "input": "",
        "output": "SELECT MAX(salary)\nFROM Employees;",
        "abap": "REPORT zmax_salary.\n\nTYPES: BEGIN OF ty_employees,\n         salary TYPE i,\n       END OF ty_employees.\n\nDATA: lt_employees TYPE STANDARD TABLE OF ty_employees,\n      lv_max_salary TYPE i.\n\nSELECT SINGLE MAX( salary ) INTO lv_max_salary\n  FROM employees.\n\nWRITE: / 'Maximum Salary:', lv_max_salary.\n"
    },
    {
        "instruction": "Describe the steps of creating an application using the Flask framework.",
        "input": "",
        "output": "Steps to creating a Flask application include importing the Flask module, creating an instance of Flask, creating an HTML template file, and creating a route for the app that renders the HTML template. The next step is to create a file containing the code to execute on each route; this could include performing a database query, calling a web API, running functions, etc. Once the application has been built, it can be run using a Flask client, such as the flask command line interface.",
        "abap": "REPORT zflask_example.\n\nCLASS lcl_app DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      app IMPORTING iv_path TYPE string RAISING cx_static_check.\nENDCLASS.\n\nCLASS lcl_app IMPLEMENTATION.\n  METHOD app.\n    DATA: lo_router TYPE REF TO if_http_server_request,\n          lo_response TYPE REF TO if_http_server_response,\n          ls_url TYPE string VALUE 'http://localhost:8000'.\n\n    lo_router = cl_http_client_factory=>create_by_server( ls_url ).\n    lo_response = lo_router->request(\n      i_method         = if_http_client~post\n      i_request        =\n      i_client_header  = VALUE #( 'Content-Type' = 'application/json' )\n      i_response       =\n      i_destination   = VALUE #( hostname = ls_url server_port = 8000 ) ).\n\n    lo_router->send( ).\n    lo_response->get_data(\n      IMPORTING\n        body = DATA(lv_response) ).\n\n    SPLIT lv_response AT cl_abap_char_utilities=>cr INTO TABLE DATA(lt_lines).\n    WRITE:/ lt_lines.\n\n  ENDMETHOD.\nENDCLASS.\n\n\" Main program\nSTART-OF-SELECTION.\n  lcl_app=>app( 'http://localhost:8000' ).\n"
    },
    {
        "instruction": "Modify the given code to multiply two n x n matrices.",
        "input": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0",
        "output": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result",
        "abap": "CLASS lcl_matrix_multiply DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      multiply\n        IMPORTING\n          it_matrix1 TYPE STANDARD TABLE OF p Dec\n          it_matrix2 TYPE STANDARD TABLE OF p Dec\n        EXPORTING\n          et_result  TYPE STANDARD TABLE OF p Dec .\nENDCLASS.\n\nCLASS lcl_matrix_multiply IMPLEMENTATION.\n  METHOD multiply.\n    \" Initialize result matrix with zeros\n    DATA: lt_result TYPE ty_mat_p Dec .\n\n    \" Get dimensions of matrices\n    DATA: lv_n TYPE i VALUE lines( it_matrix1 ).\n\n    \" Check if matrix multiplication is possible\n    IF lines( it_matrix2 ) <> columns( it_matrix1 ).\n      MESSAGE id 'MAT_MUL' type 'E'.\n      RETURN .\n    ENDIF.\n\n    \" Create result matrix\n    LOOP AT it_matrix1 INTO DATA(ls_matrix1) ASSIGNING FIELD-SYMBOL(<fs_matrix1>).\n      APPEND INITIAL LINE TO lt_result REFERENCE( <fs_result > ) .\n      LOOP AT it_matrix2 INTO DATA(ls_matrix2) ASSIGNING FIELD-SYMBOL(<fs_matrix2>).\n        \" Calculate dot product\n        DATA(lv_sum) = 0.\n        LOOP AT ls_matrix1-tdp_val INTO DATA(lt_vals) .\n          lv_sum += lt_vals * < fs_matrix2 - tdp_val >.\n        ENDLOOP.\n        < fs_result -> tdp_val > = lv_sum.\n      ENDLOOP.\n    ENDLOOP.\n\n    \" Assign result to output parameter\n    et_result = lt_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Using the code below, update the function to find the average of two numbers.",
        "input": "def find_average(num1, num2): \n  total = num1 + num2",
        "output": "def find_average(num1, num2): \n  total = num1 + num2 \n  average = total / 2\n  return average",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_average IMPORTING\n        p_num1 TYPE i\n        p_num2 TYPE i\n        EXPORTING\n          value TYPE f.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD find_average.\n    DATA: total TYPE f,\n          average TYPE f.\n    \n    \" Calculate the total of num1 and num2\n    total = p_num1 + p_num2.\n    \n    \" Calculate the average by dividing the total by 2\n    average = total / 2.\n    \n    \" Return the calculated average\n    value = average.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_average TYPE f.\n\n\" Call the method to calculate and display the average\nlt_average = lcl_test=>find_average( p_num1 = 10 p_num2 = 20 ).\nWRITE: / 'The average is:', lt_average.\n"
    },
    {
        "instruction": "What is the primary purpose of object-oriented programming?",
        "input": "",
        "output": "The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely.",
        "abap": "Here is a translation of your text into ABAP (Advanced Business Application Programming):\n\n**Modul 1: Grundlagen der objektorientierten Programmierung**\n\n**Zusammenfassung:**\nDie Hauptaufgabe der objektorientierten Programmierung besteht darin, Software-Systeme zu erstellen, die modulares, wiederverwendbares und wartbares sind. Indem man reale Weltobjekte und ihre Verhaltensweisen als einzelne Komponenten modelliert, erm\u00f6glicht die objektorientierte Programmierung Entwicklern, komplexe Systeme in einer organisierten und effizienten Weise zu erstellen und zu verwalten. Au\u00dferdem k\u00f6nnen diese Systeme leicht angepasst werden, um den sich \u00e4ndernden Bed\u00fcrfnissen der Benutzer gerecht zu werden. Dar\u00fcber hinaus machen die objektorientierte Programmierung Software-Systeme sicherer, indem alle Code in einzelne Objekte enthalten sind, die sicher gehandhabt werden k\u00f6nnen.\n\n**Modul 2: Vorteile der objektorientierten Programmierung**\n\n* **Module**: Modulares Design\n+ Erstellung von individuellen Komponenten, die ihre eigenen Verhaltensweisen haben\n+ Wiederverwendbare Code-Schnipsel\n\n* **Reusability**\n+ Erstellung von Objekten, die wiederverwendet werden k\u00f6nnen\n+ Reduzierung von Doppelcode und Erh\u00f6hung der Produktivit\u00e4t\n\n* **Wartbarkeit**\n+ \u00c4nderung des Codes, ohne dass andere Teile der Anwendung beeinflusst werden\n+ Vereinfachung der Wartung und das Updates von Software-Systemen\n\n* **Sicherheit**\n+ Enthaltung einzelner Objekte sch\u00fctzt vor unerw\u00fcnschten Zugriffen\n+ Verbesserung der Sicherheit durch Vermeidung von Angriffsm\u00f6glichkeiten"
    },
    {
        "instruction": "Output the even numbers between 0 and 10.",
        "input": "",
        "output": "2, 4, 6, 8, 10",
        "abap": "DATA: lv_numbers TYPE STANDARD TABLE OF i.\n\nAPPEND 2 TO lv_numbers.\nAPPEND 4 TO lv_numbers.\nAPPEND 6 TO lv_numbers.\nAPPEND 8 TO lv_numbers.\nAPPEND 10 TO lv_numbers.\n\nLOOP AT lv_numbers INTO DATA(lv_number).\nWRITE lv_number.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a SQL query to find all the users in a database with age greater than 25.",
        "input": "",
        "output": "SELECT * FROM users WHERE age > 25",
        "abap": "DATA: ls_user TYPE ty_users.\n\nSELECT SINGLE *\n  INTO ls_user\n  FROM zusers  \" replace 'zusers' with your actual table name\n  WHERE age GT 25.\n\n\" If you want to read multiple records:\nLOOP AT itab_users INTO ls_user.\n  \" Replace 'itab_users' with the internal table variable that stores the result set\n\nENDLOOP.\n"
    },
    {
        "instruction": "Write a code snippet to return the item with the highest value in a given dictionary.",
        "input": "d = {'a':20, 'b':10, 'c':15}",
        "output": "key = max(d, key = d.get) \nval = d[key]\nreturn (key, val)",
        "abap": "DATA: lv_key TYPE string,\n      lv_val  TYPE string.\n\n\" Determine the maximum value in the internal table and its associated key\nSORT itab BY d DESCENDING.\nREAD TABLE itab INTO DATA(lv_line) INDEX sy-tfill.\n\nlv_key = lv_line-key.\nlv_val = lv_line-value.\n\nRETURN ( iv_key = lv_key iv_value = lv_val ).\n"
    },
    {
        "instruction": "Write a SQL query to calculate the total number of orders in the \"orders\" table.",
        "input": "",
        "output": "SELECT COUNT(*) AS \"Total Number of Orders\" \nFROM orders;",
        "abap": "REPORT zdemo.\n\nDATA: lv_total_orders TYPE i.\n\nSELECT COUNT(*)\n  INTO lv_total_orders\n  FROM db04. \" assuming orders table has a primary key named 'db04'\n\nWRITE: / 'Total Number of Orders:', lv_total_orders.\n"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of strings and returns true if the strings are in sorted order.",
        "input": "array = [\"apple\", \"boy\", \"cat\", \"dog\"]",
        "output": "function isSorted(arr) {\n    let isSorted = true;\n    for (let i=1;i<arr.length;i++){\n        if(arr[i-1] > arr[i]){\n            isSorted = false;\n            break; \n        }\n    }\n    return isSorted;\n}\n\nconsole.log(isSorted([\"apple\", \"boy\", \"cat\", \"dog\"]));\n\n// Output\n// true",
        "abap": "CLASS lcl_sorted DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_sorted IMPORTING it_arr TYPE STANDARD TABLE OF string EXPORTING rv_is_sorted TYPE abap_bool .\nENDCLASS.\n\nCLASS lcl_sorted IMPLEMENTATION.\n  METHOD is_sorted.\n    DATA: ls_prev TYPE string,\n          ls_curr TYPE string.\n\n    rv_is_sorted = abap_true.\n\n    LOOP AT it_arr FROM 1 INTO DATA(ls_curr).\n      IF sy-index > 1.\n        READ TABLE it_arr INDEX sy-index - 1 INTO ls_prev.\n        IF ls_prev > ls_curr.\n          rv_is_sorted = abap_false.\n          EXIT.\n        ENDIF.\n      ENDIF.\n    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a C program that prints out the Fibonacci sequence.",
        "input": "",
        "output": "#include <stdio.h>\n\nint main()\n{\n    int i, num, first=0, second=1, next;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &num);\n    printf(\"Fibonacci Series: \");\n    for (i = 0; i < num; i++)\n    {\n        if (i <= 1)\n            next = i;\n        else\n        {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        printf(\"%d \", next);\n    }\n    return 0;\n}",
        "abap": "REPORT zfibonacci.\n\nDATA: lv_num TYPE i,\n      lv_first TYPE i VALUE 0,\n      lv_second TYPE i VALUE 1,\n      lv_next TYPE i,\n      lv_i TYPE i.\n\nPERFORM get_number_of_elements CHANGING cv_number = lv_num.\nPERFORM print_fibonacci_series CHANGING cv_number = lv_num\n                                 IMPORTING ev_result   = DATA(lv_result)\n                                  .\n\nWRITE: / lv_result.\n\n\nFORM get_number_of_elements CHANGING cv_number TYPE i\n                            RETURNING VALUE(r_result) TYPE abap_bool.\n\n  WRITE: 'Enter the number of elements: '.\n  READ LINE INTO lv_num.\n  IF lv_num > 0 AND lv_num <= 99999.\n    r_result = abap_true.\n  ELSE.\n    WRITE: / 'Please enter a valid number between 1 and 99,999.'.\n    r_result = abap_false.\n  ENDIF.\n\nENDFORM.\n\n\nFORM print_fibonacci_series CHANGING cv_number TYPE i\n                              IMPORTING ev_result   TYPE string_tab\n                            .\n\n  LOOP AT sy-dynnr INTO lv_i.\n\n    IF lv_i <= 1.\n      WRITE: / lv_i TO ev_result-0 SEPARATED BY space.\n    ELSE.\n      lv_next = lv_first + lv_second.\n      lv_first = lv_second.\n      lv_second = lv_next.\n      WRITE: / lv_next TO ev_result-0 SEPARATED BY space.\n    ENDIF.\n\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a function to compare two strings and return True if they are anagrams.",
        "input": "str1 = 'silent'\nstr2 = 'listen'",
        "output": "def anagram(str1, str2): \n\n    # Get lenghts of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If lengths are not same, then strings   \n    # are not anagrams \n    if n1 != n2:\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    # Comparing sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n\n    return True\n\nprint(anagram(str1, str2))",
        "abap": "CLASS lcl_anagram DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      anagram\n        IMPORTING\n          it_str1 TYPE string\n          it_str2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool .\nENDCLASS.\n\nCLASS lcl_anagram IMPLEMENTATION.\n  METHOD anagram.\n    DATA: lv_n1 TYPE i,\n          lv_n2 TYPE i,\n          lv_sorted1 TYPE string,\n          lv_sorted2 TYPE string.\n\n    \" Get lengths of both strings \"\n    lv_n1 = strlen( it_str1 ).\n    lv_n2 = strlen( it_str2 ).\n\n    IF lv_n1 <> lv_n2.\n      rv_result = abap_false.\n      RETURN.\n    ENDIF.\n\n    \" Sort the strings\n    SORT it_str1 UP CASE IGNORING.\n    SORT it_str2 UP CASE IGNORING.\n\n    DATA: lv_sorted TYPE string.\n\n    DO.\n      lv_sorted1 = it_str1.\n      lv_sorted2 = it_str2.\n      READ TEXT it_str1 INTO lv_sorted1.\n      IF sy-subrc <> 0.\n        EXIT.\n      ENDIF.\n\n      READ TEXT it_str2 INTO lv_sorted2.\n      IF sy-subrc <> 0.\n        EXIT.\n      ENDIF.\n\n      IF lv_sorted1 <> lv_sorted2.\n        rv_result = abap_false.\n        RETURN.\n      ENDIF.\n    ENDDO.\n\n    rv_result = abap_true.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Describe in one sentence what is wrong with the following Java code.",
        "input": "public class Main {\n    public static void main(String[] args) {\n        int y;\n        y = 10 + 5;\n        y -= 30;\n    }\n}",
        "output": "The code does not do anything with the value of y, meaning that it is not being used.",
        "abap": "Unfortunately I don't see any code in our conversation yet.\n\nPlease paste the code you'd like me to help with, and I'll be happy to translate it into ABAP (or whatever language you need). \n\nAlso, please let me know what programming languages the original code is written in so I can provide a proper translation."
    },
    {
        "instruction": "Create a program in C++ that calculates the absolute difference between two numbers.",
        "input": "num1 = 50;\nnum2 = 40;",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n  int num1 = 50;\n  int num2 = 40;\n  int absDiff = abs(num1 - num2);\n  cout << \"The absolute difference between two numbers is: \" << absDiff;\n  return 0;\n}",
        "abap": "REPORT zabsolute_difference.\n\nDATA:\n  lv_num1 TYPE i VALUE '50',\n  lv_num2 TYPE i VALUE '40',\n  lv_abs_diff TYPE i.\n\nlv_abs_diff = abs( lv_num1 - lv_num2 ).\n\nWRITE: / 'The absolute difference between two numbers is: ', lv_abs_diff.\n"
    },
    {
        "instruction": "Improve the following HTML structure.",
        "input": "<div>\n<h2>Welcome!</h2>\n<p>This is my website.</p>\n</div>",
        "output": "<div>\n <h2>Welcome!</h2>\n <p>Hello and welcome to my website. Here, you can find all the information you need to know about me.</p>\n</div>",
        "abap": "REPORT zexample.\n\nDATA:\n  lv_html TYPE string,\n  ls_div TYPE ty_htmlf_fcode.\n\nls_div-fcode = '<h2>Welcome!</h2>'.\nls_div-type = 'H2'.\n\nlv_html = lv_html && ls_div-fcode.\n\nls_div-fcode = '&nbsp;Hello and welcome to my website. Here, you can find all the information you need to know about me.'.\nls_div-type = 'P'.\n\nlv_html = lv_html && ls_div-fcode.\n\nWRITE: lv_html.\n"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns the median value from the array.",
        "input": "",
        "output": "function getMedian(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  \n  let mid = Math.floor(arr.length / 2);\n  \n  if (arr.length % 2 === 0) {\n    return (arr[mid - 1] + arr[mid]) / 2;\n  } else {\n    return arr[mid];\n  }\n}",
        "abap": "CLASS zcl_median_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_median\n        IMPORTING\n          !iv_arr     TYPE STANDARD TABLE OF i\n        EXPORTING\n          !er_result TYPE i.\n\nENDCLASS.\n\nCLASS zcl_median_calculator IMPLEMENTATION.\n  METHOD get_median.\n    DATA: lv_mid TYPE i,\n          lt_sorted TYPE STANDARD TABLE OF i.\n\n    \" Sort the array in ascending order\n    SORT iv_arr INTO lt_sorted.\n\n    \" Determine the middle index\n    lv_mid = floor( ( lines( iv_arr ) / 2 ) ).\n\n    IF lines( iv_arr ) MOD 2 = 0.\n      \" If the length of the array is even, calculate the average of the two middle elements\n      er_result = ( lt_sorted[ lv_mid - 1 ] + lt_sorted[ lv_mid ] ) / 2.\n    ELSE.\n      \" If the length of the array is odd, return the middle element\n      er_result = lt_sorted[ lv_mid ].\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an R script to find the correlation between two variables.",
        "input": "",
        "output": "# read the data\ndat <- read.csv(\"data.csv\")\n\n# calculate the correlation\ncor(dat$var1, dat$var2)",
        "abap": "\" Read the data from a text file into an internal table.\nTYPES: BEGIN OF ty_data,\n          var1 TYPE f LENGTH 10 DECIMALS 4,\n          var2 TYPE f LENGTH 10 DECIMALS 4,\n        END OF ty_data.\n\nDATA: it_data TYPE STANDARD TABLE OF ty_data WITH EMPTY KEY,\n      lv_file_name TYPE string VALUE 'data.csv'.\n\nOPEN DATASET lv_file_name FOR INPUT IN TEXT MODE ENCODING NONE.\nIF sy-subrc <> 0.\n  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno\n    WITH sy-msgv1 sy-msgv2 INTO sy-sysmessg.\nENDIF.\n\nDO.\n  READ DATA(lv_data) FROM lv_file_name INTO it_data.\n  IF sy-subrc <> 0.\n    EXIT.\n  ENDIF.\nENDDO.\n\nCLOSE DATASET lv_file_name.\n\n\" Calculate the correlation between var1 and var2\nDATA: lt_corr TYPE STANDARD TABLE OF fdec.,\n      ls_corr LIKE LINE OF lt_corr,\n      li_stats TYPE REF TO cl_linalg_stats,\n      lv_sum_xy TYPE f DECIMALS 4 VALUE '0',\n      lv_mean_x TYPE f DECIMALS 4 VALUE '0',\n      lv_mean_y TYPE f DECIMALS 4 VALUE '0',\n      lv_n TYPE i VALUE '0'.\n\nLOOP AT it_data INTO DATA(ls_entry).\n  ADD ls_entry-var1 TO lv_sum_xy.\n  ADD ls_entry-var2 TO li_stats->sum_y.\n  ADD 1 TO lv_n.\n\nENDLOOP.\n\nlv_mean_x = lv_sum_xy / lv_n.\nli_stats->add_vector( it_data[ name = 'var2' ] ).\nDATA: lt_var2 TYPE STANDARD TABLE OF fdec.,\n      ls_var2 LIKE LINE OF lt_var2,\n      li_var2 TYPE REF TO cl_linalg_vector.\n\n\" Compute the vector of var2 values\nLOOP AT it_data INTO DATA(ls_entry).\n  ls_var2-catnr = ls_entry-var1.\n  APPEND ls_var2 TO lt_var2.\nENDLOOP.\n\nli_var2 = NEW cl_linalg_vector( is_vector = lt_var2 ).\n\nlv_mean_y = li_stats->get_mean( ).\n\n\" Compute the covariance\nDATA: lv_cov TYPE f DECIMALS 4 VALUE '0'.\nDO.\n  lv_cov = ( li_stats->sum_xy - lv_mean_x * li_stats->n ) /\n           ( ( li_stats->n - 1 ) * li_stats->var_x ).\n  IF sy-subrc <> 0.\n    EXIT.\n  ENDIF.\nENDDO.\n\n\" Compute the variance of var2\nDATA: lv_var TYPE f DECIMALS 4 VALUE '0'.\nDO.\n  lv_var = li_var2->compute_square_sum( ) /\n           ( li_stats->n - 1 ).\n  IF sy-subrc <> 0.\n    EXIT.\n  ENDIF.\nENDDO.\n\n\" Compute the correlation\nDATA: lv_cor TYPE f DECIMALS 4 VALUE '0'.\nlv_cor = lv_cov / sqrt( lv_var * li_stats->var_x ).\n\nWRITE: lv_cor.\n"
    },
    {
        "instruction": "Create a class in Python called 'Car' and add instance variables for the car's make, model and year.",
        "input": "",
        "output": "class Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year",
        "abap": "CLASS lcl_car DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n\n    METHODS:\n      constructor\n        IMPORTING\n          iv_make TYPE string\n          iv_model TYPE string\n          iv_year  TYPE i,\n\n      get_make     TYPE string\n        RETURNING\n          VALUE(rv_make) TYPE string,\n      set_make     TYPE string\n        RAISING\n          cx_static_check,\n\n      get_model    TYPE string\n        RETURNING\n          VALUE(rv_model) TYPE string,\n      set_model    TYPE string\n        RAISING\n          cx_static_check,\n\n      get_year     TYPE i\n        RETURNING\n          VALUE(rv_year) TYPE i,\n      set_year     TYPE i\n        RAISING\n          cx_static_check.\nENDCLASS.\n\nCLASS lcl_car IMPLEMENTATION.\n  METHOD constructor.\n    me->make = iv_make.\n    me->model = iv_model.\n    me->year = iv_year.\n  ENDMETHOD.\n\n  METHOD get_make.\n    rv_make = me->make.\n  ENDMETHOD.\n\n  METHOD set_make.\n    CHECK iv_make <> ''.\n    me->make = iv_make.\n  ENDMETHOD.\n\n  METHOD get_model.\n    rv_model = me->model.\n  ENDMETHOD.\n\n  METHOD set_model.\n    CHECK iv_model <> ''.\n    me->model = iv_model.\n  ENDMETHOD.\n\n  METHOD get_year.\n    rv_year = me->year.\n  ENDMETHOD.\n\n  METHOD set_year.\n    CHECK iv_year > 0.\n    me->year = iv_year.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Find the sum of the elements in a given list of numbers.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "sum(list_of_numbers)",
        "abap": "DATA: ls_result TYPE i.\n\nLOOP AT itab INTO DATA(ls_element).\n  ADD ls_element TO ls_result.\nENDLOOP.\n\nls_result = ls_result.\n"
    },
    {
        "instruction": "Given a binary tree, write a code snippet to list all of its descendant leafs.",
        "input": "",
        "output": "def listDescendantLeaves(root):\n    if not root: \n        return\n    elif not root.left and not root.right: \n        print(root.val) \n    listDescendantLeaves(root.left) \n    listDescendantLeaves(root.right)",
        "abap": "CLASS ltcl_tree DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      list_descendant_leaves\n        IMPORTING\n          VALUE( ir_root ) TYPE REF TO data\n        RAISING\n          no_root_found.\n\nENDCLASS.\n\nCLASS ltcl_tree IMPLEMENTATION.\n  METHOD list_descendant_leaves.\n    IF NOT ir_root IS BOUND.\n      MESSAGE 'No root node provided' TYPE 'E'.\n      RAISE EXCEPTION type cx_static_check message 'No root node provided'.\n    ENDIF.\n\n    DATA: lv_is_leaf TYPE abap_bool,\n          lr_left   TYPE REF TO data,\n          lr_right  TYPE REF TO data.\n\n    \" Check if the current node is a leaf\n    MOVE-CORRESPONDING ir_root TO DATA(lv_node).\n    IF lv_node-left IS INITIAL AND lv_node-right IS INITIAL.\n      \" If it's a leaf, print its value\n      WRITE: / lv_node-value.\n    ELSEIF NOT ir_root->left IS BOUND OR NOT ir_root->right IS BOUND.\n      MESSAGE 'Root node must have both left and right children' TYPE 'E'.\n      RAISE EXCEPTION type cx_static_check message 'Root node must have both left and right children'.\n    ENDIF.\n\n    \" Recursively traverse the left and right subtrees\n    lr_left   = ir_root->left.\n    lr_right  = ir_root->right.\n    IF lr_left IS BOUND AND NOT lr_left IS INITIAL.\n      list_descendant_leaves( lr_left ).\n    ENDIF.\n    IF lr_right IS BOUND AND NOT lr_right IS INITIAL.\n      list_descendant_leaves( lr_right ).\n    ENDIF.\n\n  ENDMETHOD.\n\nCLASS ltcl_tree_node DEFINITION INHERITING FROM cl_abap_objectdescr.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      new\n        IMPORTING\n          VALUE( iv_value ) TYPE i\n        RETURNING\n          VALUE( ro_root ) TYPE REF TO data.\n\nENDCLASS.\n\nCLASS ltcl_tree_node IMPLEMENTATION.\n  METHOD new.\n    DATA: lo_node TYPE REF TO data,\n          ls_node LIKE LINE OF to_data.\n\n    CREATE OBJECT lo_node.\n    lo_node->value = iv_value.\n\n    \" Create left and right children as optional attributes\n    ls_node-left   = CONV #( sy-datum ).\n    ls_node-right  = CONV #( sy-uzeit ).\n\n    ro_root = NEW ltcl_tree_node( ).\n    CAST cl_abap_objectdescr( ro_root )->set_static_component(\n      'left'   TYPE REF TO data, lr_left   ).\n    CAST cl_abap_objectdescr( ro_root )->set_static_component(\n      'right'  TYPE REF TO data, lr_right  ).\n\n    ASSIGN ( lo_node ) TO FIELD-SYMBOL(<ls_data> ).\n    to_data-[] = VALUE #(\n      ls_node\n    ).\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Generate an array of 10 random numbers between 1 and 100 using Python",
        "input": "",
        "output": "import random\n\ndef generate_random_array(n):\n    array= []\n    for _ in range(n):\n        array.append(random.randint(1, 100))\n    return array\n\nprint(generate_random_array(10))\n\n// Output\n// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]",
        "abap": "REPORT zgenerate_random_array.\n\nCLASS lcl_generate_random_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_random_array\n        IMPORTING\n          VALUE(iv_n) TYPE i\n        RETURNING\n          VALUE(rv_array) TYPE string.\nENDCLASS.\n\nCLASS lcl_generate_random_array IMPLEMENTATION.\n  METHOD generate_random_array.\n    DATA: lv_length TYPE i,\n          lt_array  TYPE STANDARD TABLE OF i.\n\n    lv_length = iv_n.\n\n    DO lv_length TIMES.\n      APPEND random_int( 1 ) TO lt_array.\n    ENDDO.\n\n    SORT lt_array IN NATURAL ORDER.\n    rv_array = string_to_string( lt_array ).\n  ENDMETHOD.\n\nFORM zgenerate_random_array\n  USING\n    p_n TYPE i\n  CHANGING\n    p_array TYPE string\n  EXCEPTIONS\n    OTHERS   .\n\n  lcl_generate_random_array=>generate_random_array(\n      EXPORTING\n        iv_n     = p_n\n      IMPORTING\n        RETURNING\n          rv_array = p_array ).\n\nENDFORM.\n"
    },
    {
        "instruction": "Given a list of numbers, extend the list such that it contains the square of the elements present in the list.",
        "input": "numbers = [1,2,3]",
        "output": "numbers = [1,2,3,1,4,9]",
        "abap": "DATA: lv_numbers TYPE STANDARD TABLE OF i.\n\nlv_numbers = value #( 1 2 3 1 4 9 ).\n\nWRITE: / lv_numbers.\n"
    },
    {
        "instruction": "Write a function in Java to sort a given array of numbers into ascending order.",
        "input": "int[] array = {11, 7, 18, 2, 5, 8};",
        "output": "public static void sortAscending(int[] array) \n{ \n    // Sort the array in ascending order \n    Arrays.sort(array); \n  \n    System.out.println(\"Array in Ascending Order: \"); \n    for (int i = 0; i < array.length; i++)  \n    { \n        System.out.print(array[i] + \" \"); \n    } \n}",
        "abap": "CLASS lcl_sorter DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: method sort_ascending\n      IMPORTING\n        iv_array TYPE iarr[]\n      CHANGING\n        cv_array TYPE iarr[].\nENDCLASS.\n\nCLASS lcl_sorter IMPLEMENTATION.\n  METHOD sort_ascending.\n    \" Sort the array in ascending order\n    SORT TABLE cv_array ASCENDING BY VALUE.\n\n    WRITE: / 'Array in Ascending Order:'.\n    LOOP AT cv_array INTO DATA(ls_element).\n      WRITE: ls_element, ' '.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an SQL query to select the number of employees in each department, sorted by the department name in ascending order.",
        "input": "",
        "output": "SELECT department, COUNT(employee_ID)\nFROM employees\nGROUP BY department\nORDER BY department ASC;",
        "abap": "REPORT z_example.\n\nDATA: lt_employees TYPE STANDARD TABLE OF ty_employees,\n      ls_employee  LIKE LINE OF lt_employees.\n\nTYPES:\n  BEGIN OF ty_employees,\n    department TYPE string,\n    employee_id TYPE string,\n  END OF ty_employees.\n\nSELECT department\n       COUNT( employee_id ) AS count\nINTO CORRESPONDING FIELDS OF TABLE lt_employees\nFROM employees\nGROUP BY department\nORDER BY department ASC.\n"
    },
    {
        "instruction": "Concisely describe how a Linked List works.",
        "input": "",
        "output": "A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.",
        "abap": "TYPES: BEGIN OF ty_node,\n          value TYPE string,\n          next   TYPE REF TO data,\n        END OF ty_node.\n\nDATA: l_node1  TYPE REF TO data,\n      l_node2  TYPE REF TO data,\n      l_head   TYPE REF TO data.\n\nCREATE OBJECT l_node1.\nSET PROPERTY of_node1-value 'Node 1'.\n\nCREATE OBJECT l_node2.\nSET PROPERTY of_node2-value 'Node 2'.\nSET PROPERTY of_node2-next l_node1.\n\nSET PROPERTY of_node1-next l_node2.\n\nASSIGN l_head = l_node2.\n\nWHILE l_head IS BOUND.\n  WRITE: / |{ l_head->value }|.\n  ASSIGN l_head->next TO l_head.\nENDWHILE.\n"
    },
    {
        "instruction": "Show how this array could be sorted using the insertion sort algorithm.",
        "input": "[3, 4, 8, 1, 5]",
        "output": "// Initial Array\n[3, 4, 8, 1, 5]\n\n// 1st Pass\n[3, 4, 8, 1, 5] // Move 8 to the left\n[3, 4, 1, 8, 5]\n\n// 2nd Pass\n[3, 4, 1, 8, 5] // Move 4 to the left\n[3, 1, 4, 8, 5]\n\n// 3rd Pass\n[3, 1, 4, 8, 5] // Move 3 to the left\n[1, 3, 4, 8, 5]\n\n// 4th Pass\n[1, 3, 4, 8, 5] // Move 8 to the right\n[1, 3, 4, 5, 8]\n\n// Final Array\n[1, 3, 4, 5, 8]",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\nlv_array = value #( 3 4 8 1 5 ).\n\nDO 5 TIMES.\n    DATA: lv_temp TYPE REF TO data,\n          ls_element LIKE LINE OF lv_array.\n\n    LOOP AT lv_array INTO ls_element.\n        lv_temp = ls_element.\n        EXIT.\n    ENDLOOP.\n\n    READ TABLE lv_array FROM sy-tabix - 1 ASSIGNING FIELD-SYMBOL(<fs>).\n    IF <fs> IS ASSIGNED.\n      ls_element = <fs>-value.\n      INSERT ls_element INTO TABLE lv_array.\n      DELETE lv_array INDEX sy-tabix + 1.\n    ENDIF.\n\n    MODIFY lv_array INDEX sy-tabix - 1 FROM ( lv_temp ).\nENDDO.\n\nWRITE: lv_array.\n"
    },
    {
        "instruction": "Rewrite the following code using ternary operator.",
        "input": "num1 = 5\nnum2 = 10\n\nif num1 < num2:\n    print(\"num1 is smaller than num2\")\nelse:\n    print(\"num1 is greater than or equal to num2\")",
        "output": "num1 = 5\nnum2 = 10\n\nprint(\"num1 is smaller than num2\") if (num1 < num2) else print(\"num1 is greater than or equal to num2\")",
        "abap": "DATA: num1 TYPE i VALUE 5,\n      num2 TYPE i VALUE 10.\n\nIF num1 < num2.\n  WRITE: / 'num1 is smaller than num2'.\nELSE.\n  WRITE: / 'num1 is greater than or equal to num2'.\nENDIF.\n"
    },
    {
        "instruction": "Implement a binary search on the given array.",
        "input": "Array = [1, 4, 5, 6, 7, 9]",
        "output": "\"\"\"\nImplement a binary search on a given array\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n\n# Output\n# True",
        "abap": "REPORT zbinary_search.\n\nCLASS lcl_binary_search DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      binary_search IMPORTING\n        ir_array TYPE STANDARD TABLE OF i\n        iv_element TYPE i\n        RETURNING\n          VALUE(rv_found) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_binary_search IMPLEMENTATION.\n  METHOD binary_search.\n    DATA: lv_start TYPE i,\n          lv_end   TYPE i,\n          lv_mid   TYPE i,\n          lv_result TYPE abap_bool.\n\n    lv_start = 0.\n    lv_end = lines( ir_array ).\n\n    WHILE lv_start LE lv_end.\n      lv_mid = ( lv_start + lv_end ) / 2.\n      IF ir_array[ lv_mid ] EQ iv_element.\n        rv_found = abap_true.\n        RETURN.\n      ELSEIF ir_array[ lv_mid ] LT iv_element.\n        lv_start = lv_mid + 1.\n      ELSE.\n        lv_end = lv_mid - 1.\n      ENDIF.\n    ENDWHILE.\n\n    rv_found = abap_false.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_array TYPE STANDARD TABLE OF i,\n        lv_element TYPE i,\n        lr_result  TYPE REF TO lcl_binary_search.\n\n  CREATE OBJECT lr_result TYPE lcl_binary_search.\n\n  \" Fill the array\n  APPEND 1 TO lt_array.\n  APPEND 4 TO lt_array.\n  APPEND 5 TO lt_array.\n  APPEND 6 TO lt_array.\n  APPEND 7 TO lt_array.\n  APPEND 9 TO lt_array.\n\n  \" Perform search\n  lv_element = 7.\n  lr_result->binary_search(\n    EXPORTING\n      ir_array   = lt_array\n      iv_element = lv_element\n    IMPORTING\n      rv_found   = DATA(lv_is_found)\n  ).\n\n  WRITE: / 'Element found:', lv_is_found.\n\n  \" Output:\n  \" Element found: true\n"
    },
    {
        "instruction": "Create a function that takes the string of the current time and returns the time in minutes.",
        "input": "\"12:30PM\"",
        "output": "def convert_to_minutes(time): \n    # Split the time into hours and minutes \n    h, m = map(int, time.split(':'))\n\n    # Add 12 to the hours if the time is PM \n    if time.endswith('PM'): \n        h += 12\n    return h * 60 + m\n\nprint(convert_to_minutes(\"12:30PM\")) # 750",
        "abap": "FORM convert_to_minutes\n    USING\n      p_time TYPE string.\n\n    DATA: lv_h TYPE i,\n          lv_m TYPE i.\n\n    \" Split the time into hours and minutes \n    SPLIT p_time AT ':' INTO TABLE lv_h\n                       lv_m.\n    IF sy-datum CO '12345678'. \" This will not affect anything for our purpose but allows us to split the string in any case if there is a colon\n\n    \" Add 12 to the hours if the time is PM \n    IF p_time CS 'PM' <> abap_false.\n      lv_h += 12.\n    ENDIF.\n\n    \" Return the minutes\n    WRITE: ( lv_h * 60 + lv_m ).\n\nENDFORM.\n"
    },
    {
        "instruction": "What will be the result of the following Ruby code?",
        "input": "a = 11\nb = 3\nc = a % b",
        "output": "The result of the code will be 2.",
        "abap": "DATA: result TYPE i VALUE 2.\nWRITE: / result.\n"
    },
    {
        "instruction": "You are given a list of numbers. Write a program to check if the given list is a palindrome or not.",
        "input": "[1, 2, 3, 2, 1]",
        "output": "def is_palindrome(arr):\n  rev_arr = arr[::-1]\n  if arr == rev_arr:\n    return True\n  else:\n    return False\n\nprint(is_palindrome([1, 2, 3, 2, 1]))",
        "abap": "REPORT zpalindrometest.\n\nCLASS lcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome IMPORTING\n        iv_arr  TYPE STANDARD TABLE OF i VALUE IS INITIAL\n      RETURNING\n        VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: lr_arr_reversed TYPE STANDARD TABLE OF i.\n\n    lv_arr_reversed = VALUE #( FOR x IN iv_arr ORDER BY -1 ( val = x ) ).\n    IF sy-index = lines( iv_arr ).\n      rv_result = abap_true.\n    ELSEIF iv_arr[] <> lv_arr_reversed[] .\n      rv_result = abap_false.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_palindrome TYPE STANDARD TABLE OF i,\n        lv_result    TYPE abap_bool.\n\n  \" Create a palindrome list\n  APPEND '1' TO lt_palindrome.\n  APPEND '2' TO lt_palindrome.\n  APPEND '3' TO lt_palindrome.\n  APPEND '2' TO lt_palindrome.\n  APPEND '1' TO lt_palindrome.\n\n  lv_result = lcl_palindrome=>is_palindrome( iv_arr = lt_palindrome ).\n\n  IF lv_result EQ abap_true.\n    WRITE: / 'The list is a palindrome'.\n  ELSE.\n    WRITE: / 'The list is not a palindrome'.\n  ENDIF.\n"
    },
    {
        "instruction": "Explain the purpose of try-catch statement in JavaScript.",
        "input": "",
        "output": "The try-catch statement is used to handle errors in JavaScript code. It allows the code to continue running even if there is an error. The try clause contains the code that may throw an error, and the catch clause contains code that will execute when an error is thrown.",
        "abap": "TRY.\n    \" Code that may throw an exception here\n    DATA: lv_variable TYPE i VALUE ' abc'.\n    lv_variable = 'abc'.\n\n    \" More code that may throw an exception here\n    IF lv_variable <> '123'. \n        MESSAGE e000(02) TYPE 'E'. \n    ENDIF.\n\n  CATCH cx_sy_itab_key_not_existent INTO DATA(lo_exception).\n    \" Handle the specific exception\n    WRITE: / lo_exception->if_message~text.\n  CATCH cx_static_check INTO DATA(lo_exception_2).\n    \" Handle another specific exception\n    WRITE: / 'Another error'.\nENDTRY.\n"
    },
    {
        "instruction": "Write a Java program to calculate the sum of the two given integers.",
        "input": "Integers: 4 and 9",
        "output": "public static int addIntegers(int a, int b) {\n    int sum = a + b;\n    return sum;\n}\n\npublic static void main(String[] args) {\n    int x = 4, y = 9;\n    int sum = addIntegers(x, y);\n    System.out.println(\"Sum is: \"+sum);\n}",
        "abap": "REPORT zaddintegers.\n\nCLASS lcl_add_integers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      add_integers IMPORTING a TYPE i b TYPE i RETURNING VALUE(result) TYPE i.\nENDCLASS.\n\nCLASS lcl_add_integers IMPLEMENTATION.\n  METHOD add_integers.\n    result = a + b.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: x TYPE i,\n        y TYPE i,\n        sum TYPE i.\n\n  x = 4.\n  y = 9.\n  CALL METHOD lcl_add_integers=>add_integers\n    EXPORTING\n      a     = x\n      b     = y\n    IMPORTING\n      result = sum.\n\n  WRITE: / 'Sum is:', sum.\n"
    },
    {
        "instruction": "Write a SQL query to update a value x in a column y in a table z.",
        "input": "x = 5, y = 'amount' and z = 'payments'.",
        "output": "UPDATE payments \nSET amount = 5 \nWHERE payments.amount IS NOT NULL;",
        "abap": "REPORT zupdate_payments.\n\nDATA: ls_payment TYPE payments.\n\nLOOP AT payments INTO ls_payment.\n  IF ls_payment-amount IS NOT NULL.\n    MODIFY payments FROM ls_payment AMENDMENT MODE NO-FEAR\n      amount = 5.\n  ENDIF.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a class in Java named Puppy that has two instance variables, age and name and two methods, bark and sleep.",
        "input": "",
        "output": "public class Puppy { \n   // Instance Variables \n   String name; \n   int age; \n  \n   // Constructor \n   public Puppy(String name, int age){ \n      this.name = name; \n      this.age = age; \n   } \n  \n   // Methods \n   public void bark(){ \n      System.out.println(\"Woof Woof!\"); \n   } \n  \n   public void sleep(){ \n      System.out.println(\"Zzzzzz...\"); \n   } \n}",
        "abap": "CLASS lcl_puppy DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: constructor\n      IMPORTING\n        name TYPE string\n        age TYPE i\n      EXPORTING\n        value TYPE REF TO cl_puppy.\n\n    METHODS:\n      bark\n        RAISING\n          cx_static_check,\n      sleep\n        RAISING\n          cx_static_check.\n\n  PRIVATE SECTION.\n    DATA: mv_name TYPE string,\n          mv_age  TYPE i.\n\nENDCLASS.\n\nCLASS lcl_puppy IMPLEMENTATION.\n  METHOD constructor.\n    me->mv_name = name.\n    me->mv_age = age.\n  ENDMETHOD.\n\n  METHOD bark.\n    WRITE: / 'Woof Woof!'.\n  ENDMETHOD.\n\n  METHOD sleep.\n    WRITE: / 'Zzzzzz...'.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "What would be the resulting string after executing this code?",
        "input": "a = \"Hello\"\nb = \"World\"\n\nc = a + \" \" + b\n\nc = f\"{c}!\"",
        "output": "c = \"Hello World!\"",
        "abap": "Here is the equivalent code in ABAP (Advanced Business Application Programming):\n\n`DATA: lv_string TYPE string VALUE 'Hello World!'.` \n\nNote that I've used `lv_string` as a variable name, which is a common convention in ABAP to store data in local variables. If you want to directly print the value to the screen, you could use:\n\n`WRITE: / 'Hello World!'.`\n\nThis will output \"Hello World!\" to the console or log."
    },
    {
        "instruction": "Create a SQL query to find the total revenue for services in the month of February.",
        "input": "",
        "output": "SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.type = 'service' \n  AND MONTH(o.order_date) = 2\n  AND YEAR(o.order_date) = YEAR(CURDATE());",
        "abap": "REPORT z_service_orders.\n\nDATA: ls_order TYPE REF TO cl_ooo_order,\n      lt_orders TYPE STANDARD TABLE OF ty_orders,\n      lv_total_services TYPE p DECIMAL34 2.\n\nSELECT SUM( e ~ total ) INTO lv_total_services\n  FROM ( SELECT o ~ order_id as id,\n                 p ~ product_id AS prod_id,\n                 s ~ type AS type,\n                 o ~ order_date AS date,\n                 t ~ quantity AS qty,\n                 t ~ unit_price AS price,\n                 t ~ subtotal AS subtot,\n                 ( t ~ quantity * t ~ unit_price ) AS total\n          FROM cl_ooo_order_item AS e\n          JOIN cl_ooo_products AS p ON e ~ product_id = p ~ product_id\n          JOIN cl_ooo_orders AS o ON e ~ order_id = o ~ order_id\n          WHERE p ~ type = 'SERVICE'\n            AND month( o ~ order_date ) = 2\n            AND year( o ~ order_date ) = sy-datum ).\n\nIF sy-subrc <> 0.\n  MESSAGE id: sy-msgid type: sy-msgty number: sy-msgno\n    initial 1 raised_by: sy-msgv1\n          text: 'Error fetching data'  DISPLAY LIKE 'E'.\nENDIF.\n\nWRITE:/ lv_total_services.\n"
    },
    {
        "instruction": "Parse the following JSON and extract the value of the variable 'price'.",
        "input": "`{\n \"item\": \"Shoes\",\n \"price\": 125\n}`",
        "output": "import json \n\n# parse the JSON string\ndata = json.loads(input_json)\n\n# extract the value of the price variable\nprice = data['price']",
        "abap": "DATA: lv_input_json TYPE xstring,\n      lt_data       TYPE ty_data.\n\nlv_input_json = input->get_string(  ).\nlt_data = json_deserialize(\n  iv_json    = lv_input_json\n  iv_exclude_none_values = abap_true\n ).\n\n\" Die JSON-Datei wird nun als internes Abakonstrukt interpretiert.\nDATA: price TYPE p DECIMAL2.\n\nprice = lt_data-price.\n\n\" Hier k\u00f6nnen Sie die Variable \"price\" nun weiter verarbeiten.\n"
    },
    {
        "instruction": "Create a program to generate an XOR linked list.",
        "input": "",
        "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.npx = None\n  \nclass XORLinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def add(self, item): \n        new_node = Node(item) \n        new_node.npx = self.head \n        if self.head is not None: \n            self.head.npx = new_node.npx ^ self.head.npx \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data), \n            prev = temp \n            temp = self.XOR(temp.npx, prev) \n  \n    def XOR(self, a, b): \n        return (a or b) and (not a or not b) \n  \na = XORLinkedList() \na.add(2) \na.add(3) \na.add(4) \na.add(5) \na.printList()",
        "abap": "CLASS zxor_linked_list DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n    TYPES: BEGIN OF ty_node,\n             data TYPE i,\n             npx TYPE REF TO zxor_linked_list=>ty_node,\n           END OF ty_node.\n\n    CLASS-METHOD:\n      get_next\n        IMPORTING\n          it_data1 TYPE REF TO zxor_linked_list=>ty_node\n          it_data2 TYPE REF TO zxor_linked_list=>ty_node\n        RETURNING\n          VALUE(ri_next) TYPE REF TO zxor_linked_list=>ty_node.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      add_item\n        IMPORTING\n          iv_value TYPE i\n        CHANGING\n          ct_nodes TYPE STANDARD TABLE OF zxor_linked_list=>ty_node.\n\n    CLASS-METHOD:\n      print_list\n        IMPORTING\n          it_nodes TYPE STANDARD TABLE OF zxor_linked_list=>ty_node.\nENDCLASS.\n\nCLASS zxor_linked_list IMPLEMENTATION.\n  METHOD get_next.\n    ri_next = if_oo_adt_classruntime#is_bound( it_data1->npx ) AND\n               if_oo_adt_classruntime#is_bound( it_data2->npx ) THEN\n                   get_next( it_data1->npx it_data2->npx ).\n  ENDMETHOD.\n\n  METHOD add_item.\n    DATA: lr_node TYPE REF TO zxor_linked_list=>ty_node.\n    lr_node = VALUE #( data = iv_value npx = lines( ct_nodes ) ).\n\n    IF sy-subrc <> 0.\n      APPEND lr_node TO ct_nodes.\n      IF lines( ct_nodes ) > 1.\n        ct_nodes[ lines( ct_nodes ) - 1 ]-npx = get_next(\n          ct_nodes[ lines( ct_nodes ) - 2 ] npx ct_nodes[ lines( ct_nodes ) - 1 ] ).\n      ENDIF.\n    ELSE.\n      LOOP AT ct_nodes INTO DATA(ls_node) WHERE data <> iv_value.\n        IF ls_node-npx IS BOUND.\n          ct_nodes[ sy-tabix - 1 ]-npx = get_next(\n            ls_node npx lr_node ).\n        ENDIF.\n      ENDLOOP.\n    ENDIF.\n\n    CLEAR ct_nodes.\n    SORT ct_nodes BY data.\n    DELETE ct_nodes INDEX lines( ct_nodes ) WHERE npx <> lines( ct_nodes ).\n\n    APPEND lr_node TO ct_nodes.\n  ENDMETHOD.\n\n  METHOD print_list.\n    DATA: ls_first TYPE zxor_linked_list=>ty_node,\n          lt_nodes LIKE sy-tfill WITH PRIMARY KEY ( data ).\n    SELECT * FROM @lt_nodes INTO TABLE @lt_nodes UP TO 10 ROWS.\n\n    WHILE ls_first IS NOT INITIAL.\n      WRITE : 'Node Data:', ls_first-data.\n      READ TABLE lt_nodes INTO ls_first REFERENCE( npx ) INDEX sy-slin.\n      UNTIL ls_first IS BOUND OR ls_first-npx IS BOUND OR\n             get_next(\n               ls_first npx ls_first )  IS NOT BOUND.\n    ENDWHILE.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create an algorithm to detect if a string is a palindrome or not.",
        "input": "",
        "output": "def isPalindrome(s): \n    reversedString = s[::-1] \n  \n    if (s == reversedString): \n        return True\n    return False",
        "abap": "REPORT zis_palindrome.\n\nCLASS lcl_is_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome IMPORTING\n        p_string TYPE string\n        RETURNING\n          value(p_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_is_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: lv_reversed TYPE string.\n    \n    lv_reversed = reverse( val = p_string ).\n    \n    IF p_string CA lv_reversed.\n      p_result = abap_true.\n    ELSE.\n      p_result = abap_false.\n    ENDIF.\n  ENDMETHOD.\n\nMETHOD reverse.\n  DO strlen( val ) - 1 TIMES.\n    WRITE val+strlen( val )-i TO reversed( val ).\n  ENDDO.\nENDMETHOD.\n"
    },
    {
        "instruction": "Modify the given HTML code to create a form element with two text boxes and a submit button.",
        "input": "<h2>My Form</h2>",
        "output": "<h2>My Form</h2>\n<form>\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" name=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>",
        "abap": "DATA: ls_data TYPE tiptiip.\n\nFORM my_form ON REQUEST.\n\n  TYPES:\n    BEGIN OF ty_data,\n      name     TYPE string,\n      email    TYPE string,\n    END OF ty_data.\n\n  DATA: lt_data TYPE STANDARD TABLE OF ty_data.\n\n  PERFORM display_form.\n\nENDFORM.\n\nFORM display_form.\n\n  DATA: lv_name LIKE sy-dbcname,\n         lv_email LIKE sy-dbcname.\n\n  ls_data-name = 'Enter your name'.\n  ls_data-email = 'Enter your email'.\n\n  APPEND ls_data TO lt_data.\n\n  WRITE: / 'My Form'.\n  WRITE: /. \n\n  LOOP AT lt_data INTO DATA(ls_current).\n\n    WRITE: / 'Name:', ls_current-name.\n    WRITE: / 'Email:', ls_current-email.\n\n  ENDLOOP.\n\n  PERFORM get_form_input USING: lt_data.\n\nENDFORM.\n\nFORM get_form_input USING it_data TYPE STANDARD TABLE OF ty_data.\n\n  PERFORM display_get_input USING it_data.\n\nENDFORM.\n\nFORM display_get_input USING it_data TYPE STANDARD TABLE OF ty_data.\n\n  DATA: lv_name LIKE sy-dbcname,\n         lv_email LIKE sy-dbcname.\n\n  DO.\n    WAIT UP TO 1 SECONDS.\n    \"Simulate user input\n    READ TABLE it_data INTO DATA(ls_current) INDEX sy-index - 1.\n    IF ls_current-name <> '' AND ls_current-email <> ''.\n      WRITE: / 'Name:', ls_current-name.\n      WRITE: / 'Email:', ls_current-email.\n    ELSE.\n      MESSAGE 'Please fill in the form' TYPE 'E'.\n    ENDIF.\n\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create a SQL query to find the total sales for product category \u2018clothing\u2019.",
        "input": "",
        "output": "SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.category = 'clothing';",
        "abap": "REPORT z_example.\n\nTYPES: BEGIN OF ty_product,\n          category TYPE c LENGTH 10,\n       END OF ty_product.\nTYPES: BEGIN OF ty_order_item,\n          product_id TYPE i,\n          total      TYPE f DECIMALS 2,\n       END OF ty_order_item.\nTYPES: BEGIN OF ty_order,\n          order_id TYPE i,\n       END OF ty_order.\n\nDATA: lt_orders TYPE STANDARD TABLE OF ty_order,\n      lt_product TYPE STANDARD TABLE OF ty_product,\n      lt_items   TYPE STANDARD TABLE OF ty_order_item,\n      lv_sum    TYPE f DECIMALS 2.\n\nSELECT *\n  FROM orders\n  INTO TABLE lt_orders.\n\nLOOP AT lt_orders INTO DATA(ls_order).\n  SELECT *\n    FROM order_items\n    INTO TABLE DATA(lt_items)\n    WHERE order_id = ls_order-order_id.\n\n  LOOP AT lt_items INTO DATA(ls_item).\n    SELECT SINGLE category\n      FROM products\n      INTO DATA(ls_product-category)\n      WHERE product_id = ls_item-product_id.\n\n    IF ls_product-category CA 'clothing'.\n      lv_sum += ls_item-total.\n    ENDIF.\n  ENDLOOP.\nENDLOOP.\n\nWRITE: / lv_sum.\n"
    },
    {
        "instruction": "Write a shell script to prompt a user for their name and display a personalized message.",
        "input": "",
        "output": "#!/bin/bash\nread -p \"Enter your name: \" name\necho \"Hello $name, welcome to our website!\"",
        "abap": "REPORT zhello.\n\nPARAMETERS: p_name TYPE string DEFAULT 'John Doe'.\n\nDATA: lv_hello_text TYPE string.\n\nlv_hello_text = |Hello { p_name }, welcome to our website!.\n\nWRITE: lv_hello_text.\n"
    },
    {
        "instruction": "Create a program to find the sum of all the even numbers from 1 to n.",
        "input": "",
        "output": "def find_sum(n):  \n    sum = 0\n    for i in range (1, n): \n        if (i % 2 == 0): \n            sum = sum + i \n    return sum",
        "abap": "REPORT zfind_sum.\n\nCLASS lcl_find_sum DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_sum\n        IMPORTING\n          VALUE(iv_n) TYPE i\n        RETURNING\n          VALUE(rv_sum) TYPE f.\nENDCLASS.\n\nCLASS lcl_find_sum IMPLEMENTATION.\n  METHOD find_sum.\n    DATA: lv_sum TYPE f,\n          lv_i   TYPE i.\n\n    lv_sum = 0.\n    DO iv_n - 1 TIMES.\n      IF ( lv_i MOD 2 ) EQ 0.\n        ADD lv_i TO lv_sum.\n      ENDIF.\n      lv_i = lv_i + 1.\n    ENDDO.\n\n    rv_sum = lv_sum.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lv_n TYPE i VALUE 10,\n      lv_sum TYPE f.\n\nlv_sum = lcl_find_sum=>find_sum( iv_n = lv_n ).\nWRITE: / 'The sum is:', lv_sum.\n"
    },
    {
        "instruction": "Create a program in Java to print out the Fibonacci sequence of numbers up to 10.",
        "input": "",
        "output": "public class Fibonacci {\n\n  public static void main(String[] args) {\n    int n1=0,n2=1,n3,i,count=10;\n    System.out.print(n1+\" \"+n2);\n    \n    for(i=2;i<count;++i) {\n      n3=n1+n2;\n      System.out.print(\" \"+n3);\n      n1=n2;\n      n2=n3;\n    }   \n  }\n}",
        "abap": "REPORT zfibonacci.\n\nDATA: lv_n1 TYPE i VALUE 0,\n      lv_n2 TYPE i VALUE 1,\n      lv_n3 TYPE i,\n      lv_i   TYPE i,\n      lv_count TYPE i VALUE 10.\n\nWRITE: / lv_n1, lv_n2.\n\nDO.\n  lv_i = lv_i + 1.\n  IF lv_i < lv_count.\n    DATA: lr_n3 TYPE REF TO data.\n\n    lr_n3 = lv_n1 + lv_n2.\n    WRITE: / lr_n3.\n    CLEAR: lr_n3.\n\n    mv_n1 = mv_n2.\n    mv_n2 = lr_n3.\n  ELSE.\n    EXIT.\n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Write a function to calculate the arithmetic mean of an array of numbers",
        "input": "arr = [5, 8, 2, 4, 7, 10]",
        "output": "def calculate_mean(arr):\n    \"\"\"\n    Calculate the arithmetic mean of an array of numbers.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    return sum(arr) / len(arr)",
        "abap": "CLASS lcl_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_mean IMPORTING\n        VALUE( p_arr ) TYPE STANDARD TABLE OF f,\n        RETURNING\n          VALUE( p_result ) TYPE f.\nENDCLASS.\n\nCLASS lcl_calculator IMPLEMENTATION.\n  METHOD calculate_mean.\n    IF lines( p_arr ) = 0.\n      p_result = 0.\n    ELSE.\n      DATA: lv_sum TYPE f.\n\n      \" Calculate the sum of all numbers in the array\n      LOOP AT p_arr INTO DATA(ls_number).\n        lv_sum = ls_number + lv_sum.\n      ENDLOOP.\n\n      \" Calculate and return the mean\n      p_result = lv_sum / lines( p_arr ).\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Count the number of characters in the string.",
        "input": "text = \"Hello World!\"",
        "output": "len(text) # 12",
        "abap": "`text = 'hello world'. len(text) # 11`\n\nThis is an example of a length calculation in Python.\n\nIs there something specific you would like me to convert to ABAP?"
    },
    {
        "instruction": "Design a program to compare two sorted lists and returning list with the common elements.",
        "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]",
        "output": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list",
        "abap": "CLASS lcl_common_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      compare_lists\n        IMPORTING\n          it_list_one TYPE ty_list1\n          it_list_two TYPE ty_list2\n        EXPORTING\n          et_common_list TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_common_list IMPLEMENTATION.\n  METHOD compare_lists.\n    DATA: ls_result TYPE STANDARD TABLE OF i,\n      ii_one     TYPE i,\n      ii_two     TYPE i.\n\n    CLEAR: ls_result[], ii_one, ii_two.\n\n    LOOP AT it_list_one INTO ii_one.\n      LOOP AT it_list_two INTO ii_two.\n        IF ii_one EQ ii_two.\n          INSERT ii_one INTO TABLE ls_result. \"Add common element to result\n          EXIT.\n        ELSEIF ii_one LT ii_two.\n          CONTINUE. \"Move on to next element in list 1\n        ELSE.\n          CONTINUE. \"Move on to next element in list 2\n        ENDIF.\n\n        IF sy-scope NE 'INT'. \"Check if inner loop ended normally or by exception\n          EXIT.\n        ENDIF.\n      ENDLOOP.\n    ENDLOOP.\n\n    et_common_list = ls_result[].\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: BEGIN OF ty_list1,\n          value TYPE i,\n        END OF ty_list1,\n        BEGIN OF ty_list2,\n          value TYPE i,\n        END OF ty_list2.\n\nDATA: lt_list_one TYPE STANDARD TABLE OF ty_list1,\n      lt_list_two TYPE STANDARD TABLE OF ty_list2,\n      lt_common_list TYPE STANDARD TABLE OF i.\n\nlt_list_one = VALUE #( ( 1 ) ( 3 ) ( 5 ) ).\nlt_list_two = VALUE #( ( 2 ) ( 4 ) ).\n\nCALL METHOD cl_abap_behaviour=>compare_lists\n  EXPORTING\n    it_list_one   = lt_list_one\n    it_list_two   = lt_list_two\n  IMPORTING\n    et_common_list = lt_common_list.\n\nLOOP AT lt_common_list INTO DATA(ls_value).\n  WRITE: / ls_value.\nENDLOOP.\n"
    },
    {
        "instruction": "Using list comprehension, create a list of even numbers between 1 and 20 in Python.",
        "input": "",
        "output": "even_nums_list = [num for num in range(1, 21) if num % 2 == 0]",
        "abap": "TYPES: ty_even_numbers TYPE STANDARD TABLE OF i.\n\nDATA: even_numbers LIKE sy-dbcnt.\n\nDO.\n  EVEN: NUMBERS = even_numbers\n        WHILE even_numbers < 20.\n    IF sy-index MOD 2 = 0.\n      APPEND sy-index TO even_numbers.\n    ENDIF.\n  ENDDO.\n\n\" Alternatively, you can use a loop:\nDATA: even_numbers TYPE STANDARD TABLE OF i.\n\nDO 40 TIMES.\n  EVEN: NUMBERS = even_numbers\n        WHILE even_numbers < 20.\n    IF sy-index MOD 2 = 0.\n      APPEND sy-index TO even_numbers.\n    ENDIF.\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Read a code and identify the data type of the variables a and b",
        "input": "a = 8\nb = \"Hello\"",
        "output": "A is an integer and B is a string.",
        "abap": "DATA: \" declare variables A and B\n  a TYPE i,\n  b TYPE string.\n"
    },
    {
        "instruction": "Implement a Java program for finding the index of an element in a sorted array.",
        "input": "",
        "output": "public int binarySearch(int[] arr, int val){\n    int left = 0;\n    int right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) /2 ;\n        if (arr[mid] == val) \n            return mid;\n        else if (arr[mid] < val) \n            left = mid + 1;\n        else \n            right = mid - 1;\n    }  \n    return -1;\n}",
        "abap": "FORM binary_search\n  USING\n    it_data TYPE i[] \" array of integers\n    iv_value TYPE i \" value to search for\n    RETURNING\n      rv_result TYPE i. \" index of found value, or -1 if not found\n\n  DATA: lv_left TYPE i,\n        lv_right TYPE i,\n        lv_mid   TYPE i.\n\n  IF it_data IS INITIAL.\n    RAISE EXCEPTION TYPE cx_static_check MESSAGE 'Array is empty'.\n  ENDIF.\n\n  lv_left = 0.\n  lv_right = lines( it_data ) - 1.\n\n  WHILE lv_left <= lv_right.\n    lv_mid = lv_left + ( lv_right - lv_left ) / 2 .\n\n    IF it_data[ lv_mid ] = iv_value .\n      rv_result = lv_mid.\n      RETURN.\n    ELSEIF it_data[ lv_mid ] < iv_value .\n      lv_left = lv_mid + 1.\n    ELSE.\n      lv_right = lv_mid - 1.\n    ENDIF.\n\n  ENDDO.\n\n  rv_result = -1.\n\nENDFORM.\n"
    },
    {
        "instruction": "Demonstrate how to use an arraylist in Java.",
        "input": "",
        "output": "import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        // Create an arraylist \n        ArrayList<String> list = new ArrayList<String>(); \n  \n        // Adding elements to the list \n        list.add(\"Adam\"); \n        list.add(\"Bob\"); \n        list.add(\"Charlie\"); \n  \n        // Printing elements in the list \n        System.out.println(list); \n  \n        // Accessing elements using get() method \n        String name = list.get(1); \n        System.out.println(\"Name at index 1 is : \" + name); \n  \n        // Adding elements at a specific index \n        list.add(1, \"David\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Removing elements from a list \n        list.remove(\"Adam\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Check if an element exists in a list \n        boolean isPresent = list.contains(\"Bob\"); \n        System.out.println(\"Bob is present in the list : \" + isPresent); \n    } \n}\n\n// Output:\n// [Adam, Bob, Charlie] \n// Name at index 1 is : Bob\n// Updated list : [Adam, David, Bob, Charlie]\n// Updated list : [David, Bob, Charlie]\n// Bob is present in the list : true",
        "abap": "REPORT zarray_list_example.\n\nDATA: lt_list TYPE STANDARD TABLE OF string,\n      ls_name TYPE string.\n\n\" Create an array\nlt_list = value #( ( 'Adam' ) ( 'Bob' ) ( 'Charlie' ) ).\n\n\" Print list\nWRITE: / 'List:', lt_list.\n\n\" Accessing elements using read table statement\nREAD TABLE lt_list INTO ls_name INDEX 1.\nWRITE: / 'Name at index 1 is : ', ls_name.\n\n\" Adding element at a specific index\nINSERT VALUE #( name = 'David' ) INTO TABLE lt_list INKINDEX 1.\nDELETE lt_list INDEX 2.\nWRITE: / 'Updated list:', lt_list.\n\n\" Removing elements from the array\nDELETE lt_list WITH TABLE KEY name = 'Adam'.\nWRITE: / 'Updated list:', lt_list.\n\n\" Check if an element exists in the list\nASSERT ls_name = 'Bob' IS NOT SUBSTITUTABLE 1. \" (Bob is present)\nASSERT ls_name = 'Bob' IS NOT SUBSTITUTABLE 0. \" (Bob is not present)\n\n\" Print final result\nWRITE: / 'Bob is present in the list : ', sy-subrc <> abap_false.\n"
    },
    {
        "instruction": "Write a Java code to calculate the maximum value in an array.",
        "input": "",
        "output": "public static int getMax(int[] array) {\n  int max = array[0];\n  for (int i=1; i < array.length; i++) {\n    if (array[i] > max) {\n        max = array[i];\n    }\n  }\n  return max;\n}",
        "abap": "CLASS lcl_array_max DEFINITION.\nPUBLIC.\n  CLASS-METHODS:\n    get_max IMPORTING\n      VALUE( iv_array ) TYPE STANDARD TABLE OF i\n      RETURNING\n        VALUE( rv_max ) TYPE i.\nENDCLASS.\n\nCLASS lcl_array_max IMPLEMENTATION.\n  METHOD get_max.\n    DATA: lv_max TYPE i,\n          ls_value TYPE i.\n\n    MOVE '0' TO lv_max.\n    LOOP AT iv_array INTO ls_value FROM 1 LEAVING \"1\" SY-SIZE.\n      IF ls_value > lv_max.\n        MOVE ls_value TO lv_max.\n      ENDIF.\n    ENDLOOP.\n\n    rv_max = lv_max.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Rearrange the following list of numbers in an ascending order.",
        "input": "[9, 5, 8, 2, 4]",
        "output": "[2, 4, 5, 8, 9]",
        "abap": "DATA: lt_numbers TYPE STANDARD TABLE OF i.\n\nlt_numbers = VALUE #( ( 2 ) ( 4 ) ( 5 ) ( 8 ) ( 9 ) ).\n\nLOOP AT lt_numbers INTO DATA(lv_number).\n  WRITE lv_number.\nENDLOOP.\n"
    },
    {
        "instruction": "What is the purpose of declaring a function as static in C++?",
        "input": "",
        "output": "The purpose of declaring a function as static in C++ is to restrict its visibility to only the translation unit in which it is declared. A static function can only be called from within the same translation unit and thus, it cannot be accessed from outside of that translation unit.",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" Non-final method\n      meth1 IMPORTING value1 TYPE string EXPORTING value2 TYPE string,\n      \" Final method\n      FINAL meth2 IMPORTING value1 TYPE string RETURNING value2 TYPE string.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD meth1.\n    \" Code for meth1\n  ENDMETHOD.\n\n  METHOD meth2.\n    \" Code for meth2\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Compare two integers and print the larger one.",
        "input": "a = 3, b = 5",
        "output": "if a > b:\n    print(a)\nelse:\n    print(b)",
        "abap": "DATA: lv_a TYPE i,\n       lv_b TYPE i.\n\nlv_a = 1. \" replace with actual values\nlv_b = 2.\n\nIF lv_a > lv_b.\n  WRITE: / lv_a.\nELSE.\n  WRITE: / lv_b.\nENDIF.\n"
    },
    {
        "instruction": "Given a string s, write a function to check if the string is a palindrome.",
        "input": "s = \"A man, a plan, a canal: Panama!\"",
        "output": "def is_palindrome(s):\n    s = s.lower().replace(' ', '').replace(',', '').replace(':', '').replace('!', '')\n\n    return s == ''.join(reversed(s))",
        "abap": "CLASS zcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome\n        IMPORTING\n          value(palindrome) TYPE string\n        RETURNING\n          VALUE(result) TYPE abap_bool.\nENDCLASS.\n\nCLASS zcl_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: lv_replaced_string TYPE string.\n\n    \" Remove spaces, commas, colons and exclamation marks from the input string\n    lv_replaced_string = palindrome.\n    WHILE lv_replaced_string CA ' ,!:'.\n      IF lv_replaced_string MATCHES '[^a-zA-Z0-9]'.\n        lv_replaced_string = lv_replaced_string REPLACE REGEX '[^a-zA-Z0-9]' WITH ''.\n      ENDIF.\n      lv_replaced_string = lv_replaced_string+1(1).\n\n    ENDDO.\n\n    \" Convert the string to lowercase\n    TRANSLATE lv_replaced_string TO LOWER CASE.\n\n    result = lv_replaced_string CA lv_replaced_string REVERSE.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence.",
        "input": "",
        "output": "def nth_fibonacci_number(n):\n    \"\"\"Find the value of n where n is the index of the Fibonacci Sequence.\"\"\" \n    if n < 2:\n        return n \n    elif n == 2:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)",
        "abap": "FUNCTION z_nth_fibonacci_number.\n*\"----------------------------------------------------------------------\n*\"*\"Local Interface:\n*\"  IMPORTING\n*\"     VALUE(I_N) TYPE  I\n*\"  EXPORTING\n*\"     VALUE(E_RESULT) TYPE  i\n*\"----------------------------------------------------------------------\n\n  IF i_n < 2.\n    e_result = i_n.\n  ELSEIF i_n == 2.\n    e_result = 1.\n  ELSE.\n    DATA(lv_prev_prev) = 0.\n    DATA(lv_prev) = 1.\n    DO i_n TIMES.\n      DATA(lv_curr) = lv_prev + lv_prev_prev.\n      e_result = lv_curr.\n      lv_prev_prev = lv_prev.\n      lv_prev = lv_curr.\n    ENDDO.\n  ENDIF.\n\nENDFUNCTION. \n"
    },
    {
        "instruction": "Write a function to determine if two strings are anagrams of each other",
        "input": "",
        "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    freq1 = {}\n    freq2 = {}\n\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True",
        "abap": "REPORT zare_anagrams.\n\nCLASS lcl_are_anagrams DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      are_anagrams IMPORTING\n        str1 TYPE string\n        str2 TYPE string\n      EXPORTING\n        result TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_are_anagrams IMPLEMENTATION.\n  METHOD are_anagrams.\n    IF strlen( val = str1 ) <> strlen( val = str2 ).\n      result = abap_false.\n      RETURN.\n    ENDIF.\n\n    DATA: freq1 TYPE STANDARD TABLE OF ty_charfreq,\n          freq2 TYPE STANDARD TABLE OF ty_charfreq.\n\n    \" Create frequency table for both strings\n    DO strlen( val = str1 ) TIMES.\n      READ TABLE str1 INTO DATA(char).\n      FIND ALL OCCURRENCES OF char IN str1 MATCH COUNT DATA(count) IGNORING CASE.\n      INSERT VALUE #( char = char count = count ) INTO freq1.\n    ENDDO.\n\n    DO strlen( val = str2 ) TIMES.\n      READ TABLE str2 INTO char.\n      FIND ALL OCCURRENCES OF char IN str2 MATCH COUNT count IGNORING CASE.\n      INSERT VALUE #( char = char count = count ) INTO freq2.\n    ENDDO.\n\n    \" Check if both frequency tables are identical\n    LOOP AT freq1 ASSIGNING FIELD-SYMBOL(<fs_freq1>).\n      READ TABLE freq2 WITH KEY char = <fs_freq1>-char ASSIGNING FIELD-SYMBOL(<fs_freq2>).\n      IF sy-subrc <> 0 OR <fs_freq2>-count <> <fs_freq1>-count.\n        result = abap_false.\n        RETURN.\n      ENDIF.\n    ENDLOOP.\n\n    result = abap_true.\n  ENDMETHOD.\n\nCLASS lcl_are_anagrams DEFINITION.\n  TYPES: BEGIN OF ty_charfreq,\n           char TYPE string,\n           count TYPE i,\n         END OF ty_charfreq.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Create a JavaScript function that takes a given sentence as a parameter and capitalizes the first letter of each word.",
        "input": "'hello world'",
        "output": "function capitalizeSentence(str) {\n    let words = str.split(' ');\n    let res = [];\n  \n    for (let word of words) {\n        res.push(word[0].toUpperCase() + word.slice(1));\n    }\n  \n    return res.join(' ');\n}",
        "abap": "CLASS lcl_capitalize_sentence DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      capitalize_sentence\n        IMPORTING\n          str TYPE string\n        RETURNING\n          VALUE(res) TYPE string.\nENDCLASS.\n\nCLASS lcl_capitalize_sentence IMPLEMENTATION.\n  METHOD capitalize_sentence.\n    DATA: words TYPE STANDARD TABLE OF string,\n          word  LIKE LINE OF words,\n          res   TYPE string.\n\n    SPLIT string INTO TABLE words AT space.\n\n    LOOP AT words ASSIGNING word.\n      MOVE-CORRESPONDING word TO res WITH sy-index = 1.\n      APPEND res TO result.\n    ENDLOOP.\n\n    CONCATENATE LINES OF result INTO res SEPARATED BY space.\n\n    result = res.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Convert the following string to a list of strings.",
        "input": "words = \"How are you doing today\"",
        "output": "words = [\"How\", \"are\", \"you\", \"doing\", \"today\"]",
        "abap": "DATA: lt_words TYPE STANDARD TABLE OF string.\n\nINITIALIZATION.\n  \" Assign values to internal table\n  lt_words = VALUE #( ( 'How' ) ( 'are' ) ( 'you' ) ( 'doing' ) ( 'today' ) ).\n\nCLASS lcl_example DEFINITION.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\nMETHOD on_init.\n    DATA: ls_word TYPE string.\n    LOOP AT lt_words INTO ls_word.\n      WRITE : ls_word, space.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Replace the placeholder with a for loop for iterating over the numbers from 1 to n and printing them.",
        "input": "for i in range(n):\n    # TODO",
        "output": "for i in range(1, n+1):\n    print(i)",
        "abap": "DO.\n  \"loop through numbers from 1 to n\n  DO n TIMES.\n    WRITE: sy-index.\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Create a CSS animation to apply an interesting effect to a given element.",
        "input": "",
        "output": "element {\n  -webkit-animation: myAnimation 2s ease-in forwards;    \n  animation: myAnimation 2s ease-in forwards;\n}\n\n@-webkit-keyframes myAnimation {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}\n@keyframes myAnimation {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}",
        "abap": "REPORT ztest.\n\nTYPES: BEGIN OF ty_style,\n          animation_name TYPE string,\n          duration        TYPE i,\n          ease            TYPE string,\n          direction       TYPE string,\n        END OF ty_style.\n\nDATA: ls_style TYPE ty_style.\n\nls_style-animation_name = 'myAnimation'.\nls_style-duration = 2.\nls_style-ease = 'ease-in'.\nls_style-direction = 'forwards'.\n\nCLASS lcl_style DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      animate\n        IMPORTING\n          iv_element TYPE string\n        EXPORTING\n          ev_animation TYPE ty_style.\nENDCLASS.\n\nCLASS lcl_style IMPLEMENTATION.\n  METHOD animate.\n    DATA: lv_animate TYPE string,\n          lv_scale1  TYPE string,\n          lv_scale2  TYPE string.\n\n    CONCATENATE 'set style = new; style.name = \"' ls_style-animation_name '\"; style.duration = ' ls_style-duration '; style.ease = \"' ls_style-ease '\"; style.direction = \"' ls_style-direction '\";\n        \"element.style.webkitAnimationName = style.name;\n        element.style.animationName = style.name;\" INTO lv_animate.\n    CONCATENATE lv_animate '\n            element.style.webkitTransform = \\'scale(1)\\';\n            element.style.transform = \\'scale(1)\\';'\n          INTO lv_scale1.\n    CONCATENATE lv_scale1 '\n            element.style.webkitAnimationDuration = style.duration + \\'.s\\';\n            element.style.animationDuration = style.duration + \\'.s\\';'\n          INTO lv_scale2.\n    CONCATENATE lv_scale2 '\n            element.style.webkitAnimationFillMode = \\'forwards\\';\n            element.style.animationFillMode = \\'forwards\\';'\n          INTO lv_animate.\n\n    ev_animation-animation_name = ls_style-animation_name.\n  ENDMETHOD.\nENDCLASS.\n\nPARAMETERS: p_element TYPE string.\n\nSTART-OF-SELECTION.\n  DATA: lo_style TYPE REF TO lcl_style,\n        ls_result TYPE ty_style.\n\n  CREATE OBJECT lo_style TYPE lcl_style.\n  lo_style->animate( EXPORTING\n                         iv_element = p_element\n                       IMPORTING\n                         ev_animation = ls_result ).\n\n  WRITE: / 'Animation Name:', ls_result-animation_name.\n"
    },
    {
        "instruction": "Convert the following function to a lambda expression",
        "input": "def power_of_two(x):\n    return x ** 2",
        "output": "power_of_two = lambda x : x ** 2",
        "abap": "REPORT zpower_of_two.\n\nCLASS lcl_power_of_two DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: power_of_two\n      IMPORTING\n        value( p_x ) TYPE i\n      RETURNING\n        VALUE( r_result ) TYPE i.\nENDCLASS.\n\nCLASS lcl_power_of_two IMPLEMENTATION.\n  METHOD power_of_two.\n    DATA: lv_result TYPE i.\n\n    lv_result = p_x ** 2.\n    r_result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_input  TYPE i,\n        lo_power  TYPE REF TO lcl_power_of_two,\n        lv_output TYPE i.\n\n  lv_input = 5.\n  CREATE OBJECT lo_power.\n  CALL METHOD lo_power->power_of_two( EXPORTING p_x = lv_input IMPORTING r_result = lv_output ).\n  WRITE: 'The power of', lv_input, ' is ', lv_output.\n"
    },
    {
        "instruction": "Create a CSS rule to set the body's font size to 12px.",
        "input": "",
        "output": "body {\n font-size: 12px;\n}",
        "abap": "REPORT zdemo.\n\nTYPES: BEGIN OF ty_style,\n         font_size TYPE i,\n       END OF ty_style.\n\nDATA: ls_style TYPE ty_style.\nls_style-font_size = 12.\nCLASS lcl_demo DEFINITION.\nENDCLASS.\n\nCLASS lcl_demo IMPLEMENTATION.\nMETHOD lcl_demo~apply_style\n  IMPORTING\n    VALUE(iv_font_size) TYPE i\n  EXPORTING\n    VALUE(ev_font_size) TYPE i.\n  ev_font_size = iv_font_size.\nENDMETHOD.\n"
    },
    {
        "instruction": "Multiply two vectors of size 5 and return the output.",
        "input": "a = [1, 2, 3, 4, 5] \nb = [5, 4, 3, 2, 1]",
        "output": "[5, 8, 9, 8, 5]",
        "abap": "DATA: it_numbers TYPE STANDARD TABLE OF i.\n\nit_numbers = VALUE #( ( 5 ) ( 8 ) ( 9 ) ( 8 ) ( 5 ) ).\n"
    },
    {
        "instruction": "Debug the code to encounter the issue mentioned in the comment.",
        "input": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True",
        "output": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True",
        "abap": "CLASS lcl_validate_password DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      validate_password IMPORTING\n                            password TYPE string\n                          RETURNING\n                            value(rv_valid) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS lcl_validate_password IMPLEMENTATION.\n  METHOD validate_password.\n    IF length( val = password ) < 8.\n      MESSAGE 'Password must be at least 8 characters.' TYPE 'E'.\n      rv_valid = abap_false.\n    ELSE.\n      rv_valid = abap_true.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Create a new MySQL table to store user data.",
        "input": "Table structure: \nUser_ID, FirstName, LastName, Email",
        "output": "CREATE TABLE User_Data (\nUser_ID INT,\nFirstName VARCHAR (20) NOT NULL,\nLastName VARCHAR (20) NOT NULL,\nEmail VARCHAR (50) NOT NULL,\n PRIMARY KEY (User_ID)\n);",
        "abap": "TYPES: BEGIN OF ty_user_data,\n  user_id    TYPE i,\n  first_name TYPE c LENGTH 20,\n  last_name  TYPE c LENGTH 20,\n  email      TYPE c LENGTH 50,\nEND OF ty_user_data.\n\nDATA: lt_user_data TYPE STANDARD TABLE OF ty_user_data.\n\nCREATE DATA lt_user_data.\n\nINSERT lt_user_data FROM VALUE #( user_id = 1\n                                  first_name = 'John'\n                                  last_name  = 'Doe'\n                                  email      = 'john.doe@example.com' ).\n\n\" Or to create the table in the database:\n\nDATA: ls_line TYPE ty_user_data.\n\nCREATE TABLE user_data LIKE ls_line.\n\nINSERT user_data FROM VALUE #( user_id = 1\n                               first_name = 'John'\n                               last_name  = 'Doe'\n                               email      = 'john.doe@example.com' ).\n"
    },
    {
        "instruction": "Create a Python dictionary with keys \"A\", \"B\", \"C\" and each key value should be the length of corresponding key.",
        "input": "",
        "output": "{\"A\": 1, \"B\": 1, \"C\": 1}",
        "abap": "TYPES: BEGIN OF ty_data,\n          A TYPE i,\n          B TYPE i,\n          C TYPE i.\nTYPES: END OF ty_data.\n\nDATA: ls_data TYPE ty_data.\n\nls_data-A = 1.\nls_data-B = 1.\nls_data-C = 1.\n\nWRITE: / ls_data-a, ls_data-b, ls_data-c.\n"
    },
    {
        "instruction": "Edit the program to print the given date in the format \"dd/mm/yyyy\".",
        "input": "year = 2020\nmonth = 5\nday = 3",
        "output": "# Print date in dd/mm/yyyy format\nprint(\"{:02d}/{:02d}/{:04d}\".format(day, month, year))",
        "abap": "DATA: lv_day TYPE i,\n      lv_month TYPE i,\n      lv_year TYPE i.\n\nlv_day = ... .  \" assign value to day\nlv_month = ... . \" assign value to month\nlv_year = ... .  \" assign value to year\n\nWRITE: / '{0:02d}/{1:02d}/{2:04d}'.format( lv_day, lv_month, lv_year ).\n\n\" or using concatenation operator &&\nDATA: lv_date TYPE string.\nCONCATENATE '{0:02d}' '{1:02d}' '{2:04d}'\n  INTO lv_date\n  SEPARATED BY '/'\n  WITH lv_day lv_month lv_year.\nWRITE: / lv_date.\n\n\" or simply using WRITE statement with formatting\nDATA: lv_formatted_date TYPE string.\nWRITE: / lv_formatted_date = lv_day NO-UNCOUNT RIGHT-JUSTIFIED \n                                 lv_month LEFT-JUSTIFIED \n                                 lv_year LEFT-JUSTIFIED .\n"
    },
    {
        "instruction": "Write a C++ program that prints out the prime numbers up to 100.",
        "input": "",
        "output": "#include <iostream> \nusing namespace std; \n  \nvoid printPrimeNumber(int n) \n{ \n    int flag; \n  \n    for (int i = 2; i <=n; i++) { \n        flag = 0; \n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                flag = 1; \n                break; \n            } \n        } \n        if (flag == 0) \n            cout << i << \" \"; \n    } \n} \n  \nint main() \n{ \n    int n = 100; \n    printPrimeNumber(n); \n    return 0; \n}",
        "abap": "REPORT zprime_numbers.\n\nCLASS lcl_prime_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \" prints all prime numbers up to n\n      \"! @parameter <n> | the upper limit for the search of prime numbers\n      class-method: print_prime_number IMPORTING value(n) TYPE i ).\nENDCLASS.\n\nCLASS lcl_prime_numbers IMPLEMENTATION.\n  METHOD print_prime_number.\n    DATA: lv_flag TYPE abap_bool.\n    \n    DO n TIMES.\n      lv_flag = abap_true.\n\n      DO sy-index - 2 TIMES. \" start from 2\n        IF sy-index MOD sy-ctrl-carr1 = 0.\n          lv_flag = abap_false.\n          EXIT.\n        ENDIF.\n      ENDDO.\n\n      IF lv_flag <> abap_false.\n        WRITE: sy-index, ''.\n      ENDIF.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\n\" call the method to print prime numbers\nSTART-OF-SELECTION.\n  lcl_prime_numbers=>print_prime_number( n = 100 ).\n"
    },
    {
        "instruction": "How can you get the length of a list in Python?",
        "input": "",
        "output": "You can use the built-in function len() to get the length of a list in Python.",
        "abap": "DATA: lt_table TYPE STANDARD TABLE OF i.\n\nlt_table = VALUE #( 1 2 3 4 5 ).\n\nWRITE: / lines( lt_table ). \" outputs: 5\n"
    },
    {
        "instruction": "Suggest the best practice for minimizing the risk of SQL injection attacks.",
        "input": "",
        "output": "The best practice for minimizing the risk of SQL injection attacks is to use parameterized inputs and prepared statements. This enables the database to identify the data as separate values and thus renders SQL injection attacks ineffective. Additionally, input should be validated to ensure only valid data is accepted and to avoid any malicious manipulation of the input.",
        "abap": "REPORT zexample.\n\nCLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      execute_sql_string IMPORTING\n          iv_statement TYPE string\n          iv_input1    TYPE string\n          iv_input2    TYPE string\n      RETURNING\n          VALUE(ro_result) TYPE REF TO data.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD execute_sql_string.\n    \" Use parameterized inputs to prevent SQL injection attacks\n    DATA: lv_statement TYPE string,\n          lo_statement TYPE REF TO cl_sql_statement,\n          lt_parameters TYPE TABLE OF ty_parameter.\n\n    CREATE OBJECT lo_statement\n      EXPORTING\n        iv_statement = |{ iv_statement }|.\n\n    APPEND VALUE #( name = 'p_input1' value = iv_input1 ) TO lt_parameters.\n    APPEND VALUE #( name = 'p_input2' value = iv_input2 ) TO lt_parameters.\n\n    CALL METHOD lo_statement->execute\n      EXPORTING\n        it_parameters   = lt_parameters\n      IMPORTING\n        et_result       = DATA(lt_result).\n\n  ENDMETHOD.\n\nCLASS lcx_sql_error DEFINITION INHERITING FROM cx_static_check.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      if_ex sql_error IMPORTING error_type TYPE i\n                       RETURNING\n                         VALUE(ro_error) TYPE REF TO cx_dynamic_check.\nENDCLASS.\n\nCLASS lcx_sql_error IMPLEMENTATION.\n  METHOD if_ex~sql_error.\n    ro_error = NEW #( ).\n  ENDMETHOD.\nENDCLASS.\n\nINITIALIZATION.\n  TRY.\n      DATA: lo_example TYPE REF TO lcl_example,\n            lo_statement TYPE REF TO cl_sql_statement,\n            lt_result TYPE STANDARD TABLE OF ty_result.\n\n        CREATE OBJECT lo_example.\n\n        \" Create a prepared statement\n        CREATE OBJECT lo_statement\n          EXPORTING\n            iv_statement = 'SELECT * FROM some_table WHERE column1 = :p_input1 AND column2 = :p_input2'.\n\n        DATA: lt_parameters TYPE TABLE OF ty_parameter,\n              lv_result    TYPE ty_result.\n\n        APPEND VALUE #( name = 'p_input1' value = 'some_value_1' ) TO lt_parameters.\n        APPEND VALUE #( name = 'p_input2' value = 'some_value_2' ) TO lt_parameters.\n\n        CALL METHOD lo_statement->execute\n          EXPORTING\n            it_parameters   = lt_parameters\n          IMPORTING\n            et_result       = lt_result.\n\n      CATCH cx_sql_error INTO DATA(lo_xe).\n    ENDTRY.\nEND-OF-PAGE.\n"
    },
    {
        "instruction": "Write a code to delete all items from a list with a value of 3.",
        "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]",
        "output": "mylist = [item for item in mylist if item != 3]",
        "abap": "mylist = [item for item in mylist if item != 3]\n"
    },
    {
        "instruction": "Group a list of dictionaries by a shared key.",
        "input": "mylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}]",
        "output": "from collections import defaultdict\n\ngrouped_dicts = defaultdict(list)\n\nfor x in mylist:\n grouped_dicts[x['name']].append(x)",
        "abap": "DATA: lv_name TYPE string,\n      lt_grouped TYPE STANDARD TABLE OF ty_grouped,\n      BEGIN OF ty_grouped TYPE .\n        name  TYPE string,\n        value TYPE ANY.\n      END OF ty_grouped.\n\nTYPES: tt_grouped TYPE STANDARD TABLE OF ty_grouped.\n\nlt_grouped = VALUE #( ).\n\nLOOP AT mylist INTO DATA(ls_element).\n  lv_name = ls_element-name.\n  APPEND VALUE #( name = lv_name REFERENCE-( ) ) TO lt_grouped.\nENDLOOP.\n\nGROUP IT lt_grouped BY REF to lv_name INTO gt_grouped.\n"
    },
    {
        "instruction": "Write a Java program to find the sum of elements in a 3x3 matrix.",
        "input": "",
        "output": "// Java program to find sum of elements in a matrix \npublic class Matrix \n{ \n\tpublic static void main(String[] args) \n\t{ \n\t\t// Initialize matrix \n\t\tint[][] matrix = {{1, 2, 3}, \n\t\t\t\t\t\t{4, 5, 6}, \n\t\t\t\t\t\t{7, 8, 9}}; \n\n\t\t// Initialize sum \n\t\tint sum = 0; \n\n\t\t// Compute sum of elements \n\t\tfor (int i = 0; i < 3; i++) \n\t\t\tfor (int j = 0; j < 3; j++) \n\t\t\t\tsum = sum + matrix[i][j]; \n\n\t\t// Print Sum \n\t\tSystem.out.println(\"Sum of elements is: \" + sum); \n\t} \n}",
        "abap": "REPORT zmatrix_sum.\n\n\" Define a matrix\nDATA: BEGIN OF ty_matrix TYPE stdnt,\n         value1 TYPE i,\n         value2 TYPE i,\n       END OF ty_matrix,\n     matrix TYPE STANDARD TABLE OF ty_matrix.\n\n\" Initialize matrix\nMATRIX = VALUE #( (\n  ( value1 = 1  value2 = 2 )\n  ( value1 = 4  value2 = 5 )\n  ( value1 = 7  value2 = 8 )\n)\n( (\n  value1 = 3  value2 = 6 )\n  ( value1 = 9 )\n\n).\n\n\" Initialize sum\nDATA: sum TYPE i.\n\n\" Compute sum of elements\nLOOP AT matrix INTO DATA(ls_matrix).\n  sum = sum + ls_matrix-value1 + ls_matrix-value2.\nENDLOOP.\n\n\" Print Sum\nWRITE:/ 'Sum of elements is:', sum.\n"
    },
    {
        "instruction": "Generate a code snippet to sort the given array in ascending order.",
        "input": "let arr = [3, 5, 7, 2, 1]",
        "output": "let arr = [3, 5, 7, 2, 1]\narr.sort(function(a,b){return a-b});\nconsole.log(arr);",
        "abap": "DATA: lt_arr TYPE STANDARD TABLE OF i.\n\nlt_arr = VALUE #( ( 3 ) ( 5 ) ( 7 ) ( 2 ) ( 1 ) ).\n\nSORT lt_arr INCREMENTING DESCENDING.\n\nWRITE: / lt_arr.\n"
    },
    {
        "instruction": "Write a PHP program to find the sum of all elements of an array.",
        "input": "",
        "output": "<?php\n \nfunction sum_array($arr) {\n    $sum = 0;\n    foreach ($arr as $val) {\n        $sum += $val;\n    }\n    return $sum;\n}\n \n$arr = array(5, 10, 25);\necho sum_array($arr); //40\n?>",
        "abap": "CLASS lcl_sum_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_array\n        IMPORTING\n          !iv_arr  TYPE STANDARD TABLE OF i\n        EXPORTING\n          VALUE(rv_result) TYPE i .\nENDCLASS.\n\nCLASS lcl_sum_array IMPLEMENTATION.\n  METHOD sum_array.\n    DATA: lv_sum TYPE i.\n\n    LOOP AT iv_arr INTO DATA(lv_val).\n      lv_sum = lv_sum + lv_val.\n    ENDLOOP.\n\n    rv_result = lv_sum.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_array TYPE STANDARD TABLE OF i,\n      ls_result TYPE i.\n\nlt_array = VALUE #( ( 5 )\n                     ( 10 )\n                     ( 25 ) ).\n\nls_result = lcl_sum_array=>sum_array( it_arr = lt_array ).\nWRITE: / ls_result. \" Outputs: 40\n"
    },
    {
        "instruction": "Create a Python function which takes an array and returns true if the array contains all unique values.",
        "input": "array = [1, 2, 3, 2]",
        "output": "\"\"\"\nCreate a Python function which takes an array and returns \ntrue if the array contains all unique values\n\"\"\"\n\ndef is_unique(arr):\n    seen = set()\n    for x in arr: \n        if x in seen: \n            return False\n        seen.add(x)\n    return True\n    \nif __name__ == '__main__':\n    arr = [1,2,3,2]\n    result = is_unique(arr)\n    print(result)\n    \n# Output\n# False",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_unique IMPORTING it_array TYPE STANDARD TABLE OF i\n                 RETURNING VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\nMETHOD is_unique.\n  DATA: lt_seen TYPE STANDARD TABLE OF i,\n        ls_tmp TYPE i.\n\n  CLEAR: lt_seen, rv_result.\n\n  LOOP AT it_array INTO ls_tmp.\n    READ TABLE lt_seen WITH KEY table_line = ls_tmp TRANSPORTING NO FIELDS.\n    IF sy-subrc <> 0.\n      APPEND ls_tmp TO lt_seen.\n    ELSE.\n      rv_result = abap_false.\n      RETURN.\n    ENDIF.\n  ENDLOOP.\n\n  rv_result = abap_true.\nENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM is_unique CHANGING it_array TYPE STANDARD TABLE OF i = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 2 ) ).\n  IF is_unique( 'it_array' ). \"Call the class method\n    WRITE: / 'The array contains all unique values'.\n  ELSE.\n    WRITE: / 'The array does not contain all unique values'.\n  ENDIF.\n"
    },
    {
        "instruction": "Write a C++ code to find the average of an array of integers.",
        "input": "",
        "output": "#include <iostream>\n\nint calculateAverage(int array[], int n){\n    int sum = 0; \n    for (int i=0; i<n; i++){\n        sum += array[i]; \n    } \n    int average = sum/n;\n    return average;\n}",
        "abap": "FORM calculate_average USING p_array TYPE STANDARD TABLE OF i\n                     CHANGING p_average TYPE f.\n\n  DATA: ls_sum TYPE f.\n  DO.\n    ls_sum = ls_sum + p_array[ sy-index ].\n    IF sy-index >= lines( p_array ).\n      EXIT.\n    ENDIF.\n  ENDDO.\n\n  p_average = ls_sum / lines( p_array ).\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a function in JavaScript that takes an integer n and returns the nth Fibonacci number.",
        "input": "",
        "output": "function Fibonacci(n) { \n  if (n <= 1) return n; \n  return Fibonacci(n-1) + Fibonacci(n-2); \n}",
        "abap": "FORM fibonacci\n  USING\n    p_n TYPE i.\n\n  IF p_n <= 1.\n    RETURN p_n.\n  ELSE.\n    DATA(lv_prev) = fibonacci( p_n - 1 ).\n    DATA(lv_prev2) = fibonacci( p_n - 2 ).\n\n    RETURN lv_prev + lv_prev2.\n  ENDIF.\nENDFORM.\n"
    },
    {
        "instruction": "Write a codde fragment to print out the most frequent element in an array.",
        "input": "arr = [1, 2, 2, 3, 4, 4, 5]",
        "output": "freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2",
        "abap": "DATA: lv_freq TYPE i,\n       lt_arr  TYPE STANDARD TABLE OF i.\n\n\" Convert input array to internal table\nlt_arr = value #( 1, 2, 3, 2, 4 ).\n\n\" Create an internal table to store frequency of each element\nTYPES: BEGIN OF ty_freq,\n         el    TYPE i,\n         freq  TYPE i,\n       END OF ty_freq.\nDATA: lt_freq TYPE STANDARD TABLE OF ty_freq.\n\nLOOP AT lt_arr INTO DATA(lv_element).\n  \" Increment the count for this element in the frequency table\n  READ TABLE lt_freq WITH KEY el = lv_element INTO DATA(ls_freq) BINARY SEARCH.\n  IF sy-subrc <> 0.\n    INSERT VALUE #( el = lv_element freq = 1 ) INTO lt_freq.\n  ELSE.\n    ls_freq-freq = ls_freq-freq + 1.\n    MODIFY TABLE lt_freq FROM ls_freq INDEX sy-tabix.\n  ENDIF.\nENDLOOP.\n\n\" Find the element with the highest frequency\nSORT lt_freq BY freq DESCENDING.\nDATA: lv_max_el TYPE i, lv_max_freq TYPE i.\nREAD TABLE lt_freq INTO DATA(ls_max) INDEX 1.\nlv_max_el = ls_max-el.\nlv_max_freq = ls_max-freq.\n\n\" Output the result\nWRITE: / lv_max_el, lv_max_freq.\n"
    },
    {
        "instruction": "In C++, search a given string for a given sub-string.",
        "input": "string = \"This is a string\"\n    sub_string = \"ing\"",
        "output": "size_t found = string.find(sub_string);\nif (found != string::npos) {\n    // sub-string found\n} else {\n    // sub-string not found\n}",
        "abap": "DATA: lv_found TYPE i.\n\nlv_found = string_expression->find( sub_string ).\nIF lv_found <> 0.\n    \" sub-string found\nELSE.\n    \" sub-string not found\nENDIF.\n"
    },
    {
        "instruction": "Write an algorithm in Python to determine if a number is even or odd.",
        "input": "",
        "output": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False",
        "abap": "FORM is_even USING p_num TYPE i\n          CHANGING result TYPE abap_bool.\n\n  IF p_num MOD 2 = 0.\n    result = 'X'.\n  ELSE.\n    result = ' '.\n  ENDIF.\n\nENDFORM. \"is_even\n"
    },
    {
        "instruction": "Write a code to get the time difference between two date-time objects.",
        "input": "date1: 2019-05-11 21:00:00\ndate2: 2019-05-13 10:00:00",
        "output": "from datetime import datetime\n\ndef time_difference(date1, date2):\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n\n    return (date2_obj - date1_obj).total_seconds() // 3600\n\nprint(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0",
        "abap": "CLASS z_cl_time_diff DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      time_difference IMPORTING\n                         date1 TYPE string\n                         date2 TYPE string\n                       EXPORTING\n                         result TYPE i.\n\nENDCLASS.\n\nCLASS z_cl_time_diff IMPLEMENTATION.\n\nMETHOD time_difference.\n\n  DATA: lv_date1 TYPE dats,\n        lv_date2 TYPE dats.\n\n  TRY.\n      lv_date1 = cl_abap_context_info=>get_system_date( ) - date1.\n      lv_date2 = cl_abap_context_info=>get_system_date( ) - date2.\n    CATCH cx_sy_itab_out_of_bounds INTO DATA(lr_exception).\n      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno\n              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.\n  ENDTRY.\n\n  DATA: lv_diff TYPE i,\n        lv_hours TYPE i.\n\n  lv_diff = lv_date2 - lv_date1.\n  lv_hours = lv_diff / 3600.\n\n  result = lv_hours.\n\nENDMETHOD.\n"
    },
    {
        "instruction": "Identify and explain the Big O runtime complexity of this algorithm.",
        "input": "def find_sum(numbers): \n    total = 0\n    for num in numbers:\n        total += num\n    return total",
        "output": "O(n), where n is the number of elements in the list. This algorithm has linear time complexity, because the amount of operations performed is directly dependent on the number of elements in the list.",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i,\n      lv_sum  TYPE i VALUE 0.\n\n\" Initialize the list with some numbers\nlv_list = value #( 1 2 3 4 5 ).\n\n\" Iterate over the list and calculate the sum\nDO.\n  WHILE lv_index LT lines( lv_list ).\n    ADD lv_list[ lv_index ] TO lv_sum.\n    lv_index = lv_index + 1.\nENDDO.\n\nWRITE: / lv_sum. \" Output: 15\n"
    },
    {
        "instruction": "What does the following code do?",
        "input": "def division(num1, num2):\n    return num1 / num2",
        "output": "The code defines a function called division which takes two numbers as arguments and returns the result of dividing the first number by the second number.",
        "abap": "FUNCTION z_division.\n*\"----------------------------------------------------------------------\n*\"*\"Local Interface:\n*\"  IMPORTING\n*\"     VALUE(I_NUM1) TYPE  I\n*\"     VALUE(I_NUM2) TYPE  I\n*\"  EXPORTING\n*\"     VALUE(E_RESULT) TYPE  F\n*\"----------------------------------------------------------------------\n\n  IF i_num2 = 0.\n    MESSAGE 'Cannot divide by zero!' TYPE 'E'.\n  ENDIF.\n\n  e_result = i_num1 / i_num2.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Create a program that ciphers a given text using the caesar cipher.",
        "input": "text = \"This is a secret message\"\nkey = 3",
        "output": "def caesar_cipher(text, key):\n    \"\"\"Cipher a given text using the Caesar Cipher.\"\"\"\n    ciphertext = \"\"\n    for char in text: \n        if not char.isalpha():\n            ciphertext += char\n            continue\n        offset = ord('a') if char.islower() else ord('A')\n        new_char = (ord(char) - offset + key) % 26\n        ciphertext += chr(offset + new_char)\n    return ciphertext",
        "abap": "CLASS lcl_caesar_cipher DEFINITION.\nPUBLIC SECTION.\n\n  METHODS:\n    caesar_cipher\n      IMPORTING\n        VALUE(iv_text) TYPE string\n        VALUE(iv_key)   TYPE i\n      RETURNING\n        VALUE(rv_ciphertext) TYPE string.\n\nCLASS lcl_caesar_cipher IMPLEMENTATION.\nMETHOD caesar_cipher.\n  DATA: lv_offset TYPE i,\n        lv_new_char TYPE c,\n        lt_result TYPE TABLE OF string.\n\n  DO strlen( iv_text ) TIMES.\n    READ TEXT INTO DATA(lv_char) INDEX sy-index FROM iv_text .\n    \n    IF NOT lv_char IS INITIAL AND ( lv_char CA 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' OR lv_char CA 'abcdefghijklmnopqrstuvwxyz' ).\n      DATA: lr_offset TYPE REF TO data,\n            ls_result TYPE string.\n\n      IF lv_char CS 'a'.\n        lr_offset = VALUE #( 'abcdefghijklmnopqrstuvwxyz' ).\n      ELSE.\n        lr_offset = VALUE #( 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ).\n      ENDIF.\n\n      DO 26 TIMES.\n        READ TEXT INTO ls_result INDEX sy-index FROM lr_offset .\n        IF ls_result CA lv_char.\n          DATA: lv_key TYPE i,\n                lv_result TYPE string.\n\n          \" Shift the character by the key\n          lv_key = iv_key MOD 26.\n          lv_result = ls_result + lv_key(1).\n\n          \" Adjust for wrap around\n          DO 26 TIMES.\n            IF ls_result CA lv_char.\n              lv_new_char = ls_result + lv_key(1).\n              EXIT.\n            ENDIF.\n            ls_result = ls_result + 1(1).\n          ENDDO.\n\n          APPEND lv_new_char TO lt_result.\n        ELSE.\n          APPEND lv_char TO lt_result.\n        ENDIF.\n      ENDDO.\n\n    ELSE.\n      \" If the character is not a letter, just add it to the result as is\n      APPEND lv_char TO lt_result.\n    ENDIF.\n\n  ENDDO.\n\n  rv_ciphertext = REDUCE string( INIT '' FROM TABLE lt_result ).\n\nENDMETHOD.\n"
    },
    {
        "instruction": "Split the following string at the comma.",
        "input": "my_str = \"Hello,World\"",
        "output": "my_str_split = my_str.split(\",\")",
        "abap": "DATA: lt_str TYPE TABLE OF string.\nSPLIT my_str AT ',' INTO TABLE lt_str.\n"
    },
    {
        "instruction": "Explain the following CSS rule.",
        "input": "p {\n  font-size: 20px;\n  font-weight: bold;\n}",
        "output": "The CSS rule will assign a font size of 20px and a font weight of bold to all paragraph elements. It will make the text in any \"p\" element display in a bold font with a font size of 20px.",
        "abap": "DATA: lv_font_size TYPE i VALUE '20'.\nDATA: lv_font_weight TYPE string.\n\nTRY.\n    SET PFLOATROLLING OFF.\n    CALL FUNCTION 'DISPLAY_SET_FONT'\n      EXPORTING\n        font_name     = 'Arial' \" Default Font Name, you can change to any other font if required\n        font_size_unit = 2           \" 2 for Pixel, 3 for Point, 4 for Inch\n        point_size     = lv_font_size\n        font_weight    = lv_font_weight\n      IMPORTING\n        font_weight   = DATA(lv_font_weight)\n      EXCEPTIONS\n        OTHERS        = 1.\nENDTRY.\n\nDATA: lo_clnt TYPE REF TO cl_gui_char_field.\nCREATE OBJECT lo_clnt.\n\nCALL METHOD lo_clnt->set_text\n  EXPORTING\n    text     = 'This is a paragraph of bold font with size 20px' \" you can change this to any other text if required\n\nCALL METHOD lo_clnt->set_font\n  EXPORTING\n    point_size     = lv_font_size\n    font_weight    = lv_font_weight\n  EXCEPTIONS\n    OTHERS         = 1.\n\nCALL METHOD lo_clnt->display.\n"
    },
    {
        "instruction": "You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.",
        "input": "['international', 'imagination', 'skyscraper']",
        "output": "def split_words(string_list):\n    new_list = []\n    for string in string_list:\n        mid = int(len(string)/2) \n        new_list.append( (string[:mid], string[mid:]) )\n    return new_list",
        "abap": "FORM split_words\n  USING\n    p_string_table TYPE STANDARD TABLE OF string.\n\n  TYPES: BEGIN OF ty_split_result,\n           first_part TYPE string,\n           second_part TYPE string.\n  TYPES: END OF ty_split_result.\n\n  DATA: lt_result TYPE TABLE OF ty_split_result.\n\n  LOOP AT p_string_table INTO DATA lv_string.\n    DATA lv_mid TYPE i = ( strlen( lv_string ) / 2 ).\n    APPEND VALUE #( first_part = lv_string+0(lv_mid) second_part = lv_string+lv_mid ) TO lt_result.\n  ENDLOOP.\n\n  SORT lt_result BY first_part.\n\n  \" Optional: return the sorted table\n  MOVE-CORRESPONDING lt_result TO p_string_table.\n"
    },
    {
        "instruction": "Write a Python function to replace all the occurrences of a given substring with another.",
        "input": "string = \"Hello World\"\nsubstring = \"World\"\nreplacement = \"Universe\"",
        "output": "def replace_substring(string, substring, replacement):\n return string.replace(substring, replacement)",
        "abap": "CLASS lcl_string_tools DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      replace_substring\n        IMPORTING\n          iv_string     TYPE string\n          iv_substring  TYPE string\n          iv_replacement TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string .\nENDCLASS.\n\nCLASS lcl_string_tools IMPLEMENTATION.\n  METHOD replace_substring.\n    rv_result = REPLACE ALL OCCURRENCES OF iv_substring IN iv_string WITH iv_replacement.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_string TYPE string,\n      lv_substring TYPE string,\n      lv_replacement TYPE string,\n      lv_result TYPE string.\n\nlv_string = 'Hello, world!'.\nlv_substring = ', '.\nlv_replacement = '-'.\n\nrv_result = lcl_string_tools=>replace_substring(\n  iv_string     = lv_string\n  iv_substring  = lv_substring\n  iv_replacement = lv_replacement ).\n\nWRITE: / rv_result. \" Output: Hello- world!\n"
    },
    {
        "instruction": "Rewrite the given code block to make the loops more efficient",
        "input": "let x = 0;\nlet y = 0;\nfor (let i = 0; i < 10; i++) {\n y = y + i;\n for (let j = 0; j < 10; j++) {\n  x = x + j;\n }\n}",
        "output": "let x = 0;\nlet y = 0;\nfor (let i = 0; i < 10; i++) {\n y += i;\n x += (10 * i);\n}",
        "abap": "DATA: lv_x TYPE i VALUE 0,\n      lv_y TYPE i VALUE 0.\n\nDO 10 TIMES.\n  lv_y = lv_y + sy-index.\n  lv_x = lv_x + ( sy-index * 10 ).\nENDDO.\n"
    },
    {
        "instruction": "Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.",
        "input": "test_list = [4, 6, 8, 10, 3, 1, 9]",
        "output": "def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\n\ngreatest_difference(test_list)",
        "abap": "REPORT z_greatest_difference.\n\nCLASS lcl_greatest_difference DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      greatest_difference\n        IMPORTING\n          iv_numbers TYPE STANDARD TABLE OF f\n        RETURNING\n          VALUE(rv_max_diff) TYPE f.\nENDCLASS.\n\nCLASS lcl_greatest_difference IMPLEMENTATION.\n  METHOD greatest_difference.\n    DATA: lv_max_diff TYPE f,\n          ls_num TYPE i.\n\n    lv_max_diff = 0.\n    LOOP AT itab INTO ls_num.\n      LOOP AT itab INTO DATA(ls_num2).\n        IF ls_num <> ls_num2.\n          DATA(lv_diff) = abs( ls_num - ls_num2 ).\n          IF lv_diff > lv_max_diff.\n            lv_max_diff = lv_diff.\n          ENDIF.\n        ENDIF.\n      ENDLOOP.\n    ENDLOOP.\n\n    rv_max_diff = lv_max_diff.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: test_list TYPE STANDARD TABLE OF f VALUE (\n  (10)\n  (20)\n  (30)\n).\n\nDATA: result TYPE f.\n\nresult = lcl_greatest_difference=>greatest_difference( test_list ).\nWRITE: 'Maximum difference:', result.\n"
    },
    {
        "instruction": "Write a Python program to find out the common items from two given arrays.",
        "input": "arr1 = [1, 2, 3, 5, 7 ]\narr2 = [2, 3, 5, 6, 7]",
        "output": "common_items = []\n\nfor item in arr1:\n  if item in arr2:\n    common_items.append(item)\n\nprint(common_items)  # Output: [2, 3, 5, 7]",
        "abap": "DATA: lv_common_items TYPE ty_line OCCURS 0.\n\nTYPES: BEGIN OF ty_line,\n          value(4),\n        END OF ty_line.\ntypes: ty_table TYPE STANDARD TABLE OF ty_line.\n\nDATA: arr1 TYPE ty_table,\n      arr2 TYPE ty_table.\n\narr1 = VALUE #( ( 1 )\n                ( 2 )\n                ( 3 )\n                ( 5 )\n                ( 6 ) ).\narr2 = VALUE #( ( 2 )\n                ( 3 )\n                ( 4 )\n                ( 7 )\n                ( 8 ) ).\n\nLOOP AT arr1 INTO DATA(lv_item).\n  IF line_exists( arr2 MATCHING CORRESPONDING key lv_item ).\n    APPEND lv_item TO common_items.\n  ENDIF.\nENDLOOP.\n\nWRITE: / sy-ucomm.\n"
    },
    {
        "instruction": "Create a list comprehension to generate a list of multiples of 3 from 0 to 23.",
        "input": "",
        "output": "list_of_multiples_of_3 = [x*3 for x in range(8)]",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i.\nLOOP AT RANGE 8 INTO DATA(lv_counter).\n  APPEND val = lv_counter * 3 TO lv_list.\nENDLOOP.\n\nWRITE: / lv_list.\n"
    },
    {
        "instruction": "Write a function to return the index of an item in an array.",
        "input": "arr = [1, 2, 3, 4, 5]\nx = 4",
        "output": "def index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1",
        "abap": "FORM get_index\n  IMPORTING\n    it_arr TYPE STANDARD TABLE OF any.\n  EXPORTING\n    iv_index TYPE i.\n\n  DATA: lv_idx TYPE i.\n\n  DO.\n    IF sy-index > lines( it_arr ).\n      CLEAR iv_index.\n      EXIT.\n    ENDIF.\n\n    IF it_arr[ sy-index ] = x.\n      iv_index = sy-index.\n      EXIT.\n    ENDIF.\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create a function to check if an item is in a list",
        "input": "",
        "output": "def check_list_contains(item_list, item):\n    \"\"\"This function checks if an item is in a list\"\"\"\n    return item in item_list",
        "abap": "CLASS z_check_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_list_contains\n        IMPORTING\n          it_item_list TYPE STANDARD TABLE OF any\n          iv_item TYPE any\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS z_check_list IMPLEMENTATION.\n  METHOD check_list_contains.\n    rv_result = line_exists( it_item_list MATCHING <value> iv_item ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a CSS script that centers the login form on the webpage.",
        "input": "",
        "output": ".login-form {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}",
        "abap": "DATA: ls_layout TYPE lvc_s_layo.\n\nls_layout-row = 0.\nls_layout-col = 0.\nls_layout-row_pos = 'absolute'.\nls_layout-visibility = 'VISIBLE'.\n\nCALL FUNCTION 'REUSE_WINDOW_CREATE'\n  EXPORTING\n    layout        = ls_layout\n    xoff           = -50\n    yoff           = -50\n    window_size_x  = 1\n    window_size_y  = 1.\n\nDATA: lv_window_name TYPE WINDOW_NAME.\nDATA: lv_screen_id   TYPE sy-dbcnum.\n\nCALL FUNCTION 'REUSE_WINDOW_OPEN'\n  EXPORTING\n    window_name        = lv_window_name\n    xoff               = -50\n    yoff               = -50.\n\nlv_screen_id = cl_gui_alid_container=>screen_id_create( ).\n\ncl_gui_control_utility=>gui_control_utility\n  -> set_pos(\n     iv_x1      = -500\n     iv_y1      = -500\n     iv_x2      = 500\n     iv_y2      = 500\n    chaining   = lv_screen_id ).\n"
    },
    {
        "instruction": "Write a Java program to generate random numbers",
        "input": "",
        "output": "import java.util.Random; \n  \npublic class GenerateRandom { \n  \n    public static void main(String[] args) \n    { \n  \n        Random rand = new Random(); \n  \n        // Generate random integers in range 0 to 999 \n        int x = rand.nextInt(1000); \n        System.out.println(\"Random Integers: \" + x); \n  \n        // Generate Random doubles \n        double y = rand.nextDouble(); \n        System.out.println(\"Random Doubles: \" + y); \n  \n        // Generate Random Boolean \n        boolean z = rand.nextBoolean(); \n        System.out.println(\"Random Boolean: \" + z); \n    } \n}",
        "abap": "REPORT zgenerate_random.\n\nCLASS lcl_generate_random DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! <b>Generate a random integer</b>\n      \"! @param <i>p_min </i> minimum value (inclusive)\n      \"! @param <i>p_max </i> maximum value (inclusive)\n      \"! @return <i>Random integer between p_min and p_max</i>\n      METHOD generate_random_int\n        IMPORTING\n          VALUE(p_min) TYPE i\n          VALUE(p_max) TYPE i\n        RETURNING\n          VALUE(rv_result) TYPE i.\n  ENDCLASS.\n\nCLASS lcl_generate_random IMPLEMENTATION.\n  METHOD generate_random_int.\n    rv_result = p_min + ( p_max - p_min ) * RAND_INT( ).\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_generate_random DEFINITION INHERITING FROM cl_abap_random DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! <b>Generate a random double between 0 and 1</b>\n      \"! @return <i>Random double between 0 and 1</i>\n      METHOD generate_random_double\n        IMPORTING\n          VALUE(p_min) TYPE f\n          VALUE(p_max) TYPE f\n        RETURNING\n          VALUE(rv_result) TYPE f.\n  ENDCLASS.\n\nCLASS lcl_generate_random IMPLEMENTATION INHERITING FROM cl_abap_random IMPLEMENTATION.\n  METHOD generate_random_double.\n    rv_result = p_min + ( p_max - p_min ) * RAND( ).\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_generate_random DEFINITION INHERITING FROM cl_abap_random DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! <b>Generate a random boolean</b>\n      \"! @return <i>Random boolean (true or false)</i>\n      METHOD generate_random_bool\n        IMPORTING\n          VALUE(p_min) TYPE c\n          VALUE(p_max) TYPE c\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\n  ENDCLASS.\n\nCLASS lcl_generate_random IMPLEMENTATION INHERITING FROM cl_abap_random IMPLEMENTATION.\n  METHOD generate_random_bool.\n    rv_result = p_min EQ p_max.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_random TYPE REF TO lcl_generate_random.\n\nSTART-OF-SELECTION.\n  CREATE OBJECT lo_random.\n\n  DATA: lv_int TYPE i,\n        lv_double TYPE f,\n        lv_bool TYPE abap_bool.\n\n  \" Generate random integers in range 0 to 999\n  lv_int = lo_random->generate_random_int( 0, 1000 ).\n  WRITE: / 'Random Integers:', lv_int.\n\n  \" Generate Random doubles \n  lv_double = lo_random->generate_random_double( 0, 1 ).\n  WRITE: / 'Random Doubles:', lv_double.\n\n  \" Generate Random Boolean \n  lv_bool = lo_random->generate_random_bool( abap_true, abap_false ).\n  WRITE: / 'Random Boolean:', lv_bool.\n"
    },
    {
        "instruction": "Create a class in Ruby that prints a message when instantiated.",
        "input": "",
        "output": "class MyClass\n  def initialize\n    puts \"Welcome to MyClass!\"\n  end\nend",
        "abap": "CLASS zcl_my_class DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      constructor IMPORTING !iv_message TYPE string.\nENDCLASS.\n\nCLASS zcl_my_class IMPLEMENTATION.\n  METHOD constructor.\n    WRITE: / 'Welcome to MyClass!'.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Build a flask server to handle a GET request to the route '/test'.",
        "input": "",
        "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET'])\ndef test():\n    return \"This is a test\"\n\nif __name__ == '__main__':\n    app.run()",
        "abap": "REPORT zflask_test.\n\nCLASS lcl_app DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_http_server_apicontroller.\nENDCLASS.\n\nCLASS lcl_app IMPLEMENTATION.\n  METHOD if_http_server_apicontroller~http_get.\n    DATA: lr_response TYPE REF TO cl_shttp_context.\n\n    lr_response = super->http_get( ).\n\n    \" Simulate a response with the content 'This is a test'\n    lr_response->set_status_line( '200 OK' ).\n    lr_response->set_header_field(\n      name = 'Content-Type'\n      value = 'text/plain; charset=\"utf-8\"'\n    ).\n    lr_response->send_coded_html(\n      '<html><body>This is a test</body></html>'.\n    ).\n\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_app TYPE REF TO lcl_app.\n\n  CREATE OBJECT lo_app\n    EXPORTING\n      name = 'MY_APP'.\n\n  lo_app->if_http_server_apicontroller~handle_request(\n    request  = 'GET'\n    response = '/test' ).\n\nCLASS lcl_app DEFINITION DEFERRED.\n"
    },
    {
        "instruction": "Write SQL code to find the names of students who are enrolled in all three classes.",
        "input": "Table name: students\nColumns: student_id, name, class1, class2, class3",
        "output": "SELECT name\nFROM students\nWHERE class1 = 1 AND class2 = 1 AND class3 = 1;",
        "abap": "DATA: lv_name TYPE string.\n\nSELECT name INTO lv_name\nFROM zstudents  \" replace 'zstudents' with your actual table name\nWHERE class1 = 1\nAND class2 = 1\nAND class3 = 1.\n"
    },
    {
        "instruction": "Filter the provided array by returning only even numbers.",
        "input": "numbers = [1, 2, 3, 4, 5]",
        "output": "numbers = [2, 4]",
        "abap": "DATA: lv_numbers TYPE STANDARD TABLE OF i.\n\nAPPEND 2 TO lv_numbers.\nAPPEND 4 TO lv_numbers.\n"
    },
    {
        "instruction": "Given the following object, write a function in JavaScript to count the occurrences of each character in the object's values.",
        "input": "obj = {\n \"name\": \"John Doe\"\n}",
        "output": "function countOccurences(obj) {\n    let result = {};\n    for (let value of Object.values(obj)) {\n        for (let char of value) {\n            result[char] = result[char] + 1 || 1;\n        }\n    }\n    return result; \n}",
        "abap": "CLASS lcl_count_occurrences DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      count_occurrences IMPORTING\n                             value TYPE any\n       RETURNING\n         VALUE(result) TYPE ty_result \".\nENDCLASS.\n\nCLASS lcl_count_occurrences IMPLEMENTATION.\n  METHOD count_occurrences.\n    DATA: lv_value TYPE string,\n          lt_chars TYPE STANDARD TABLE OF char1,\n          ls_result TYPE LINE OF ty_result.\n\n    \" Convert input to string and remove special characters\n    lv_value = value->*.\n\n    \" Remove special characters from the string\n    TRANSLATE lv_value TO UPPER CASE.\n    lv_value = lv_value WITHOUT '()\".\n\n    \" Split string into individual characters\n    SPLIT lv_value AT '' INTO TABLE lt_chars.\n\n    \" Count occurrences of each character\n    LOOP AT lt_chars INTO ls_result-internal_value.\n      MOVE-CORRESPONDING ls_result TO result-internal_value.\n      ADD 1 TO result-occurences.\n    ENDLOOP.\n\n    result = VALUE #( ( internal_value = lv_value occurences = lines( lt_chars ) ) ).\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: ty_result TYPE STANDARD TABLE OF LINE OF (\n  internaL_VALUE TYPE string\n  occURENCES TYPE i ).\n\nDATA: lr_result TYPE lcl_count_occurrences=>ty_result.\n\nCREATE OBJECT 'lr_result' IMPORTING value = \"your_object\".\n\nCALL METHOD lcl_count_occurrences=>count_occurrences EXPORTING value = lr_result CHANGING result = lr_result.\nWRITE : / lr_result.\n"
    },
    {
        "instruction": "Write a function to check if a given binary tree is a valid binary search tree",
        "input": "",
        "output": "def isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True",
        "abap": "CLASS lcl_is_valid_bst DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      isValidBST IMPORTING\n          VALUE( rooT ) TYPE REF TO data\n        RETURNING\n          VALUE( result ) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS lcl_is_valid_bst IMPLEMENTATION.\n  METHOD isValidBST.\n    DATA: lr_root TYPE REF TO data,\n          lv_left  TYPE REF TO data,\n          lv_right TYPE REF TO data.\n\n    \" Check empty tree  \n    IF rooT IS INITIAL.\n      result = abap_true.\n      RETURN.\n    ENDIF.\n\n    \" Check left subtree recursively  \n    IF NOT isValidBST( rooT->left ) = abap_true.\n      result = abap_false.\n      RETURN.\n    ENDIF.\n\n    \" if left is not None then check it has \n    \" correct data or not i.e. left node's data \n    \" should be less than root's data \n    IF rooT->left IS BOUND AND rooT->data < rooT->left->data.\n      result = abap_false.\n      RETURN.\n    ENDIF.\n\n    \" Check right subtree recursively  \n    IF NOT isValidBST( rooT->right ) = abap_true.\n      result = abap_false.\n      RETURN.\n    ENDIF.\n\n    \" if right is not None then check it has \n    \" correct data or not i.e. right node's data \n    \" should be greater than root's data \n    IF rooT->right IS BOUND AND rooT->data > rooT->right->data.\n      result = abap_false.\n      RETURN.\n    ENDIF.\n\n    \" If all conditions satisfied  \n    \" then return True  \n    result = abap_true.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "How can we encrypt a string in Python?",
        "input": "",
        "output": "We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.",
        "abap": "CLASS lcl_encrypt DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      encrypt\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_encrypted TYPE string\n        RAISING\n          cx_cryptographically_secure,\n      decrypt\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_decrypted TYPE string\n        RAISING\n          cx_cryptographically_secure.\nENDCLASS.\n\nCLASS lcl_encrypt IMPLEMENTATION.\n  METHOD encrypt BY DATABASE FUNCTION sy-dbc\n    LANGUAGE sqlscript SQL strict\n  BEGIN\n    DECLARE base64_base64_encode BLOB;\n    DECLARE encrypted_string VAR CHAR(256);\n    DECLARE iv_string VAR CHAR(256) := 'some_secret_key_123';\n    DECLARE iv_string_bytes VAR BLOB;\n\n    SELECT io_string INTO lv_string FROM db2table WITH ur ;\n    encrypt = encryptstring(lv_string, iv_string, encrypted_string);\n\n  ENDMETHOD.\n\n  METHOD decrypt BY DATABASE FUNCTION sy-dbc\n    LANGUAGE sqlscript SQL strict\n  BEGIN\n    DECLARE base64_base64_encode BLOB;\n    DECLARE decrypted_string VAR CHAR(256);\n    DECLARE iv_string VAR CHAR(256) := 'some_secret_key_123';\n    DECLARE encrypted_string VAR CHAR(256);\n\n    SELECT io_string INTO lv_string FROM db2table WITH ur ;\n    decrypt = decryptstring(lv_string, iv_string, decrypted_string);\n\n  ENDMETHOD.\n\nCLASS lcl_base64 DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      encode\n        IMPORTING\n          iv_bytes TYPE x LENGTH type_x\n        EXPORTING\n          ev_encoded TYPE string,\n      decode\n        IMPORTING\n          iv_bytes TYPE string\n        EXPORTING\n          ev_decoded TYPE x LENGTH type_x,\n      encrypt_string\n        IMPORTING\n          iv_string  TYPE string\n          iv_key     TYPE string\n        EXPORTING\n          ev_encrypted TYPE string,\n      decryptstring\n        IMPORTING\n          iv_string   TYPE string\n          iv_key      TYPE string\n        EXPORTING\n          ev_decrypted TYPE string.\nENDCLASS.\n\nCLASS lcl_base64 IMPLEMENTATION.\n  METHOD encode BY DATABASE FUNCTION sy-dbc\n    LANGUAGE sqlscript SQL strict\n  BEGIN\n    DECLARE encoded VAR CHAR(256);\n\n    encoded = base64_encode(iv_bytes);\n  ENDMETHOD.\n\n  METHOD decode BY DATABASE FUNCTION sy-dbc\n    LANGUAGE sqlscript SQL strict\n  BEGIN\n    DECLARE decoded VAR BLOB;\n\n    decoded = base64_decode(iv_bytes);\n  ENDMETHOD.\n\n  METHOD encrypt_string BY DATABASE FUNCTION sy-dbc\n    LANGUAGE sqlscript SQL strict\n  BEGIN\n    DECLARE encrypted VAR BLOB;\n    DECLARE key VAR CHAR(256) := iv_key;\n    DECLARE key_bytes VAR BLOB;\n    SELECT io_string INTO lv_string FROM db2table WITH ur ;\n    SELECT crypt_encrypt(lv_string, key) INTO encrypted;\n    ev_encrypted = base64_encode(encrypted);\n  ENDMETHOD.\n\n  METHOD decryptstring BY DATABASE FUNCTION sy-dbc\n    LANGUAGE sqlscript SQL strict\n  BEGIN\n    DECLARE decrypted VAR BLOB;\n    DECLARE key VAR CHAR(256) := iv_key;\n    SELECT io_string INTO lv_string FROM db2table WITH ur ;\n    SELECT crypt_decrypt(base64_decode(lv_string), key) INTO decrypted;\n    ev_decrypted = base64_encode(decrypted);\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.",
        "input": "lst = [2, 8, 9, 5, 3, 10]",
        "output": "def sum_square_even(lst):\n    result = 0\n    for num in lst:\n        if (num % 2 == 0):\n            result += num ** 2\n    return result\n\nprint(sum_square_even(lst))",
        "abap": "CLASS lcl_sum_square_even DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_square_even\n        IMPORTING\n          VALUE(iv_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_square_even IMPLEMENTATION.\n  METHOD sum_square_even.\n    DATA: ls_num TYPE i,\n          lv_result TYPE i.\n\n    DO.\n      READ TABLE iv_list INTO ls_num INDEX sy-index.\n      IF sy-subrc <> 0.\n        EXIT.\n      ENDIF.\n      IF ls_num MOD 2 = 0.\n        lv_result += ls_num * ls_num.\n      ENDIF.\n    ENDDO.\n    rv_result = lv_result.\n  ENDMETHOD.\n\nCLASS lcl_sum_square_even1 DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_square_even\n        IMPORTING\n          VALUE(iv_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_square_even1 IMPLEMENTATION.\n  METHOD sum_square_even.\n    DATA: lv_result TYPE i,\n          ls_num TYPE i.\n\n    LOOP AT iv_list INTO ls_num.\n      IF ls_num MOD 2 = 0.\n        lv_result += ls_num * ls_num.\n      ENDIF.\n    ENDLOOP.\n    rv_result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_sum_square_even2 DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_square_even\n        IMPORTING\n          VALUE(iv_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_square_even2 IMPLEMENTATION.\n  METHOD sum_square_even.\n    DATA: lv_result TYPE i,\n          ls_num TYPE i.\n\n    lv_result = REDUCE:\n      INIT result = 0\n      FOR num IN iv_list WHEN ( num MOD 2 = 0 ) INTO VALUE #( val1 = num * num ).\n        INTO result.\n    ENDINIT.\n    rv_result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_numbers TYPE STANDARD TABLE OF i,\n        ls_number TYPE i,\n        rv_result TYPE i.\n\n  \" Define a table of numbers\n  DO 10 TIMES.\n    APPEND -5 + sy-index TO lt_numbers.\n  ENDDO.\n\n  \" Call the method from class lcl_sum_square_even1\n  CALL METHOD cl_abap_context_info=>get_instance( )\n    IMPORTING\n      ev_class_name = 'LCL_SUM_SQUARE_EVEN1'\n    EXPORTING\n      iv_method_name = 'SUM_SQUARE_EVEN'.\n\n  DATA: lr_obj TYPE REF TO object.\n  CREATE OBJECT lr_obj TYPE ( cl_abap_context_info=>get_instance( )-class ).\n  CALL METHOD lr_obj->sum_square_even(\n    IMPORTING\n      iv_list          = lt_numbers\n    EXPORTING\n      rv_result        = lv_result ).\n\n  WRITE:/ 'Result:', lv_result.\n\n\" or you can call the method from class lcl_sum_square_even2 using reduce\n  DATA: lv_result TYPE i,\n        ls_num TYPE i.\n  lv_result = REDUCE:\n    INIT result = 0\n    FOR num IN lt_numbers WHEN ( num MOD 2 = 0 ) INTO VALUE #( val1 = num * num ).\n      INTO result.\n  ENDINIT.\n\n  WRITE:/ 'Result:', lv_result.\n"
    },
    {
        "instruction": "Edit a python function to generate the fibonacci sequence.",
        "input": "def fibonacci(n):\n    a = 1\n    b = 0\n    for i in range(n):\n        print(a)\n        a, b = b, a+b",
        "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b",
        "abap": "CLASS zcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fibonacci\n        IMPORTING\n          value1     TYPE i \" The position in the Fibonacci sequence \"\n        EXPORTING\n          it_fib_num  TYPE STANDARD TABLE OF i \" Table of Fibonacci numbers up to n \".\nENDCLASS.\n\nCLASS zcl_fibonacci IMPLEMENTATION.\n  METHOD fibonacci.\n    DATA: a TYPE i,\n          b TYPE i,\n          table TYPE STANDARD TABLE OF i,\n          i TYPE i.\n\n    a = 0.\n    b = 1.\n    APPEND a TO it_fib_num. \" Append the first Fibonacci number to the output table\n    APPEND b TO it_fib_num. \" Append the second Fibonacci number to the output table\n\n    DO value1 - 2 TIMES.\n      i = b + a.\n      APPEND i TO it_fib_num. \" Append each subsequent Fibonacci number to the output table\n      a = b.\n      b = i.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Construct a regular expression to check if a string begins with a given substring.",
        "input": "",
        "output": "//String begins with substring\nvar regex = /^substring/;\n\nif (input_str.match(regex)) {\n  console.log('The string begins with the substring.');\n}",
        "abap": "DATA: lv_input TYPE string.\n\nlv_input = 'your_string_here'. \" assign your input string here\n\nDATA: lr_pattern TYPE i.\nlr_pattern = CONV #( value '^substring' ).\n\nIF pat_exists( p_type  = cl_abap_char_utilities=>pattern_beginning\n                  p_value = lr_pattern )\n          AND pat_matches( subject     = lv_input\n                            pattern      = lr_pattern\n                            position_only = abap_true ).\n    WRITE: / 'The string begins with the substring.'.\nENDIF.\n"
    },
    {
        "instruction": "Create a loop to print hello world 5 times.",
        "input": "",
        "output": "for (int i = 0; i < 5; i++){ \n  System.out.println(\"Hello World!\"); \n}",
        "abap": "DO.\n  LOOP AT sy-index INTO sy-tcline.\n    WRITE: / 'Hello World!'.\n    IF sy-tcline > 5.\n      EXIT.\n    ENDIF.\nENDLOOP.\n"
    },
    {
        "instruction": "Design a webpage with a given template.",
        "input": "Template: Pink and Purple with three-column layout",
        "output": "<html>\n<head>\n  <title>Pink and Purple Layout</title>\n  <style>\n    body {\n      background-color: pink;\n    }\n    #container {\n      display: flex;\n    }\n    #container > div {\n      flex: 1;\n      background-color: purple;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</body>\n</html>",
        "abap": "REPORT zpink_purple_layout.\n\nTYPES: BEGIN OF ty_container,\n         div1 TYPE string,\n         div2 TYPE string,\n         div3 TYPE string,\n       END OF ty_container.\nDATA: ls_container LIKE TYPE ty_container.\nls_container-div1 = 'Div 1'.\nls_container-div2 = 'Div 2'.\nls_container-div3 = 'Div 3'.\n\nTYPES: BEGIN OF ty_div_style,\n         background_color TYPE string,\n       END OF ty_div_style.\nDATA: lt_div_styles TYPE STANDARD TABLE OF ty_div_style.\n\nlt_div_styles-APPENDING VALUE #( background_color = 'purple' ).\nlt_div_styles-APPENDING VALUE #( background_color = 'purple' ).\n\nCLASS lcl_layout DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_layout\n        IMPORTING\n          iv_container_id TYPE string\n        EXPORTING\n          er_container     TYPE REF TO data\n        RAISING\n          cx_static_check .\nENDCLASS.\n\nCLASS lcl_layout IMPLEMENTATION.\n  METHOD create_layout.\n    DATA: lr_container TYPE REF TO data.\n\n    CREATE OBJECT lr_container TYPE REF TO cl_abap_objectdescr.\n    lr_container->create(\n      EXPORTING\n        iv_name   = 'ls_' && iv_container_id\n      IMPORTING\n        er_obj    = er_container ).\n\n    CALL METHOD lcl_layout=>set_div_styles( CHANGING ct_div_styles = lt_div_styles ).\n\n  ENDMETHOD.\n\n  CLASS-METHODS:\n    set_div_styles\n      CHANGING\n        ct_div_styles TYPE STANDARD TABLE OF ty_div_style ).\n\nENDCLASS.\n\nCLASS lcl_css DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_css\n        IMPORTING\n          iv_background_color TYPE string\n        EXPORTING\n          ev_css               TYPE string\n        RAISING\n          cx_static_check .\nENDCLASS.\n\nCLASS lcl_css IMPLEMENTATION.\n  METHOD create_css.\n    DATA: lv_css TYPE string.\n\n    lv_css = 'body { background-color: pink; }'.\n    DO 2 TIMES.\n      lv_css = lv_css && '#container > div {' && 'flex: 1;' && '; background-color: purple;' && '}'.\n    ENDDO.\n\n    ev_css = lv_css.\n\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_layout TYPE REF TO lcl_layout,\n         lr_container TYPE REF TO data,\n         ls_layout TYPE lcl_layout=>ty_container,\n         lv_css TYPE string.\n\n  lo_layout->create_layout(\n    EXPORTING\n      iv_container_id = 'container'\n    IMPORTING\n      er_container     = lr_container ).\n\n  CREATE OBJECT lo_layout.\n  lo_layout->set_div_styles( CHANGING ct_div_styles = lt_div_styles ).\n\n  DATA: lv_html TYPE string,\n        lv_js TYPE string.\n\n  lv_css = lcl_css=>create_css(\n    iv_background_color = 'purple' ).\n  CALL FUNCTION 'SAP_UI_DOCUMENT'\n    EXPORTING\n      iv_type               = 'CSS'\n      iv_content            =\n      iv_meta_info          =\n    EXCEPTIONS\n      OTHERS                = 1.\n"
    },
    {
        "instruction": "Change the data type of the following list to a dictionary.",
        "input": "list = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener']",
        "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}",
        "abap": "TYPES: BEGIN OF ty_person,\n         age TYPE i,\n         hobby TYPE string,\n       END OF ty_person.\n\nDATA: people TYPE STANDARD TABLE OF ty_person.\n\nAPPEND VALUE #( age = 26\n              hobby = 'Movie Watch' )\nTO people WITH KEY name = 'John'.\n\nAPPEND VALUE #( age = 31\n              hobby = 'Book Reader' )\nTO people WITH KEY name = 'Jane'.\n\nAPPEND VALUE #( age = 25\n              hobby = 'Music Listener' )\nTO people WITH KEY name = 'Charlotte'.\n"
    },
    {
        "instruction": "Given a positive integer, find the sum of its digits.",
        "input": "",
        "output": "def findSum(num): \n    res = 0\n    num = str(num)\n    for i in range(0, len(num)): \n        res = res + int(num[i]) \n    \n    return res",
        "abap": "FORM find_sum USING p_num TYPE i\n  RETURNING value(r_result) TYPE i.\n\n  DATA: lv_string TYPE string.\n  DATA: lv_length TYPE i VALUE 0.\n  DATA: lv_digit TYPE i.\n\n  lv_string = to_char( val = p_num ).\n  DO.\n    IF lv_length > strlen( lv_string ).\n      EXIT.\n    ENDIF.\n\n    mv_result += lv_string+lv_length(lv_length).\n    lv_length = lv_length + 1.\n    UNTIL lv_length > strlen( lv_string ).\n\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Explain the concept of object-oriented programming.",
        "input": "",
        "output": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code.",
        "abap": "\" Define a class with properties and methods\nCLASS lcl_object DEFINITION.\n  PUBLIC SECTION.\n    DATA: \" Data fields\n          lv_data1 TYPE string,\n          lv_data2 TYPE i.\n\n    METHODS:\n      \" Method to perform an action\n      method_do_something IMPORTING VALUE(p_input) TYPE i\n                           EXPORTING VALUE(e_output) TYPE string,\n      \" Constructor\n      constructor IMPORTING VALUE(p_data1) TYPE string p_data2 TYPE i.\n  ENDMETHOD.\n\nENDCLASS.\n\n\" Create an instance of the class\nDATA: lo_object TYPE REF TO lcl_object.\n\n\" Initialize data and call method\nCREATE OBJECT lo_object\n  EXPORTING\n    p_data1 = 'Hello, World!'\n  IMPORTING\n    p_data2 = 42.\n\nlo_object->method_do_something(\n  e_output = lv_result\n).\n"
    },
    {
        "instruction": "Create a function to calculate the maximum of two numbers.",
        "input": "",
        "output": "def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
        "abap": "FORM z_max_of_two USING p_x TYPE i p_y TYPE i CHANGING p_result TYPE i.\n\n  IF p_x > p_y.\n    p_result = p_x.\n  ELSE.\n    p_result = p_y.\n  ENDIF.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a JavaScript code snippet to center text in a div element with id \"myDiv\".",
        "input": "",
        "output": "document.getElementById('myDiv').style.textAlign = \"center\";",
        "abap": "DATA: lr_html TYPE REF TO if_html.\n\nlr_html = cl_document => create( ).\nDO.\n  IF lr_html->is_ok( ) IS NOT INITIAL.\n    lr_html->set_attribute(\n      EXPORTING\n        name     = 'id'\n        value    = 'myDiv'\n        add      = abap_true ).\n\n    lr_html->set_style(\n      EXPORTING\n        name  = 'text-align'\n        value = 'center' ).\nENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Formulate an SQL query to make this table:",
        "input": "Table: books\n\nbook_id | book_title | book_edition\n------------------------",
        "output": "CREATE TABLE books (\n    book_id INTEGER PRIMARY KEY,\n    book_title VARCHAR(50),\n    book_edition VARCHAR(50)\n);",
        "abap": "DATA: ls_books TYPE ty_books.\n\nTYPES:\n  BEGIN OF type_books,\n    book_id     TYPE i,\n    book_title  TYPE string,\n    book_edition TYPE string,\n  END OF type_books.\n\nCREATE TABLE books AS\n  SELECT *\n    FROM ( VALUE #( TYPE ty_books\n                      book_id   = 0\n                      book_title = 'Example Title'\n                      book_edition = 'Example Edition' ) ).\n\nINSERT books FROM @ls_books.\n"
    },
    {
        "instruction": "Create an array of length 15 containing numbers divisible by 3 up to 45.",
        "input": "",
        "output": "arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i.\n\nINITIALIZATION.\n  lv_arr = VALUE #( ( 3 ) ( 6 ) ( 9 ) ( 12 ) ( 15 )\n                     ( 18 ) ( 21 ) ( 24 ) ( 27 )\n                     ( 30 ) ( 33 ) ( 36 ) ( 39 )\n                     ( 42 ) ( 45 ) ).\n\nCLASS lcl_example DEFINITION.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\nMETHOD constructor.\n  \" do nothing\nENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a project in random forest to learn the target variable given a set of predictor variables.",
        "input": "predictor_vars = [\"age\", \"occupation\"]\ntarget_var = \"income\"",
        "output": "from sklearn.ensemble import RandomForestRegressor\n\n# Initialize the model\nmodel = RandomForestRegressor()\n\n# Train the model using the predictor variables\nmodel.fit(predictor_vars, target_var)",
        "abap": "REPORT zrandom_forest_regressor.\n\nCLASS lcl_random_forest_regressor DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_model IMPORTING\n        predictor_vars TYPE cl_abap_typedescr=>data\n        target_var TYPE REF TO data,\n      train_model IMPORTING\n        predictor_vars TYPE cl_abap_typedescr=>data\n        target_var TYPE REF TO data,\n      get_prediction IMPORTING\n        predictor_vars TYPE cl_abap_typedescr=>data\n        RETURNING\n          VALUE(result) TYPE REF TO data.\nENDCLASS.\n\nCLASS lcl_random_forest_regressor IMPLEMENTATION.\n  METHOD create_model.\n    DATA: lr_model TYPE REF TO zcx_random_forest_regressor,\n          lv_name TYPE string.\n\n    \" Create the model (Random Forest Regressor)\n    TRY.\n        CREATE OBJECT lr_model TYPE zcx_random_forest_regressor\n          EXPORTING\n            name = lv_name.\n      CATCH cx_static_check. \" CX_STATIC_CHECK\n        MESSAGE 'Error creating model' TYPE 'I'.\n    ENDTRY.\n\n  ENDMETHOD.\n\n  METHOD train_model.\n    DATA: lr_model TYPE REF TO zcx_random_forest_regressor,\n          lt_predictor_vars TYPE cl_abap_typedescr=>data,\n          lv_target TYPE REF TO data.\n\n    \" Initialize the model (Random Forest Regressor)\n    lr_model = create_model( predictor_vars = predictor_vars target_var = target_var ).\n\n    \" Train the model using the predictor variables\n    lr_model->train_model(\n      importing\n        predictor_vars = predictor_vars\n        target_var     = target_var ).\n  ENDMETHOD.\n\n  METHOD get_prediction.\n    DATA: lt_predictor_vars TYPE cl_abap_typedescr=>data,\n          lv_target TYPE REF TO data.\n\n    \" Get the prediction from the model using the predictor variables\n    lr_model->get_prediction(\n      exporting\n        predictor_vars = predictor_vars\n      importing\n        result         = result ).\n  ENDMETHOD.\nENDCLASS.\n\nCLASS zcx_random_forest_regressor DEFINITION INHERITING FROM cl_pbo_model.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      train_model IMPORTING\n        predictor_vars TYPE cl_abap_typedescr=>data\n        target_var     TYPE REF TO data,\n      get_prediction IMPORTING\n        predictor_vars TYPE cl_abap_typedescr=>data\n        RETURNING\n          VALUE(result) TYPE REF TO data.\nENDCLASS.\n\nCLASS zcx_random_forest_regressor IMPLEMENTATION.\n  METHOD train_model.\n    DATA: lr_target TYPE REF TO data,\n          lt_predictor_vars TYPE cl_abap_typedescr=>data.\n\n    \" Train the model using the predictor variables and target variable\n    lr_target = target_var.\n    super->train_model(\n      predictor_vars = predictor_vars\n      target_var     = lr_target ).\n  ENDMETHOD.\n\n  METHOD get_prediction.\n    DATA: lt_predictor_vars TYPE cl_abap_typedescr=>data,\n          lv_result TYPE REF TO data.\n\n    \" Get the prediction from the model using the predictor variables\n    super->get_prediction(\n      exporting\n        predictor_vars = predictor_vars\n      importing\n        result         = lv_result ).\n    result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a JavaScript function that takes a single parameter and returns a string.",
        "input": "Parameter: num (integer) = 3",
        "output": "function getString(num) { \n  return \"The number is \" + num; \n}",
        "abap": "REPORT zexample.\n\nCLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_string IMPORTING iv_num TYPE i\n                 RETURNING value(rv_string) TYPE string.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD get_string.\n    rv_string = |The number is { iv_num }|.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_string TYPE string.\n  lv_string = lcl_example=>get_string( 123 ).\n  WRITE: / lv_string.\n"
    },
    {
        "instruction": "Explain how to implement a heap sort algorithm in Java.",
        "input": "",
        "output": "// To implement a heap sort algorithm in Java:\n// 1. Build a min heap from the input data.\n// 2. At the top of the heap, obtain the minimum element.\n// 3. Exchange the minimum element with the last element of the heap.\n// 4. Reduce the size of the heap by one and heapify the root of the heap.\n// 5. Repeat steps 2-4 until all the elements are sorted.\n// 6. Return the sorted array.",
        "abap": "TYPES: ty_data TYPE STANDARD TABLE OF i.\n\nCLASS lcl_heap_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      heapify IMPORTING it_arr TYPE ty_data\n                RETURNING value rv_sorted TYPE ty_data,\n      sort IMPORTING it_arr TYPE ty_data\n            RETURNING value rv_sorted TYPE ty_data.\nENDCLASS.\n\nCLASS lcl_heap_sort IMPLEMENTATION.\n  METHOD heapify.\n    DATA: lv_i TYPE i,\n          ls_data TYPE LINE OF ty_data.\n\n    IF it_arr IS INITIAL.\n      \" Empty input, return empty sorted array\n      rv_sorted = it_arr.\n      RETURN.\n    ENDIF.\n\n    \" Build a min heap from the input data\n    DO size( it_arr ) TIMES.\n      lv_i = sy-index - 1.\n      ls_data = it_arr[ lv_i ].\n\n      \" Bubble up: compare each node with its parent and swap if necessary\n      WHILE lv_i > 0 AND it_arr[ ( lv_i - 1 ) / 2 ] > ls_data.\n        it_arr[ lv_i ] = it_arr[ ( lv_i - 1 ) / 2 ].\n        lv_i = ( lv_i - 1 ) / 2.\n      ENDDO.\n\n      it_arr[ lv_i ] = ls_data.\n\n    ENDDO.\n\n    \" Repeat the following steps:\n    DO size( it_arr ) TIMES.\n      lv_i = sy-index - 1.\n\n      IF it_arr IS INITIAL.\n        \" Empty input, return empty sorted array\n        rv_sorted = it_arr.\n        RETURN.\n      ENDIF.\n\n      \" Extract the root (minimum element) and move the last element to its place\n      ls_data = it_arr[ lv_i ].\n      it_arr-levi = it_arr-levi - 1.\n      it_arr[ sy-index - 1 ] = ls_data.\n\n      IF it_arr IS INITIAL.\n        \" Empty input, return empty sorted array\n        rv_sorted = it_arr.\n        RETURN.\n      ENDIF.\n\n      \" Heapify the root of the heap\n      CALL METHOD me->heapify EXPORTING it_arr = it_arr IMPORTING rv_sorted = DATA(ls_heapified).\n\n    ENDDO.\n\n    rv_sorted = it_arr.\n  ENDMETHOD.\n\n  METHOD sort.\n    \" Call the heapify method to build a min heap and then repeatedly extract the root until all elements are sorted\n    rv_sorted = me->heapify( it_arr = it_arr ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a CSS selector to select all paragraph elements with a class of \"highlight\".",
        "input": "",
        "output": "p.highlight {\n    /* CSS styles */\n}",
        "abap": "`SELECT SINGLE * FROM sy-datum.`"
    },
    {
        "instruction": "Implement a stack data structure in Java.",
        "input": "",
        "output": "// Stack class \nclass Stack \n{ \n    static final int MAX = 1000; \n    int top; \n    int a[] = new int[MAX]; // Maximum size of Stack \n  \n    boolean isEmpty() \n    { \n        return (top < 0); \n    } \n    Stack() \n    { \n        top = -1; \n    } \n  \n    boolean push(int x) \n    { \n        if (top >= (MAX-1)) \n        { \n            System.out.println(\"Stack Overflow\"); \n            return false; \n        } \n        else\n        { \n            a[++top] = x; \n            System.out.println(x + \" pushed into stack\"); \n            return true; \n        } \n    } \n  \n    int pop() \n    { \n        if (top < 0) \n        { \n            System.out.println(\"Stack Underflow\"); \n            return 0; \n        } \n        else\n        { \n            int x = a[top--]; \n            return x; \n        } \n    } \n\n    int peek() \n    { \n        if (top < 0) \n        { \n            System.out.println(\"Stack Underflow\"); \n            return 0; \n        } \n        else\n        { \n            int x = a[top]; \n            return x; \n        } \n    } \t\n}",
        "abap": "CLASS lcl_stack DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \" Initialize stack and check if it's empty\n      is_empty IMPORTING iv_index TYPE i\n                RETURNING value(rv_result) TYPE abap_bool,\n\n      \" Push an element onto the stack\n      push IMPORTING\n          ip_value TYPE i,\n        \n      \" Pop an element from the stack\n      pop IMPORTING\n        RETURNING value(rv_result) TYPE i,\n\n      \" Return top element of the stack (no modification)\n      peek IMPORTING \n        RETURNING value(rv_result) TYPE i.\n\n  PRIVATE SECTION.\n    CLASS-DATA: lv_top TYPE i VALUE -1,\n                lt_stack TYPE STANDARD TABLE OF i WITH DEFAULT KEY .\n\nENDCLASS.\n\nCLASS lcl_stack IMPLEMENTATION.\n\nMETHOD is_empty.\n  rv_result = abap_false.\n  IF iv_index EQ lv_top.\n    rv_result = abap_true.\n  ENDIF.\nENDMETHOD.\n\nMETHOD push.\n  DATA: lv_max  TYPE i,\n        lv_index TYPE i.\n\n  \" Get the maximum index for the stack\n  lv_max = 1000.\n  \n  IF lv_top GE (lv_max -1).\n    MESSAGE 'Stack Overflow' TYPE 'E'.\n    RETURN.\n  ENDIF.\n    \n  APPEND ip_value TO lt_stack.\n  lv_top = sy-tc.\n  WRITE: / ip_value, ' pushed into stack'.\nENDMETHOD.\n\nMETHOD pop.\n  DATA: lv_index TYPE i,\n        lr_result TYPE REF TO data,\n\n  IF lv_top EQ -1.\n    MESSAGE 'Stack Underflow' TYPE 'E'.\n    RETURN.\n  ENDIF.\n    \n  DELETE lt_stack INDEX sy-tc.\n  WRITE: / 'Popped'.\nENDMETHOD.\n\nMETHOD peek.\n  DATA: lr_result TYPE REF TO data,\n        lv_index TYPE i.\n\n  IF lv_top EQ -1.\n    MESSAGE 'Stack Underflow' TYPE 'E'.\n    RETURN.\n  ENDIF.\n    \n  READ TABLE lt_stack INDEX sy-tc INTO lr_result.\n  WRITE: / lr_result.\nENDMETHOD.\n\nINITIALIZATION.\n  CLEAR: lv_top,\n         lt_stack[].\nENDCLASS.\n"
    },
    {
        "instruction": "Write code in Java to create a linked list.",
        "input": "",
        "output": "class Node{\n    int data; \n    Node next; \n        \n    Node(int d){\n        data = d; \n        next = null; \n    } \n} \n\nclass LinkedList{ \n    Node head; \n        \n    public void insert(int data){ \n        Node node = new Node(data); \n        if (head == null) { \n            head = node; \n        } \n        else { \n            Node n = head; \n            while (n.next != null) { \n                n = n.next; \n            } \n            n.next = node; \n        } \n    } \n}",
        "abap": "TYPES: BEGIN OF ty_node,\n         data TYPE i,\n       END OF ty_node.\n\nDATA: it_nodes TYPE STANDARD TABLE OF ty_node,\n      lv_data  TYPE i.\n\nCLASS lcl_linked_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      insert IMPORTING iv_data TYPE i\n               RETURNING VALUE(ro_head) TYPE REF TO lcl_node,\n      get_head REturning VALUE(rv_head) TYPE REF TO lcl_node.\n\n  TYPES: BEGIN OF ty_node,\n         data TYPE i,\n       END OF ty_node.\nENDCLASS.\n\nCLASS lcl_linked_list IMPLEMENTATION.\n  METHOD insert.\n    DATA: lo_node TYPE REF TO lcl_node.\n\n    lo_node = NEW #( iv_data ).\n\n    IF it_nodes IS INITIAL.\n      APPEND lo_node TO it_nodes.\n      ro_head = lo_node.\n    ELSE.\n      DATA(lv_last) = REF OF it_nodes[ lines( it_nodes ) ].\n      lv_last->data = iv_data.\n      INSERT lo_node INTO TABLE it_nodes INDEX lines( it_nodes ).\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD get_head.\n    rv_head = ro_head.\n  ENDMETHOD.\n\nCLASS lcl_node DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor IMPORTING iv_data TYPE i\n                  RETURNING VALUE(ro_self) TYPE REF TO lcl_node,\n      append_importing iv_new_data TYPE i.\n\n  PRIVATE SECTION.\n    DATA: lv_data TYPE i,\n          mv_next TYPE REF TO lcl_node.\n\nENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD constructor.\n    me->lv_data = iv_data.\n    me->mv_next = NEW #( ).\n\n  ENDMETHOD.\n\n  METHOD append.\n    mv_next = NEW #( iv_new_data ).\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Construct a loop to output all the elements from a list.",
        "input": "['a', 'b', 'c', 'd']",
        "output": "for i in range(len(arr)):\n    print(arr[i])",
        "abap": "DATA: lv_index TYPE i,\n      lt_array TYPE STANDARD TABLE OF string.\n\nlt_array = VALUE #( 'a' 'b' 'c' ).\n\nLOOP AT lt_array INTO DATA(ls_element) INDEX FROM 1 TO lines( lt_array ).\n  WRITE: ls_element.\nENDLOOP.\n"
    },
    {
        "instruction": "Given a string and a set of delimiters, write a function in JavaScript to split the string.",
        "input": "string = \"Hello, world!\"\ndelimiters = [\" \", \",\", \"-\", \"!\"]",
        "output": "function splitStringWithDelimiters (string, delimiters) { \n  let result = []; \n  let s = string; \n  while (s.length > 0) { \n    let char = s[0]; \n    if (delimiters.includes(char)) { \n      s = s.substr(1); \n    } else { \n      let index = 0; \n      for (const delimiter of delimiters) { \n        if (s.indexOf(delimiter) > 0 && s.indexOf(delimiter) < index) { \n          index = s.indexOf(delimiter); \n        } \n      } \n      if (index === 0) { \n        index = s.length; \n      } \n      result.push(s.substr(0, index)); \n      s = s.substr(index); \n    } \n  } \n  return result; \n}",
        "abap": "CLASS lcl_string_splitter DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      split_string_with_delimiters\n        IMPORTING\n          iv_string TYPE string\n          it_delimiters TYPE string_table\n        EXPORTING\n          et_result TYPE STANDARD TABLE OF string.\nENDCLASS.\n\nCLASS lcl_string_splitter IMPLEMENTATION.\n  METHOD split_string_with_delimiters.\n    DATA: lv_string TYPE string,\n          lt_result TYPE STANDARD TABLE OF string,\n          ls_delimiter LIKE LINE OF it_delimiters,\n          lv_index TYPE i VALUE 0,\n          lv_char TYPE c.\n\n    lv_string = iv_string.\n\n    WHILE lv_string IS NOT INITIAL.\n      lv_char = lv_string+0(1).\n      IF it_delimiters MATCHING LINE ( it_delimiters ) TYPE ccomponent INTO ls_delimiter.\n        lv_string = lv_string+1.\n      ELSE.\n        READ TABLE it_delimiters INTO ls_delimiter\n          FROM 1 INDEX lv_index\n          MATCHING CORRESPONDING component type ccomponent.\n\n        IF sy-subrc <> 0.\n          \" no match found, assume delimiter is at the end of the string\n          APPEND lv_string TO lt_result.\n          EXIT.\n        ELSEIF ls_delimiter = ''.\n          \" delimiter not found in table, use next character as start of new token\n          lv_index = 1.\n          lv_char = lv_string+0(1).\n          CONTINUE.\n        ENDIF.\n\n        lv_index = sy-fdpos - 1. \" index of the current delimiter\n        APPEND lv_string TO lt_result.\n        lv_string = lv_string+lv_index+1.\n\n      ENDIF.\n    ENDWHILE.\n\n    et_result = lt_result.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a MySQL table 'employees' with columns name, age, department and salary.",
        "input": "",
        "output": "CREATE TABLE employees (\n    name VARCHAR(255) NOT NULL,\n    age INT NOT NULL,\n    department VARCHAR(255) NOT NULL,\n    salary DOUBLE NOT NULL\n);",
        "abap": "DATA: BEGIN OF ty_employee TYPE ty_employees OCCURS 0.\nDATA: END OF ty_employee.\n\nTYPES: BEGIN OF type_employees.\n  NAME     TYPE c LENGTH 255.\n  AGE      TYPE i.\n  DEPARTMENT TYPE c LENGTH 255.\n  SALARY   TYPE f.\nTYPES: END OF type_employees.\n\nDATA: it_employees TYPE STANDARD TABLE OF type_employees WITH DEFAULT KEY.\n\nCREATE DATA: it_employees.\n"
    },
    {
        "instruction": "Connect to a MongoDB database and select all documents from the collection \u2018customers\u2019.",
        "input": "",
        "output": "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find({})\n\nfor x in mydoc:\n  print(x)",
        "abap": "DATA: lo_client TYPE REF TO cl_mongodb_client,\n       ls_customer TYPE tiqp_customers.\n\nLOOP AT itab INTO ls_customer.\n  WRITE: / ls_customer.\nENDLOOP.\n"
    },
    {
        "instruction": "Find the second smallest element in an integer array of size n.",
        "input": "array = [4, 5, 8, 2, 9, 13]",
        "output": "def second_smallest(array):\n\nsmallest = min(array)\nsecond_smallest = float('inf')\n\nfor num in array:\n    if num > smallest and num < second_smallest:\n        second_smallest = num\n        \nreturn second_smallest",
        "abap": "FORM second_smallest USING it_array TYPE STANDARD TABLE OF i.\n\nDATA: lv_second_smallest TYPE f VALUE '1E+99'.\nDATA: lv_smallest TYPE i.\n\nSORT it_array ASCENDING.\n\nIF lines( it_array ) < 2.\n  RAISE EXCEPTION TYPE cx_static_check INTO 'Array must contain at least two elements'.\nENDIF.\n\nlv_smallest = it_array[ 1 ].\n\nLOOP AT it_array ASSIGNING FIELD-SYMBOL(<ls_num>).\n  IF sy-index > 1 AND <ls_num> < lv_smallest\n    AND ( lv_second_smallest <> lv_smallest OR <ls_num> < lv_second_smallest ).\n    lv_second_smallest = <ls_num>.\n  ENDIF.\nENDLOOP.\n\nlv_smallest = it_array[ 1 ].\n\n\" Ensure the second smallest is smaller than the smallest\nIF lv_second_smallest >= lv_smallest.\n  lv_second_smallest = '1E+99'.\nENDIF.\n\nRETURN.\n\nFORM / SECOND_SMALLEST USING it_array TYPE STANDARD TABLE OF i.\n"
    },
    {
        "instruction": "Suggest a better algorithm to find the minimum element in a given array.",
        "input": "",
        "output": "The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.",
        "abap": "CLASS lcl_find_minimum DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_minimum\n        IMPORTING\n          it_array     TYPE STANDARD TABLE OF i\n        EXPORTING\n          ev_min       TYPE i.\nENDCLASS.\n\nCLASS lcl_find_minimum IMPLEMENTATION.\n  METHOD find_minimum.\n    DATA: lv_mid_index TYPE i,\n           lt_first    TYPE STANDARD TABLE OF i,\n           lt_second   TYPE STANDARD TABLE OF i,\n           ls_first    LIKE LINE OF it_array,\n           ls_second   LIKE LINE OF it_array,\n           lv_first    TYPE i,\n           lv_second   TYPE i.\n\n    IF lines( it_array ) = 1.\n      ev_min = it_array[ 1 ].\n      RETURN.\n    ENDIF.\n\n    \" Find the middle index\n    lv_mid_index = ( lines( it_array ) - 1 ) / 2 + 1.\n\n    \" Split the array into two halves\n    MOVE-CORRESPONDING it_array TO lt_first.\n    DELETE lt_first INDEX lv_mid_index - 1.\n    MOVE-CORRESPONDING it_array+lv_mid_index TO lt_second.\n\n    \" Find minimum in each half\n    READ TABLE lt_first INTO ls_first WITH KEY min = abap_true.\n    IF sy-subrc <> 0.\n      ev_min = lt_first[ 1 ].\n    ELSE.\n      lv_first = ls_first-min.\n    ENDIF.\n\n    READ TABLE lt_second INTO ls_second WITH KEY min = abap_true.\n    IF sy-subrc <> 0.\n      ev_min = lt_second[ 1 ].\n    ELSE.\n      lv_second = ls_second-min.\n    ENDIF.\n\n    \" Compare the minimum of both halves\n    IF lv_first < lv_second.\n      ev_min = lv_first.\n    ELSE.\n      ev_min = lv_second.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.",
        "input": "s1 = \u201csilent\u201d\ns2 = \u201clisten\u201d",
        "output": "def anagrams(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    s1_arr.sort()\n    s2_arr.sort()\n    for i in range(len(s1_arr)):\n        if s1_arr[i] != s2_arr[i]:\n            return False\n    return True",
        "abap": "CLASS lcl_anagram DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_anagram\n        IMPORTING\n          im_s1 TYPE string\n          im_s2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS lcl_anagram IMPLEMENTATION.\n  METHOD is_anagram.\n    IF strlen( im_s1 ) <> strlen( im_s2 ).\n      rv_result = abap_false.\n      RETURN.\n    ENDIF.\n\n    DATA: lt_s1 TYPE string_to_table,\n          lt_s2 TYPE string_to_table.\n\n    CALL FUNCTION 'STRING_TO_TABLE'\n      EXPORTING\n        i_string  = im_s1\n      IMPORTING\n        et_tab    = lt_s1.\n\n    CALL FUNCTION 'STRING_TO_TABLE'\n      EXPORTING\n        i_string  = im_s2\n      IMPORTING\n        et_tab    = lt_s2.\n\n    SORT TABLE lt_s1.\n    SORT TABLE lt_s2.\n\n    DATA: lv_index TYPE i,\n          lv_result TYPE abap_bool.\n\n    LOOP AT lt_s1 INTO DATA(ls_s1) ASSIGNING FIELD-SYMBOL(<ls_s1>).\n      lv_index = sy-tabix - 1.\n      READ TABLE lt_s2 WITH KEY table_line = ls_s1 INTO DATA(ls_s2).\n      IF sy-subrc <> 0 OR <ls_s1> <> ls_s2-table_line.\n        rv_result = abap_false.\n        EXIT.\n      ENDIF.\n    ENDLOOP.\n\n    IF lv_index >= strlen( im_s1 ).\n      rv_result = abap_true.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Convert the following strings to lower case.",
        "input": "s1 = \"Hello World!\"\ns2 = \"HELLO WORLD!\"",
        "output": "s1 = \"Hello World!\".lower()\ns2 = \"HELLO WORLD!\".lower()",
        "abap": "DATA: lv_s1 TYPE string,\n      lv_s2 TYPE string.\n\nlv_s1 = 'Hello World!'.\nlv_s2 = 'HELLO WORLD!'.\n\n\" Convert both strings to lowercase\nlv_s1 = lv_s1 ADJUST TRIM.\nlv_s2 = lv_s2 ADJUST TRIM.\n"
    },
    {
        "instruction": "Write a code to find the missing number in the given array.",
        "input": "A = [1, 2, 3, 4, 6, 7, 8]",
        "output": "# Create a set from the array\nA_set = set(A)\n\n# Determine the max value\nmax_val = max(A_set)\n\n# Find the missing number\nmissing_number = max_val - sum(A_set)\n\nprint(missing_number) # prints 5",
        "abap": "DATA: lv_arr TYPE i[].\nDATA: lt_set TYPE STANDARD TABLE OF i.\nDATA: lv_max TYPE i.\nDATA: lv_sum TYPE f.\n\n\" Create an internal table from the array\nlv_arr = value #( 1, 2, 3, 5 ).\n\n\" Convert the internal table to a set (i.e. remove duplicates)\nlt_set = VALUE #( FOR v IN lv_arr WHERE NOT sy-tabix = line lt_set[ sy-tabix ] ).\nDELETE lt_set INDEX 0.\n\n\" Determine the max value\nSORT lt_set ASCENDING.\nREAD TABLE lt_set INTO lv_max INDEX lines( lt_set ).\n\n\" Find the missing number\nlv_sum = SUM( lt_set ).\nmissing_number = lv_max - lv_sum.\n\nWRITE: / missing_number. \" prints 5\n"
    },
    {
        "instruction": "For the following list, print out the second element.",
        "input": "list = [\"apple\", \"banana\", \"cherry\"]",
        "output": "second_element = list[1]\nprint(second_element) # prints banana",
        "abap": "DATA: lt_list TYPE TABLE OF string,\n      lv_second_element TYPE string.\n\n\" Initialize a table with one element\nAPPEND 'banana' TO lt_list.\n\n\" Access the second element (index 1)\nlv_second_element = VALUE #( lt_list[ 1 ] ).\n\nWRITE: / lv_second_element. \" prints 'banana'\n"
    },
    {
        "instruction": "Create an array of strings, of size 5, by taking the string input from the user.",
        "input": "\"hello\", \"world\", \"this\", \"is\", \"a\"",
        "output": "arr = [\"hello\", \"world\", \"this\", \"is\", \"a\"]",
        "abap": "DATA: lt_array TYPE STANDARD TABLE OF string.\nAPPEND \"hello\" TO lt_array.\nAPPEND \"world\" TO lt_array.\nAPPEND \"this\"  TO lt_array.\nAPPEND \"is\"   TO lt_array.\nAPPEND \"a\"    TO lt_array.\n"
    },
    {
        "instruction": "How to check if a given number is even or odd using Python?",
        "input": "",
        "output": "def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "abap": "REPORT zevenodd.\n\nTYPES: BEGIN OF ty_number,\n         value TYPE i,\n       END OF ty_number.\n\nDATA: ls_number TYPE ty_number.\n\nMETHODS: check_even_odd IMPORTING\n                            VALUE(value) TYPE i\n                  RETURNING\n                            VALUE(result) TYPE string.\n\nCLASS-lc_check_even_odd DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_even_odd IMPORTING\n                       VALUE(value) TYPE i\n                 RETURNING\n                       VALUE(result) TYPE string.\nENDCLASS.\n\nCLASS zevenodd DEFINITION.\n  PUBLIC SECTION.\n    CLASS-DATA: object TYPE REF TO cl_check_even_odd.\n\n    CLASS-METHODS:\n      create_object,\n      get_object\n        IMPORTING\n          value TYPE i\n        EXPORTING\n          result TYPE string.\nENDCLASS.\n\nCLASS zevenodd IMPLEMENTATION.\n  METHOD create_object.\n    CREATE OBJECT object.\n  ENDMETHOD.\n\n  METHOD get_object.\n    CHECK object <> space.\n    IF value MOD 2 = 0.\n      result = 'Even'.\n    ELSE.\n      result = 'Odd'.\n    ENDIF.\n  ENDMETHOD.\n\nCLASS cl_check_even_odd DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_even_odd IMPORTING\n                       VALUE(value) TYPE i\n                 RETURNING\n                       VALUE(result) TYPE string.\nENDCLASS.\n\nCLASS cl_check_even_odd IMPLEMENTATION.\n  METHOD check_even_odd.\n    IF value MOD 2 = 0.\n      result = 'Even'.\n    ELSE.\n      result = 'Odd'.\n    ENDIF.\n  ENDMETHOD.\n\nSTART-OF-SELECTION.\n  PERFORM get_object USING 5 CHANGING result.\n  WRITE: / result.\n"
    },
    {
        "instruction": "convert all words in a sentence to camelCase",
        "input": "The quick brown fox jumps over the lazy dog",
        "output": "\"\"\"\nConvert all words in a sentence to camelCase\n\nInput: The quick brown fox jumps over the lazy dog\n\nOutput: theQuickBrownFoxJumpsOverTheLazyDog\n\"\"\"\n\ndef toCamelCase(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for index, word in enumerate(words):\n        if index > 0:\n            small_word = word.capitalize()\n            result += small_word\n        else:\n            result += word\n    return result\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(toCamelCase(sentence))",
        "abap": "CLASS lcl_to_camel_case DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      to_camel_case\n        IMPORTING\n          VALUE( iv_sentence ) TYPE string\n        RETURNING\n          VALUE( rv_result ) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_to_camel_case IMPLEMENTATION.\n\nMETHOD to_camel_case.\n  DATA: lt_words TYPE STANDARD TABLE OF string,\n        lv_result TYPE string.\n\n  \" Split the sentence into words\n  SPLIT iv_sentence AT space INTO TABLE lt_words.\n\n  \" Iterate over each word, capitalize the first letter and concatenate it to the result\n  DO.\n    IF sy-index = 1.\n      lv_result = lt_words[ sy-index ].\n    ELSE.\n      CONCATENATE lv_result lt_words[ sy-index ] INTO lv_result SEPARATED BY space.\n      lv_result = lv_result+0(1) = to_upper( lv_result+0(1) ).\n    ENDDO.\n    IF sy-index < lines( lt_words ). \" Prevent index out of bounds\n      EXIT.\n    ENDIF.\n  ENDDO.\n\n  rv_result = lv_result.\n\nENDMETHOD.\n"
    },
    {
        "instruction": "Retrieve the number of letters in the following phrase .",
        "input": "\"May the force be with you!\"",
        "output": "22",
        "abap": "It seems like you provided a number, but I'd love to help with translating code from another programming language to ABAP.\n\nCould you please provide the code snippet you'd like me to translate? What programming language is it in currently and what specific task are you trying to accomplish?\n\nI'm ready when you are!"
    },
    {
        "instruction": "Create a class in Java that can store a list of students and the courses they are enrolled in.",
        "input": "",
        "output": "public class StudentList {\n  private ArrayList<Student> students;\n  private ArrayList<String> courses;\n\n  public StudentList() {\n    this.students = new ArrayList<Student>();\n    this.courses = new ArrayList<String>();\n  }\n\n  public void addStudent(Student student) {\n    this.students.add(student);\n  }\n  \n  public void addCourse(String course) {\n    this.courses.add(course);\n  }\n  \n  public ArrayList<Student> getStudents() {\n    return this.students;\n  }\n  \n  public ArrayList<String> getCourses() {\n    return this.courses;\n  }\n}",
        "abap": "TYPES: BEGIN OF ty_student,\n          \" Add student attributes here\n        END OF ty_student.\n\nDATA: lt_students TYPE STANDARD TABLE OF ty_student,\n      lt_courses   TYPE STANDARD TABLE OF string.\n\nCLASS lcl_student_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor\n        IMPORTING\n          iv_students     TYPE STANDARD TABLE OF ty_student\n          iv_courses      TYPE STANDARD TABLE OF string\n        RAISING\n          cx_static_check,\n      add_student\n        IMPORTING\n          is_student      TYPE ty_student\n        RAISING\n          cx_static_check,\n      add_course\n        IMPORTING\n          iv_course       TYPE string\n        RAISING\n          cx_static_check,\n      get_students\n        RETURNING\n          VALUE(rv_students) TYPE STANDARD TABLE OF ty_student,\n      get_courses\n        RETURNING\n          VALUE(rv_courses) TYPE STANDARD TABLE OF string.\n\n  PROTECTED SECTION.\n    CLASS-METHODS:\n      initialize\n        RAISING\n          cx_static_check.\n\n  PRIVATE SECTION.\n    CLASS-DATA mv_students   TYPE REF TO cl_abap_tabledescr,\n      mv_courses TYPE REF TO cl_abap_typedescr.\n\nCLASS lcl_student_list IMPLEMENTATION.\n  METHOD constructor.\n    \" Add default values for students and courses here if needed\n  ENDMETHOD.\n\n  METHOD add_student.\n    APPEND is_student TO lt_students.\n  ENDMETHOD.\n\n  METHOD add_course.\n    APPEND iv_course TO lt_courses.\n  ENDMETHOD.\n\n  METHOD get_students.\n    rv_students = lt_students.\n  ENDMETHOD.\n\n  METHOD get_courses.\n    rv_courses = lt_courses.\n  ENDMETHOD.\n\n  METHOD initialize.\n    DATA: lr_students TYPE REF TO cl_abap_tabledescr,\n          lr_courses  TYPE REF TO cl_abap_typedescr.\n\n    CREATE OBJECT mv_students TYPE TABLE DESC OF ty_student.\n    CREATE OBJECT mv_courses  TYPE TABLE DESC OF string.\n\n    \" Optionally you can initialize the tables with default values here\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_student_list DEFINITION INHERITING FROM cl_simple_class_implementation.\nENDCLASS.\n\nDATA: lo_student_list TYPE REF TO lcl_student_list.\n\nCREATE OBJECT lo_student_list IMPORTING iv_students = VALUE #( )\n                                  iv_courses      = VALUE #( ).\n\n\" Add students to the list\nlo_student_list->add_student( VALUE #( student_name  = 'John Doe'\n                                         student_age  = 30 ) ).\n\n\" Add courses to the list\nlo_student_list->add_course( 'Math' ).\nlo_student_list->add_course( 'Science' ).\n\n\" Get all students from the list\nDATA: lt_students TYPE STANDARD TABLE OF ty_student.\nlt_students = lo_student_list->get_students( ).\n\n\" Get all courses from the list\nDATA: lt_courses TYPE STANDARD TABLE OF string.\nlt_courses = lo_student_list->get_courses( ).\n"
    },
    {
        "instruction": "Make sure the following code runs without errors.",
        "input": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers\n          total += number\n      return total",
        "output": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers:\n          total += number\n      return total",
        "abap": "REPORT zexample.\n\nCLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: calculate_sum IMPORTING\n                        VALUE(numbers TYPE STANDARD TABLE OF i)\n                      RETURNING\n                        VALUE(result TYPE i).\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD calculate_sum.\n    DATA: total TYPE i.\n\n    LOOP AT numbers INTO DATA(number).\n      total + number = total.\n    ENDLOOP.\n\n    result = total.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA(numbers) TYPE STANDARD TABLE OF i VALUE '1' '2' '3'.\n  CALL METHOD lcl_example=>calculate_sum\n    EXPORTING\n      numbers        = numbers\n    IMPORTING\n      result         = DATA(result).\n\n  WRITE: / 'Result:', result.\n"
    },
    {
        "instruction": "Describe how to add an element in a linked list in Python.",
        "input": "",
        "output": "// To add an element in a linked list in Python:\n// 1. Create a new node containing the value to be added\n// 2. Set the \"next\" attribute of the new node to point to the current head node\n// 3. Set the head node to be the newly created node\n// 4. Increase the size of the linked list by 1",
        "abap": "DATA: lr_head TYPE REF TO data,\n      lr_new_node TYPE REF TO data.\n\nCREATE OBJECT lr_new_node.\nlr_new_node->set_value( value_to_be_added ).\nlr_new_node->set_next( lr_head ).\nMOVE-CORRESPONDING lr_new_node TO lr_head.\nADD 1 TO size_of_linked_list.\n"
    },
    {
        "instruction": "Write a code in ReactJS that renders the title of a given page on the screen.",
        "input": "",
        "output": "import React from \"react\";\n\nfunction App() {\n  const title = \"My Page Title\"\n\n  return (\n    <div>\n      <h1>{title}</h1>\n    </div>\n  );\n}\n\nexport default App;",
        "abap": "REPORT zmy_page_title.\n\nCLASS lcl_app DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_title\n        IMPORTING\n          VALUE(iv_title) TYPE string\n        RETURNING\n          VALUE(rv_title) TYPE string,\n      render\n        IMPORTING\n          iv_title TYPE string\n        EXPORTING\n          ev_html   TYPE string.\nENDCLASS.\n\nCLASS lcl_app IMPLEMENTATION.\n  METHOD get_title.\n    rv_title = iv_title.\n  ENDMETHOD.\n\n  METHOD render.\n    ev_html = '<div><h1>' && iv_title && '</h1></div>'.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lo_app TYPE REF TO lcl_app,\n      lv_title TYPE string.\n\nlv_title = 'My Page Title'.\nCREATE OBJECT lo_app.\nlo_app->get_title( EXPORTING iv_title = lv_title IMPORTING ev_title = DATA(lv_title) ).\nWRITE: / lv_title.\n\nLOOP AT sy-cntl INTO DATA(ls_html).\n  WRITE: / ls_html.\nENDLOOP.\n\nDATA: lv_html TYPE string,\n      lv_counter TYPE i.\n\nlv_counter = 0.\nDO.\n  lv_counter = lv_counter + 1.\n  APPEND '<h2>Counter: ' && lv_counter || '</h2>' TO lv_html.\n  IF lv_counter > 5.\n    EXIT.\n  ENDIF.\nENDDO.\n\nDATA: lo_app TYPE REF TO lcl_app,\n      lv_title TYPE string.\n\nlv_title = 'My Page Title'.\nCREATE OBJECT lo_app.\nlo_app->render(\n  EXPORTING\n    iv_title     = lv_title\n  IMPORTING\n    ev_html     = lv_html ).\n\nWRITE: / lv_html.\n"
    },
    {
        "instruction": "Change the variable `x` to the data type desired.",
        "input": "x = 'Hello World!'",
        "output": "x = \"Hello World!\"",
        "abap": "`DATA: lv_text TYPE string VALUE 'Hello World!'`."
    },
    {
        "instruction": "Generate a 15-digit random number using Python.",
        "input": "",
        "output": "import random\n\nrandom.randint(100000000000000, 999999999999999)",
        "abap": "DATA: lv_random_number TYPE i.\n\nlv_random_number = |{ sy-datum }|.\n\nDATA: lv_min TYPE i,\n      lv_max TYPE i.\n\nlv_min = 100000000000000.\nlv_max = 999999999999999.\n\nDO.\n  DATA: lv_temp TYPE i.\n\n  lv_temp = lv_min + random_int( ).\n  IF lv_temp <= lv_max.\n    EXIT.\n  ENDIF.\nENDDO.\n\nlv_random_number = lv_temp.\n\nWRITE: / lv_random_number.\n"
    },
    {
        "instruction": "Create a Java class that prints the Fibonacci sequence between 0 and 10.",
        "input": "",
        "output": "public class Fibonacci {\n\n  public static void main(String[] args) {\n    printFibonacci();\n  }\n\n  public static void printFibonacci() {\n    int n1 = 0;\n    int n2 = 1;\n    int n3;\n\n    System.out.print(n1 + \" \" + n2);\n\n    for (int i = 0; i < 8; i++) {\n      n3 = n1 + n2;\n      System.out.print(\" \" + n3);\n      n1 = n2;\n      n2 = n3;\n    }\n  }\n\n}",
        "abap": "REPORT zfibonacci.\n\nCLASS fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: method print_fibonacci IMPORTING value(iv_count) TYPE i.\nENDCLASS.\n\nCLASS fibonacci IMPLEMENTATION.\n  METHOD print_fibonacci.\n    DATA: lv_n1 TYPE i,\n          lv_n2 TYPE i,\n          lv_n3 TYPE i.\n\n    lv_n1 = 0.\n    lv_n2 = 1.\n\n    WRITE: / lv_n1, lv_n2.\n\n    DO iv_count TIMES.\n      lv_n3 = lv_n1 + lv_n2.\n      WRITE: / lv_n3.\n      lv_n1 = lv_n2.\n      lv_n2 = lv_n3.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_fibonacci TYPE REF TO fibonacci.\n\n  CREATE OBJECT lo_fibonacci TYPE fibonacci.\n  CALL METHOD lo_fibonacci->print_fibonacci EXPORTING iv_count = 8.\n"
    },
    {
        "instruction": "Consider the following program. Find out the output without running it.",
        "input": "my_list = [1, 1, 2, 3, 5, 8]\n\nfor x in my_list:\n    if x%2 == 0:\n        print(x)",
        "output": "2\n8",
        "abap": "DATA: l_number TYPE i VALUE 2,\n      l_another_number TYPE i VALUE 8.\n"
    },
    {
        "instruction": "Write a Python code to calculate the mean of a given array.",
        "input": "[1,2,3,4]",
        "output": "# calculate the mean of given array\narr = [1,2,3,4]\n\ndef calc_mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum / len(arr)\n\nprint(calc_mean(arr)) # prints 2.5",
        "abap": "REPORT zmean.\n\nTYPES: ty_arr TYPE STANDARD TABLE OF i.\n\nDATA: ls_arr TYPE ty_arr VALUE [( 1 ), ( 2 ), ( 3 ), ( 4 )].\n\nDATA: lv_sum TYPE f,\n      lv_mean TYPE f.\n\n\" calculate sum\nDO.\n  DATA: lr_num LIKE LINE OF ls_arr.\n  READ TABLE ls_arr INTO lr_num INDEX sy-index.\n  IF sy-subrc <> 0.\n    EXIT.\n  ENDIF.\n  lv_sum = lv_sum + lr_num.\nENDDO.\n\n\" calculate mean\nlv_mean = lv_sum / lines( ls_arr ).\n\nWRITE: lv_mean. \" prints 2.500000\n"
    },
    {
        "instruction": "Describe the basic syntax of a Java function?",
        "input": "",
        "output": "A Java function consists of a function name, return type, parameters (arguments), and body. The syntax of a Java function is as follows: \npublic <return type> <function name>(<list of parameters>) { \n    // function body \n    <statements> \n}",
        "abap": "public int addNumbers(int a, int b) {\n  return a + b;\n}\n"
    },
    {
        "instruction": "Write a function that checks if a give number is even or odd.",
        "input": "",
        "output": "def is_even(n):\n    if n%2 == 0:\n        return True  \n    else:\n        return False",
        "abap": "FORM z_is_even USING p_n TYPE i\n           RETURNING VALUE(r_result) TYPE abap_bool.\n\n  IF p_n MOD 2 = 0.\n    r_result = 'X'.\n  ELSE.\n    r_result = ' '.\n  ENDIF.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a C++ function to find the maximum element in an array.",
        "input": "",
        "output": "// C++ program to find maximum in arr[] of size n \n\nint arr[] = {10, 324, 45, 90, 9808}; \n\nint n = sizeof(arr)/sizeof(arr[0]); \n\nint max = arr[0];\n\n// Traverse array elements from second and \n// compare every element with current max   \nfor (int i = 1; i < n; i++) \n    if (arr[i] > max) \n        max = arr[i]; \n\nprintf(\"Maximum element = %d\", max);",
        "abap": "DATA: lt_numbers TYPE STANDARD TABLE OF i,\n      lv_max     TYPE i.\n\n\" Initialize numbers array\nlt_numbers = VALUE #( ( 10 )\n                       ( 324 )\n                       ( 45 )\n                       ( 90 )\n                       ( 9808 ) ).\n\n\" Find maximum value\nDO.\n  IF sy-index > 1. \" start from the second element (index 2)\n    lv_max = REFERENCE( val = lt_numbers[ sy-index ]\n                     subrc = 0 ).\n    IF lt_numbers[ sy-index ] > lv_max.\n      lv_max = lt_numbers[ sy-index ].\n    ENDIF.\n  ENDDO.\n\n\" Output maximum value\nWRITE: 'Maximum element = ', lv_max.\n"
    },
    {
        "instruction": "Assign the value 'Hello World' to the variable 'message'.",
        "input": "",
        "output": "message = \"Hello World\"",
        "abap": "`DATA: lv_message TYPE string.` \n`lv_message = 'Hello World'.`"
    },
    {
        "instruction": "Suppose there is an array of numbers. Write a Java program to sort the array in ascending order.",
        "input": "[3,8,5,1,2,6,4]",
        "output": "public class SortAscending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] > numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in ascending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}",
        "abap": "REPORT zsort_ascending.\n\nDATA: lt_numbers TYPE STANDARD TABLE OF i,\n      lv_temp    TYPE i.\n\nlt_numbers = VALUE #( ( 3 ) ( 8 ) ( 5 ) ( 1 ) ( 2 ) ( 6 ) ( 4 ) ).\n\nPERFORM sort_ascending USING lt_numbers CHANGING ct_sortedNumbers.\nWRITE: / 'Array elements in ascending order:'.\nLOOP AT ct_sortedNumbers INTO DATA(ls_number).\n  WRITE ls_number+0(3) RIGHT-JUSTIFIED NO-GAP.\nENDLOOP.\n\nFORM sort_ascending\n  USING    it_numbers TYPE STANDARD TABLE OF i\n  CHANGING ct_sortedNumbers TYPE STANDARD TABLE OF i.\n\n  DO.\n    READ TABLE it_numbers TRANSPORTING NO FIELDS WITH KEY table_line = it_numbers[ sy-index ] - it_numbers[ sy-index + 1 ] INTO DATA(ls_temp).\n\n    IF sy-subrc <> 0.\n      EXIT.\n    ENDIF.\n\n    DO.\n      IF ls_temp-table_line <= it_numbers[ sy-index ].\n        EXIT.\n      ELSE.\n        MOVE-CORRESPONDING it_numbers[ sy-index + 1 ] TO it_numbers[ sy-index ].\n        MODIFY TABLE ct_sortedNumbers FROM it_numbers[ sy-index ] TRANSPORTING ALL Fields.\n        READ TABLE it_numbers WITH KEY table_line = ls_temp-table_line INTO it_numbers[ sy-index + 1 ].\n      ENDIF.\n    ENDDO.\n\n  ENDDO.\nENDFORM.\n"
    },
    {
        "instruction": "Edit the following function so that it counts the even numbers in the given array.",
        "input": "arr = [1, 2, 3, 4]",
        "output": "def countEvens(arr):\n count = 0\n for num in arr:\n  if num % 2 == 0:\n   count += 1\n return count",
        "abap": "FORM count_evens USING p_arr TYPE STANDARD TABLE OF i\n                   CHANGING p_count TYPE i.\n\n  DATA: l_counter TYPE i VALUE 0.\n\n  LOOP AT p_arr INTO DATA(l_num).\n    IF sy-index MOD 2 = 0.\n      ADD 1 TO l_counter.\n    ENDIF.\n  ENDLOOP.\n\n  p_count = l_counter.\n\nENDFORM.\n"
    },
    {
        "instruction": "Construct a for loop to iterate through an array of numbers.",
        "input": "var nums = [1,2,3,4,5]",
        "output": "for(var i=0; i<nums.length; i++){\n   console.log(nums[i]);\n}",
        "abap": "DATA: lv_length TYPE i,\n       lt_nums    TYPE STANDARD TABLE OF i VALUE 0.\n\n\" Initialize the length of the internal table\nlv_length = lines( nums ).\n\nLOOP AT nums INTO DATA(lv_num) FROM 0 TO lv_length - 1.\n  WRITE: lv_num.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a Java program which takes an integer array as a parameter, sorts the array in ascending order, and returns the sorted array.",
        "input": "[3, 5, 9, 1, 6]",
        "output": "public int[] SortIntegerArray(int[] nums)\n{\n    Arrays.sort(nums);\n    return nums;\n}",
        "abap": "FORM sort_integer_array\n  USING\n    p_nums TYPE SORTED TABLE OF i.\n\n  DATA: lv_sorted_table TYPE SORTED TABLE OF i.\n\n  lv_sorted_table = p_nums.\n  SORT p_nums.\nENDFORM.\n"
    },
    {
        "instruction": "Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.",
        "input": "list_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"]",
        "output": "def list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict",
        "abap": "CLASS lcl_list_dict DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      list_dict\n        IMPORTING\n          !is_list_one TYPE ty_tab1\n          !is_list_two TYPE ty_tab2\n        EXPORTING\n          !es_result   TYPE ty_result\n          RAISING\n            cx_static_check.\n\nENDCLASS.\n\nCLASS lcl_list_dict IMPLEMENTATION.\n  METHOD list_dict.\n    DATA: lt_one TYPE STANDARD TABLE OF i,\n          lt_two TYPE STANDARD TABLE OF string,\n          ls_result LIKE LINE OF sy-lsclass.\n\n    \" Check if lists are the same length\n    IF lines( is_list_one ) <> lines( is_list_two ).\n      RAISE cx_static_check(\n        msg = 'Lists must be of the same length.'\n        id = 'ABAP'\n        type = 'CX_STATIC_CHECK' ).\n    ENDIF.\n\n    \" Fill tables with values\n    lt_one = VALUE #( FOR i IN is_list_one ( val = i ) ).\n    lt_two = VALUE #( FOR i IN is_list_two ( val = i ) ).\n\n    \" Create dictionary\n    DO.\n      DATA(lv_index) = sy-index - 1.\n      IF lv_index >= lines( lt_one ).\n        EXIT.\n      ENDIF.\n\n      ls_result-key = CONV string( sy-index - 1 ).\n      ls_result-value = CONV string( lt_two[ lv_index ] ).\n\n      APPEND ls_result TO es_result.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: BEGIN OF ty_tab1,\n         val TYPE i,\n       END OF ty_tab1,\n\n       BEGIN OF ty_tab2,\n         val TYPE string,\n       END OF ty_tab2,\n\n       BEGIN OF ty_result,\n         key TYPE string,\n         value TYPE string,\n       END OF ty_result.\n"
    },
    {
        "instruction": "Sort the given words in lexicographical order.",
        "input": "apple, cat, flower, dog",
        "output": "apple, cat, dog, flower",
        "abap": "Here are the objects you listed translated to ABAP:\n\n* apple -> OBJ apa\n* cat -> OBJ kat\n* dog -> OBJ hound\n* flower -> OBJ blume\n\nNote: In ABAP, when creating an object, we typically use a class-based approach. However, since you didn't specify a class name for each object, I used the German equivalents (APA is Apple in German)"
    },
    {
        "instruction": "Create a CSS rule that sets the font-weight of all h1 headings to bold.",
        "input": "",
        "output": "h1 {\n  font-weight: bold;\n}",
        "abap": "DATA: ls_style TYPE tytyppi.\n\nls_style-style = 'font-weight'.\n\nCASE ls_style-style.\n  WHEN 'font-weight'.\n    SET STYLE USING ls_style && 'bold'.\nENDCASE.\n"
    },
    {
        "instruction": "Create a neural network in Python to recognize handwriting.",
        "input": "MNIST hand-written digit dataset",
        "output": "The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters.",
        "abap": "# Import necessary libraries\nimport numpy as np\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom tensorflow.keras.datasets import mnist\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Preprocess the data\nx_train = x_train.reshape((-1, 28*28)).astype('float32') / 255.0\nx_test = x_test.reshape((-1, 28*28)).astype('float32') / 255.0\n\ny_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)\n\n# Split data into training and validation sets\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)\n\n# Define the model architecture\nmodel = keras.Sequential([\n    keras.layers.Dense(64, activation='relu', input_shape=(784,)),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_val, y_val))\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\nprint('Test accuracy:', test_acc)\n\n# Improve accuracy using hyperparameters tuning\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'optimizer': ['adam', 'rmsprop'],\n    'learning_rate': [0.001, 0.01],\n    'batch_size': [128, 256]\n}\n\ngrid_search = GridSearchCV(model, param_grid, cv=3, scoring='accuracy')\ngrid_search.fit(x_train, y_train)\n\nprint('Best parameters:', grid_search.best_params_)\nprint('Best score:', grid_search.best_score_)\n\n# Use the best model to evaluate on test data\nbest_model = grid_search.best_estimator_\ntest_loss, test_acc = best_model.evaluate(x_test, y_test)\nprint('Test accuracy with best model:', test_acc)\n"
    },
    {
        "instruction": "Calculate the sum of the numbers in the array [1, 5, 7, 10]",
        "input": "",
        "output": "# Define the array\narr = [1, 5, 7, 10]\n\n# Calculate the sum\nsum = sum(arr)\n\n# Print the result\nprint(\"The sum of the numbers in the array is \" + str(sum) + \".\")",
        "abap": "DATA: arr TYPE STANDARD TABLE OF i,\n      sum  TYPE i.\n\n\" Define the array\narr = value #( 1 5 7 10 ).\n\n\" Calculate the sum\nsum = reducer( REDUCE val ADD assignment #(\n            initializing-value = 0\n            into-value = sum\n            for table = arr\n        ) ).\n\n\" Print the result\nWRITE: / 'The sum of the numbers in the array is ', sum.\n"
    },
    {
        "instruction": "Generate a 5-element tuple of random numbers between 5 and 15 using Python.",
        "input": "",
        "output": "import random\n\nrandom_tuple = tuple(random.randint(5, 15) for _ in range(5))",
        "abap": "DATA: lv_random_tuple TYPE STANDARD TABLE OF i.\n\nLOOP AT sy-dbcnt INTO DATA(lv_counter).\n  APPEND val = random_int( lower = 5 upper = 15 ) TO lv_random_tuple.\n  IF sy-dbcnt = 5. \" stop after 5 iterations\n    EXIT.\n  ENDIF.\nENDLOOP.\n\nWRITE: / lv_random_tuple.\n"
    },
    {
        "instruction": "Rewrite the following C++ code using only pointer references instead of array subscripts:",
        "input": "int arr[3] = {1,2,3};\nint sum = 0;\nfor (int i = 0; i < 3; i++) \n{\n    sum += arr[i];\n}",
        "output": "int arr[3] = {1,2,3};\nint sum = 0;\nint* ptr = arr;\nfor (int i = 0; i < 3; i++) \n{\n    sum += *(ptr+i); \n}",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i WITH 3,\n      lv_sum TYPE i,\n      lv_ptr TYPE REF TO data.\n\nlv_arr = value #( ( 1 ) ( 2 ) ( 3 ) ).\nlv_sum = 0.\nlv_ptr = REF #( lv_arr ).\n\nDO 3 TIMES.\n  lv_sum = lv_sum + lv_ptr->*.\nENDDO.\n"
    },
    {
        "instruction": "Write a short JavaScript code snippet to detect a browser language and display a response message in that particular language.",
        "input": "",
        "output": "// get the current browser language\nvar language = navigator.language || navigator.userLanguage;\n\nif (language === \"en\") {\n    console.log(\"Hello, welcome to the website!\");\n} \nelse if (language === \"de\") {\n    console.log(\"Hallo, willkommen auf der Webseite!\");\n}\nelse if (language === \"fr\") {\n    console.log(\"Bonjour, bienvenue sur le site Web!\");\n}\nelse {\n    console.log(\"Welcome to the website!\");\n}",
        "abap": "DATA: lv_language TYPE string.\n\n\" get the current browser language\nlv_language = `# LANGUAGE `.\n\nIF lv_language = 'en'.\n  WRITE: / 'Hello, welcome to the website!'.\nELSEIF lv_language = 'de'.\n  WRITE: / 'Hallo, willkommen auf der Webseite!'.\nELSEIF lv_language = 'fr'.\n  WRITE: / 'Bonjour, bienvenue sur le site Web!'.\nELSE.\n  WRITE: / 'Welcome to the website!'.\nENDIF.\n"
    },
    {
        "instruction": "Write a JavaScript code snippet to print the numbers from 1 to 10.",
        "input": "",
        "output": "for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}",
        "abap": "DATA: lv_counter TYPE i.\n\nDO 10 TIMES.\n  WRITE: / lv_counter.\n  ADD 1 TO lv_counter.\nENDDO.\n"
    },
    {
        "instruction": "Edit the following code to remove the bugs.",
        "input": "def reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(\u201ctest\u201d))",
        "output": "def reverse_string(user_string): \n  reversed_string = ''\n  if len(user_string) == 0: \n    return \"\" \n  else: \n    reversed_string = reverse_string(user_string[1:]) + user_string[0] \n    return reversed_string\n\nuser_string = 'test'\nprint(reverse_string(user_string))",
        "abap": "REPORT zreverse_string.\n\nDATA:\n  lv_user_string TYPE string,\n  lv_reversed_string TYPE string.\n\nINITIALIZATION.\nlv_user_string = 'test'.\n\nAT EXIT.\n  WRITE: / lv_reversed_string.\nEND-OF-PAGINATION.\n"
    },
    {
        "instruction": "Write code to remove all occurrences of a given element from a list",
        "input": "",
        "output": "def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list",
        "abap": "TYPES: ty_element TYPE string.  \" Define a type for the element to remove\nTYPES: ty_list TYPE STANDARD TABLE OF ty_element.\n\nCLASS-lc_remove_element DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_element\n        IMPORTING\n          it_list     TYPE ty_list  \" The list from which to remove elements\n          iv_element  TYPE ty_element  \" The element to remove\n        EXPORTING\n          et_filtered TYPE ty_list  \" The filtered list\n        RAISING\n          cx_static_check.\nENDCLASS.\n\nCLASS-lc_remove_element IMPLEMENTATION.\n  METHOD remove_element BY OBJECT.\n    DATA: lt_filtered TYPE ty_list.  \" Create a work area for the filtered list\n\n    LOOP AT it_list INTO DATA(ls_item).  \" Loop over the original list\n      IF ls_item <> iv_element.  \" If an item is not equal to the element to remove, add it to the filtered list\n        APPEND ls_item TO lt_filtered.\n      ENDIF.\n    ENDLOOP.\n\n    et_filtered = lt_filtered[].  \" Set the filtered list as output parameter\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Add the code for a sleep() function to the following script.",
        "input": "#This script will be used to write a status update in Slack.\nimport os\n\ndef update_status(message):\n    os.system('curl -X POST --data '{ \"text\": \"' + message + '\"}'' .....)",
        "output": "#This script will be used to write a status update in Slack.\nimport os\nimport time\n\ndef update_status(message):\n    os.system('curl -X POST --data '{ \"text\": \"' + message + '\"}'' .....)\n    time.sleep(1)",
        "abap": "REPORT zslack_update_status.\n\nTYPES: ty_slack_message TYPE string.\n\nDATA: lv_message TYPE ty_slack_message,\n      lv_url     TYPE string,\n      lv_response TYPE string.\n\n\" Define the Slack API endpoint and parameters\nlv_url = 'https://slack.com/api/chat.postMessage'.\n\n\" Create a data structure to hold the message\nDATA: ls_data TYPE tihttprequest=>request_header.\nls_data-set_method = 'POST'.\nls_data-header_accept = 'application/json; charset=utf-8'.\nls_data-header_content_type = 'application/x-www-form-urlencoded'.\n\n\" Define the message to be sent\nlv_message = |{ \"text\": \"{ lv_message }\" }|.\n\n\" Create an HTTP request and send it to Slack\nDATA: lo_http_client TYPE REF TO if_http_client,\n      lo_response    TYPE REF TO cl_http_response.\nTRY.\n    lo_http_client = cl_http_client_factory=>create_id( host_url = lv_url ).\n    lo_http_client->request(lv_message).\n    lo_http_client->send( receiver = ls_data ).\n    lo_http_client->receive(\n        by_object      =\n        by_data         =\n        exception_check =\n        receiver        =\n    \t).\n\n    \" Get the response\n    lo_response = lo_http_client->response.\n    lv_response = cl_http_utility=>if_http_utility~if_http_status=>status_success( ).\n  CATCH cx_no_check.\n\n  DATA: lx_error TYPE REF TO cx_static_check.\n  IF sy-subrc <> 0.\n      WRITE:/ 'Error sending HTTP request'.\n      RETURN.\n  ENDIF.\n\nENDTRY.\n\n\" Wait for a short period of time\nWAIT UP TO 1 SECONDS.\n\n\" Do something with the response (e.g. print it)\nWRITE: / lv_response.\n"
    },
    {
        "instruction": "Create a class Employee with constructor to initialize the instance variables _name and _age",
        "input": "",
        "output": "class Employee {\n    \n    private String _name;\n    private int _age;\n    \n    public Employee(String name, int age) {\n        this._name = name;\n        this._age = age;\n    }\n    \n    public String getName() {\n        return _name;\n    }\n    \n    public int getAge() {\n        return _age;\n    }\n}",
        "abap": "CLASS lcl_employee DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n\n    METHODS:\n      constructor\n        IMPORTING\n          name TYPE string\n          age   TYPE i,\n\n      get_name\n        RETURNING\n          VALUE(rv_name) TYPE string,\n      get_age\n        RETURNING\n          VALUE(rv_age) TYPE i.\nENDCLASS.\n\nCLASS lcl_employee IMPLEMENTATION.\n  METHOD if_oo_adt_classrun~main.\n    DATA: lo_employee TYPE REF TO lcl_employee.\n\n    CREATE OBJECT lo_employee\n      EXPORTING\n        name = 'John Doe'\n        age   = 30.\n\n    WRITE: / |Name: { lo_employee->get_name( ) }|.\n    WRITE: / |Age: { lo_employee->get_age( ) }|.\n  ENDMETHOD.\n\n  METHOD constructor.\n    me-name = name.\n    me-age = age.\n  ENDMETHOD.\n\n  METHOD get_name.\n    rv_name = me-name.\n  ENDMETHOD.\n\n  METHOD get_age.\n    rv_age = me-age.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Describe the details of the try-except statement in Python.",
        "input": "",
        "output": "The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the \"try\" block and the code that is executed if an exception is raised is placed in the \"except\" block. The \"Except\" block is also used to catch a specific exception and handle it accordingly.",
        "abap": "TRY.\n  \" Code that has a potential for raising an exception\n  DATA: lv_variable TYPE string.\n\n  lv_variable = \"Some value\".\n\n  IF lv_variable IS INITIAL.\n    RAISE EXCEPTION TYPE zcx_custom_exception MESSAGE 'Variable is empty' .\n  ENDIF.\n\nCATCH cx_root INTO DATA(lo_exception).\n  \" Handle the exception that was raised\n  WRITE: / lo_exception->if_message~text.\nENDTRY.\n"
    },
    {
        "instruction": "Edit this JavaScript code to use the correct syntax for the switch statement.",
        "input": "if (action == 'play') {\n  console.log('Playing...');\n} else if (action == 'stop') {\n  console.log('Stopping...');\n} else {\n  console.log('Undefined action');\n}",
        "output": "switch (action) {\n  case 'play':\n    console.log('Playing...');\n    break;\n  case 'stop':\n    console.log('Stopping...');\n    break;\n  default:\n    console.log('Undefined action'); \n}",
        "abap": "DATA: ls_action TYPE string.\n\nls_action = action.\nCASE ls_action.\n  WHEN 'PLAY'.\n    WRITE: / 'Playing...'.\n  WHEN 'STOP'.\n    WRITE: / 'Stopping...'.\n  WHEN OTHERS.\n    WRITE: / 'Undefined action'.\nENDCASE.\n"
    },
    {
        "instruction": "Given a list of strings, write a code to find the longest string.",
        "input": "lst = ['one', 'two', 'three', 'four', 'five']",
        "output": "# initial max length\nmax_length = 0\n# empty string to store the max length string\nmax_str = ''\n\n# iterate through the list\nfor string in lst:\n    # get the length\n    length = len(string)\n    # update the max length\n    if length > max_length:\n        # get the string\n        max_str = string\n        # update max length\n        max_length = len(string)\n\nprint(max_str)",
        "abap": "DATA: max_length TYPE i,\n      max_str   TYPE string.\n\nLOOP AT itab INTO DATA(line).\n  IF strlen( line ) > max_length.\n    max_str = line.\n    max_length = strlen( line ).\n  ENDIF.\nENDLOOP.\n\nWRITE: / max_str.\n"
    },
    {
        "instruction": "Write a JavaScript function to convert an array of strings to a comma-separated string.",
        "input": "arr = [\"this\", \"is\", \"a\", \"test\"]",
        "output": "//Function to convert an array of strings to a comma-separated string\nfunction arr_to_csv(arr) {\n    return arr.join(\",\");\n}\n\n// Testing code\nconsole.log(arr_to_csv(arr));",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      convert_array_to_csv\n        IMPORTING\n          iv_arr TYPE string_t\n        RETURNING\n          VALUE(rv_csv_string) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD convert_array_to_csv.\n    DATA: lv_csv_string TYPE string.\n\n    IF iv_arr IS NOT INITIAL.\n      lv_csv_string = join( val = iv_arr sep = ',' ).\n    ENDIF.\n\n    rv_csv_string = lv_csv_string.\n  ENDMETHOD.\n\nENDCLASS.\n\nDATA: lt_example TYPE STANDARD TABLE OF string,\n      ls_example LIKE LINE OF lt_example,\n      lv_csv_string TYPE string.\n\nlt_example = VALUE #( ( 'Hello' ) ( 'World' ) ).\n\nlv_csv_string = lcl_example=>convert_array_to_csv( lt_example ).\n\nWRITE: lv_csv_string.\n"
    },
    {
        "instruction": "Create a function in Python that prints out a stringified version of a list.",
        "input": "[1, 4, 6, 8]",
        "output": "def print_str_list(in_list):\n    \"\"\"This function takes a list and returns a stringified version of it\"\"\"\n    return \" \".join(str(x) for x in in_list)",
        "abap": "CLASS lcl_print_str_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      print_str_list\n        IMPORTING\n          ip_in_list TYPE STANDARD TABLE OF string\n        RETURNING\n          VALUE(ro_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_print_str_list IMPLEMENTATION.\n  METHOD print_str_list.\n    DATA: lv_result TYPE string,\n          ls_string TYPE string.\n\n    LOOP AT ip_in_list INTO ls_string.\n      IF NOT sy-index IS INITIAL.\n        CONCATENATE ro_result ' ' ls_string INTO ro_result.\n      ELSE.\n        ro_result = ls_string.\n      ENDIF.\n    ENDLOOP.\n\n    \" Alternative solution\n    DATA: lv_alternative TYPE abap_string_table. .\n    \" Convert the table to a string using a single line of code:\n    LOOP AT ip_in_list INTO ls_string.\n      APPEND ls_string TO lv_alternative.\n    ENDLOOP.\n    ro_result = table_to_string( val = lv_alternative ).\n  ENDMETHOD.\n\nFORM table_to_string\n  USING\n    val TYPE abap_string_table\n  VALUE(result) TYPE string .\n  LOOP AT val ASSIGNING FIELD-SYMBOL(<fs>).\n    result = |{ result } { <fs> }|.\n  ENDLOOP.\nENDFORM.\n"
    },
    {
        "instruction": "Write an SQL query to get the sum of the values in a column.",
        "input": "tableName: myTable\ncolumnName: myColumn",
        "output": "SELECT SUM(myColumn) FROM myTable",
        "abap": "DATA: lv_sum TYPE i.\nSELECT SUM myColumn INTO lv_sum\n  FROM myTable.\n"
    },
    {
        "instruction": "Train a sentiment classification model on the given data.",
        "input": "Training Data:\n\nI love this new phone!  Positive\nThis phone is terrible!  Negative",
        "output": "import nltk \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# Preprocess data\ntraining_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]\nall_words = []\ndocuments = []\nfor (sent, category) in training_data:\n    words = word_tokenize(sent)\n    words = [word.lower() for word in words if word not in stopwords.words()]\n    documents.append((words, category))\n    all_words.extend(words)\n\n# Create feature set\ndistinct_words = set(all_words)\nfeature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]\n\n# Train model\nclassifier = nltk.NaiveBayesClassifier.train(feature_set)",
        "abap": "REPORT znaive_bayes_classifier.\n\nTYPES: BEGIN OF ty_word,\n         word TYPE string,\n       END OF ty_word.\nTYPES: BEGIN OF ty_document,\n         words TYPE STANDARD TABLE OF ty_word,\n         category TYPE string,\n       END OF ty_document.\n\nDATA: ls_training_data TYPE ty_document,\n      lt_documents TYPE STANDARD TABLE OF ty_document,\n      lt_stop_words TYPE tiwbk_stops,\n      lt_all_words TYPE STANDARD TABLE OF string,\n      lt_feature_set TYPE STANDARD TABLE OF ty_document.\n\n\" Load stopwords\nCALL FUNCTION 'IW15_GET_STOP_WORDS'\n  EXPORTING\n    language        = 'E' \" german\n    table_name      = 'LSTIWBK Stops'\n    max_rows_displayed = ''\n  IMPORTING\n    it_stops         =\n      VALUE #( BASE it_stops\n               ( word1 = '' )\n               ( word2 = '' ) ).\nlt_stop_words = it_stops.\n\n\" Preprocess data\nLOOP AT training_data INTO ls_training_data.\n  DATA: lv_sent TYPE string,\n        lt_words TYPE STANDARD TABLE OF string.\n\n  lv_sent = ls_training_data-category.\n  SPLIT val WORDS at space INTO TABLE lt_words.\n  DELETE lt_words INDEX sy-tfill. \" remove trailing space\n\n  LOOP AT lt_words INTO DATA(ls_word).\n    IF NOT ls_word+0(2) CS lt_stop_words-words[]. \" check if not stopwords\n      DATA(lv_lowered) = ls_word+0(2) CA 'aeiou'.\n      SPLIT val WORDS at lv_lowered INTO TABLE lt_words.\n      DELETE lt_words INDEX sy-tfill. \" remove trailing space\n    ENDIF.\n  ENDLOOP.\n\n  INSERT VALUE #( words = lt_words category = ls_training_data-category ) INTO table lt_documents.\n\n  LOOP AT lt_words INTO DATA(ls_word).\n    APPEND ls_word TO lt_all_words.\n  ENDLOOP.\n\n  MODIFY table lt_feature_set FROM ( VALUE #( FOR i IN lt_documents\n                                             ( words = VALUE #( FOR j IN lt_documents[i]-words\n                                                                 ( VALUE #( word1 = j+0(2) CA 'aeiou' ) ) )\n                                               category = lt_documents[i]-category ) ) ).\n\nENDLOOP.\n\n\" Create feature set\nDATA: ls_feature TYPE ty_document,\n      lt_distinct_words TYPE STANDARD TABLE OF string.\nLOOP AT lt_all_words INTO DATA(ls_word).\n  IF NOT ls_word+0(2) CS lt_stop_words-words[]. \" check if not stopwords\n    INSERT ls_word INTO table lt_distinct_words.\n  ENDIF.\nENDLOOP.\n\nMODIFY table lt_feature_set FROM ( VALUE #( FOR i IN lt_documents\n                                           ( words = VALUE #( FOR j IN lt_document[i]-words\n                                                               ( VALUE #( FOR k IN lt_distinct_words\n                                                                            ( word1 = j+0(2) CA 'aeiou' ) ) ) )\n                                             category = lt_documents[i]-category ) ).\n\n\" Train model\nDATA: ls_model TYPE ty_document,\n      ls_category TYPE string.\nLOOP AT lt_feature_set INTO DATA(ls_feature).\n  APPEND VALUE #( words = VALUE #( FOR i IN ls_feature-words\n                                  ( word1 = i+0(2) CA 'aeiou' ) )\n                category = ls_feature-category ) TO lt_documents.\n\nDATA: lv_class TYPE REF TO cl_document_classifier,\n      lt_model TYPE STANDARD TABLE OF string.\nlv_class = NEW cl_document_classifier( ).\n\nCLASS-document_classifier DEFINITION DEFERRED.\n\nCLASS document_classifier DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      train\n        CHANGING\n          cv_feature_set TYPE STANDARD TABLE OF ty_document ).\nENDCLASS.\n\nCLASS document_classifier IMPLEMENTATION.\nMETHOD train.\n  lt_model = VALUE #( FOR i IN cv_feature_set\n                      ( FOR j IN i-words\n                        ( word1 = j+0(2) CA 'aeiou' ) ) ).\nENDMETHOD.\n"
    },
    {
        "instruction": "Create a Java program to take a given string and replace all occurrences of a given letter with another given letter",
        "input": "'bbac', 'b', 'a'",
        "output": "public String ReplaceLetters(String str, char oldChar, char newChar) {\n    return str.replace(oldChar, newChar);\n}",
        "abap": "FORM replace_letters\n  CHANGING\n    cs_string TYPE string.\n\n  DATA: lv_new_char TYPE c,\n        lv_old_char TYPE c.\n\n  MOVE old_char TO lv_old_char.\n  MOVE new_char TO lv_new_char.\n\n  cs_string = cs_string-ca-replace( val = lv_old_char WITH lv_new_char ).\n\nENDFORM.\n"
    },
    {
        "instruction": "What data type should you use to store a list like [4, 7, 2] in a Python variable?",
        "input": "",
        "output": "The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2].",
        "abap": "   TYPES: BEGIN OF ty_list,\n           value TYPE i,\n         END OF ty_list.\n   \n   DATA: my_list TYPE STANDARD TABLE OF ty_list.\n   \n   APPEND VALUE #( value = 4 ) TO my_list.\n   APPEND VALUE #( value = 7 ) TO my_list.\n   APPEND VALUE #( value = 2 ) TO my_list.\n   "
    },
    {
        "instruction": "Create a C++ program for randomly shuffling an array of integers.",
        "input": "",
        "output": "#include <iostream>\n#include <algorithm>\n#include <random>\n\nvoid shuffleArray(int array[], int size) {\n\tstd::random_device rd;\n\tstd::mt19937 g(rd()); \n\tstd::shuffle(array, array+size, g); \n}\n\nint main() \n{ \n\tint array[] = {1, 2, 3, 4, 5, 6, 7, 8}; \n\tint size = sizeof(array) / sizeof(array[0]); \n\n    // Print original array\n    std::cout << \"Original array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n    // Shuffle array\n\tshuffleArray(array, size); \n\n    // Print shuffled array\n    std::cout << \"Shuffled array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n\treturn 0; \n}",
        "abap": "REPORT zshuffle_array.\n\nCLASS lcl_shuffle DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      shuffle_array IMPORTING\n        it_array TYPE int4_t\n        p_size   TYPE i\n      RAISING\n        cx_static_check\n      .\nENDCLASS.\n\nCLASS lcl_shuffle IMPLEMENTATION.\n  METHOD shuffle_array.\n    DATA: lt_ran TYPE STANDARD TABLE OF ref #( val = cl_abap_random=>randomize( seed = sy-uzeit ) ).\n\n    IF it_array IS INITIAL OR p_size <= 0.\n      RAISE cx_static_check.\n    ENDIF.\n\n    LOOP AT it_array REFERENCE INTO DATA(lr_element).\n      APPEND VALUE #( new = lr_element#ref-cast( cl_abap_random=>randomize( seed = sy-uzeit ) ) ) TO lt_ran.\n    ENDLOOP.\n\n    SORT lt_ran BY value #( val = cl_abap_random=>randomize( seed = sy-uzeit ) ).\n\n    it_array[] = VALUE #( FOR i = 1 UNTIL i > p_size ( REF lran[ i - 1 ] ) ).\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_shuffle TYPE REF TO lcl_shuffle,\n      it_array   TYPE int4_t.\n\nCREATE OBJECT lo_shuffle.\n\nit_array = VALUE #( 1, 2, 3, 4, 5, 6, 7, 8 ).\n\nWRITE: / 'Original array:'.\nLOOP AT it_array INTO DATA(l_element).\n  WRITE l_element.\nENDLOOP.\n\nlo_shuffle->shuffle_array(\n  EXPORTING\n    p_size   = lines( it_array )\n    it_array = it_array ).\n\nWRITE: / 'Shuffled array:'.\nLOOP AT it_array INTO l_element.\n  WRITE l_element.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a Python program to print out an ASCII art of a given word.",
        "input": "word = \"happy\"",
        "output": "def draw_word(word):\n    art = \"\"\"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n        \"\"\"\n    for letter in word:\n        art += \"  \" + letter\n    print(art)",
        "abap": "CLASS lcl_word_drawer DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      draw_word\n        IMPORTING\n          value(word TYPE string )\n        RAISING\n          OTHERS.\nENDCLASS.\n\nCLASS lcl_word_drawer IMPLEMENTATION.\n  METHOD draw_word.\n    DATA: lv_art TYPE string,\n          lv_letter TYPE c,\n          lv_index TYPE i.\n\n    \" Predefined art\n    lv_art = \"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n\n\".\n\n    LOOP AT word INTO lv_letter.\n      TRANSFER lv_letter TO lv_art FROM lv_index(1) + 5.\n    ENDLOOP.\n\n    WRITE: / lv_art.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "What is the purpose of an abstract data type in software engineering?",
        "input": "",
        "output": "The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development.",
        "abap": "\" Abstract Data Type (ADT)\n\"\nTYPE-POOLS adt.\n\nCLASS zadt DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ooad_data_definition.\nENDCLASS.\n\nCLASS zadt IMPLEMENTATION.\n  METHOD if_ooad_data_definition~get_data_type.\n    \" implementation of the interface\n  ENDMETHOD.\n\nCLASS ladt DEFINITION INHERITING FROM zadt.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_instance RETURN TYPE REF TO ladt,\n      get_behavior  IMPORTING data_structure TYPE ANY TYPE  RETURN VALUE TYPE IF_OOAD_DATA_DEFINITION~DATA_TYPE.\nENDCLASS.\n\nCLASS ladt IMPLEMENTATION.\n  METHOD create_instance.\n    \" implementation of the class\n  ENDMETHOD.\n\n  METHOD get_behavior.\n    \" return the behavior associated with the data structure\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Format this JSON data as per a specific schema.",
        "input": "{\n    \"name\": \"John\",\n    \"age\": 20,\n    \"height_cm\": 178,\n    \"weight_kg\": 73\n}",
        "output": "{\n    \"name\": \"John\",\n    \"age\": 20,\n    \"info\": {\n        \"height_cm\": 178,\n        \"weight_kg\": 73\n    }\n}",
        "abap": "DATA: ls_person TYPE ty_person.\n\nTYPES: BEGIN OF ty_info.\n        height_cm   TYPE i,\n        weight_kg   TYPE f,\n      END OF ty_info.\n\nTYPES: BEGIN OF ty_person.\n        name    TYPE string,\n        age     TYPE i,\n        info    TYPE ty_info,\n      END OF ty_person.\n\nls_person-name = 'John'.\nls_person-age  = 20.\nls_person-info-height_cm = 178.\nls_person-info-weight_kg = 73.\n\nOUT-EDIT: ls_person.\n"
    },
    {
        "instruction": "Write a C++ class to represent a date.",
        "input": "",
        "output": "class Date \n{\nprivate:\n    int day;\n    int month;\n    int year;\n\npublic:\n    Date(int day, int month, int year); \n\n    int getDay() const; \n    int getMonth() const;\n    int getYear() const;\n\n    void setDay(int day);\n    void setMonth(int month);\n    void setYear(int year);\n};",
        "abap": "CLASS lcl_date DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n\n    CLASS-METHOD: get_date IMPORTING day TYPE i month TYPE i year TYPE i\n                                  EXPORTING date TYPE lcl_date\n                          RAISING no_date_found.\n\n    CLASS-METHOD: get_day IMPORTING date TYPE lcl_date\n                            RETURNING value( value ) TYPE i.\n    CLASS-METHOD: get_month IMPORTING date TYPE lcl_date\n                               RETURNING value( value ) TYPE i.\n    CLASS-METHOD: get_year IMPORTING date TYPE lcl_date\n                             RETURNING value( value ) TYPE i.\n\n    METHODS:\n      constructor\n        IMPORTING\n          day   TYPE i\n          month TYPE i\n          year  TYPE i,\n\n      set_day IMPORTING day TYPE i,\n      set_month IMPORTING month TYPE i,\n      set_year IMPORTING year  TYPE i.\nENDCLASS.\n\nCLASS lcl_date IMPLEMENTATION.\n  METHOD if_oo_adt_classrun~execute_callback.\n    DATA: lr_date TYPE REF TO lcl_date.\n\n    CREATE OBJECT lr_date\n      EXPORTING\n        day   = 12\n        month = 10\n        year  = 2022.\n\n    GET DAY FROM DATE lr_date INTO DATA(lv_day).\n    GET MONTH FROM DATE lr_date INTO lv_month.\n    GET YEAR FROM DATE lr_date INTO lv_year.\n\n    WRITE: / 'Day: ', lv_day,\n           / 'Month: ', lv_month,\n           / 'Year:', lv_year.\n  ENDMETHOD.\n\n  METHOD get_date.\n    DATA: lr_date TYPE REF TO lcl_date.\n\n    CREATE OBJECT lr_date\n      EXPORTING\n        day   = day\n        month = month\n        year  = year.\n\n    date = lr_date.\n  ENDMETHOD.\n\n  METHOD get_day.\n    GET DAY FROM DATE date INTO value( value ).\n  ENDMETHOD.\n\n  METHOD get_month.\n    GET MONTH FROM DATE date INTO value( value ).\n  ENDMETHOD.\n\n  METHOD get_year.\n    GET YEAR FROM DATE date INTO value( value ).\n  ENDMETHOD.\n\n  METHOD set_day.\n    date-day = day.\n  ENDMETHOD.\n\n  METHOD set_month.\n    date-month = month.\n  ENDMETHOD.\n\n  METHOD set_year.\n    date-year = year.\n  ENDMETHOD.\n\n  METHOD constructor.\n    day   = day.\n    month = month.\n    year  = year.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Design a JSON structure including a \"name\" field and a \"date\" field.",
        "input": "",
        "output": "{\"name\": \"\", \"date\": \"\"}",
        "abap": "TYPES: BEGIN OF ty_data,\n          name TYPE string,\n          date  TYPE dats,\n        END OF ty_data.\n\nDATA: lr_xml_document TYPE REF TO if_ixml_document,\n      lt_data TYPE STANDARD TABLE OF ty_data.\n\n\" assume lr_xml_document has been populated with JSON data\n\nTRY.\n    DATA(lr_json_reader) = json->deserialize( val = lr_xml_document ).\n    lt_data = VALUE #( FOR d IN lr_json_reader->data READ AS JSON .\n                        ( name = cl_abap_json=>json->value_to_string(\n                            obj  = d[\"name\"]\n                          )\n                          date = d[\"date\"]-as_date\n                        ) ).\n  CATCH cx_json INTO DATA(lr_json_exc).\n    \" handle JSON exception\nENDTRY.\n"
    },
    {
        "instruction": "Create a function in JavaScript to check if an array is empty.",
        "input": "",
        "output": "function isArrayEmpty(arr) {\n    return arr.length === 0;\n}",
        "abap": "FUNCTION z_is_array_empty\n  IMPORTING\n    VALUE( iv_arr ) TYPE STANDARD TABLE OF ANY\n  RETURNING\n    VALUE( rv_result ) TYPE abap_bool.\n\n  \" Check if array is empty\n  rv_result = iv_arr IS INITIAL.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Create a pandas dataframe from the following dictionary.",
        "input": "data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, 18, 24]}",
        "output": "import pandas as pd\n\ndf = pd.DataFrame(data)",
        "abap": "DATA: lr_data TYPE STANDARD TABLE OF ty_data.\n\n...  \" assume you have a type definition for ty_data\n\nlr_data = VALUE #( ) .\n\n\" assume data has been populated into lr_data...\ncl_abap_typedescr=>describe_by_object_ref(\n  EXPORTING\n    description        = lr_data\n    ignore_constants   = abap_true\n    ignore_deletions   = abap_true\n    ignore_database    = abap_true\n    ignore_redefines   = abap_true\n    ignore_conversions = abap_true\n  IMPORTING\n    typedesc           = DATA(lr_type_descr) ).\n\nDATA: lr_table TYPE STANDARD TABLE OF ty_data.\n\nlr_table = VALUE #( FOR item IN lr_data ( item ) ).\n\n\" or, alternatively:\n\" lr_table[] = lr_data.\n"
    },
    {
        "instruction": "Convert this number from decimal to binary.",
        "input": "128",
        "output": "10000000",
        "abap": "DATA: lv_value TYPE i,\n      lv_binary TYPE string.\n\nlv_binary = '11001101'. \" Binary representation of the decimal value\nDO.\n  WHILE lv_binary IS NOT INITIAL.\n    lv_value = lv_value * 2 + lv_binary(1).\n    DELETE lv_binary INDEX 1.\n  ENDDO.\nEND-TRY. \" If an exception is raised, this will handle it\n\nWRITE: / 'Decimal Value:', lv_value. \" Outputs the decimal equivalent of the binary number\n"
    },
    {
        "instruction": "Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference.",
        "input": "",
        "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self): \n        return self.radius ** 2 * 3.14 \n    def circumference(self): \n        return 2 * self.radius * 3.14",
        "abap": "CLASS lcl_circle DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      constructor IMPORTING radius TYPE i,\n      get_area RETURNING VALUE(result) TYPE f,\n      get_circumference RETURNING VALUE(result) TYPE f.\nENDCLASS.\n\nCLASS lcl_circle IMPLEMENTATION.\n  METHOD constructor.\n    me->radius = radius.\n  ENDMETHOD.\n\n  METHOD get_area.\n    result = pi * me->radius ** 2.\n  ENDMETHOD.\n\n  METHOD get_circumference.\n    result = 2 * pi * me->radius.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Suggest an algorithm for sorting a list of integers.",
        "input": "[7, 4, 5, 10, 3]",
        "output": "// Bubble Sort Algorithm\n// Set a flag to indicate whether there are any swaps during the current iteration\n// Initialize the flag to false and iterate until the flag turns true\n// During the iteration, compare each pair of adjacent elements and swap them if necessary\n// After each iteration, set the flag to false\n// If it is still false after iteration, break the loop since the list must be sorted\n\nvar list = [7, 4, 5, 10, 3];\nvar flag = false;\nwhile (flag === false) {\n    flag = true;\n    for (var i=0; i<list.length -1; i++) {\n        if (list[i] > list[i+1]) {\n            var temp = list[i];\n            list[i] = list[i+1];\n            list[i+1] = temp;\n            flag = false;\n        }\n    }\n}\nconsole.log(list); // prints [3, 4, 5, 7, 10]",
        "abap": "DATA: lv_list TYPE standard table OF i,\n      lv_flag  TYPE abap_bool.\n\n\" Initialize list\nlv_list = value #( ( 7 ) ( 4 ) ( 5 ) ( 10 ) ( 3 ) ).\n\nlv_flag = abap_true. \" Initial flag set to True\n\nWHILE lv_flag <> abap_false.\n    lv_flag = abap_true.\n    DO.\n      DATA: lv_i TYPE i,\n            lv_temp TYPE i.\n\n      LOOP AT lv_list INTO DATA(lv_item) FROM index 0 LEAVING \"Skip last element\n        WHEN sy-index - 1.\n\n        IF lv_item > lv_item + 1 - sy-index.\n          lv_temp = lv_item.\n          lv_item = lv_item + 1 - sy-index.\n          lv_item + 1 - sy-index = lv_temp.\n\n          CLEAR: lv_flag. \" Reset flag if swap occurred\n          EXIT. \" Exit inner loop after swap\n\n        ENDIF.\n\n      ENDDO.\n\n      IF lv_flag <> abap_false. \" Exit outer loop if no swaps were made\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n  ENDWHILE.\n\nWRITE: / lv_list. \" prints [3, 4, 5, 7, 10]\n"
    },
    {
        "instruction": "Follow the comments in the code to complete the program which prints a conversion table from Fahrenheit to Celsius.",
        "input": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\n# TODO\n\n# Print the column headings\n# TODO\n\n# Calculate and print the table body\n# TODO",
        "output": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\nprint(\"Fahrenheit to Celsius Conversion Table\")\n\n# Print the column headings\nprint(\"Fahrenheit \\t Celsius\")\n\n# Calculate and print the table body\nfor fahr in range(-50 , 121):\n  celsius = (fahr - 32) * 5 / 9\n  print(\"%3d \\t\\t %.2f\" % (fahr, celsius))",
        "abap": "REPORT ztemp.\n\n\" Print a heading for the table\nWRITE: 'Fahrenheit to Celsius Conversion Table'.\n\n\" Print the column headings\nWRITE:/ 'Fahrenheit' || '  Celsius'.\n\n\" Calculate and print the table body\nDO.\n  DATA(fahr) = sy-index - 1.\n  IF fahr < -50 OR fahr > 120.\n    LEAVE TO SCREEN.\n  ENDIF.\n\n  \" Calculate celsius in ABAP is a bit more complex than Python or Java\n  DATA(celsius TYPE p DECIMAL32 2 VALUE '0').\n  celsius = ( fahr - 32 ) * 5 / 9 .\n\n  WRITE:/ |{ fahr:3 }| { celsius:6 }.\n\n  ENDDO.\n"
    },
    {
        "instruction": "Find the longest common substring between two strings.",
        "input": "s1 = \"Tangible\"\ns2 = \"Non-Tangible\"",
        "output": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))",
        "abap": "REPORT zlongest_common_substring.\n\nCLASS lcl_longest_common_substring DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      longest_common_substring\n        IMPORTING\n          it_s1 TYPE string\n          it_s2 TYPE string\n        EXPORTING\n          result TYPE string .\nENDCLASS.\n\nCLASS lcl_longest_common_substring IMPLEMENTATION.\n  METHOD longest_common_substring.\n    DATA: lv_max_length TYPE i,\n          lv_longest_substring TYPE string,\n          lv_len1 TYPE i,\n          lv_len2 TYPE i,\n          lv_i TYPE i,\n          lv_j TYPE i,\n          lv_length TYPE i.\n\n    lv_len1 = strlen( it_s1 ).\n    lv_len2 = strlen( it_s2 ).\n\n    DO.\n      IF lv_i >= lv_len1 OR lv_j >= lv_len2.\n        EXIT.\n      ENDIF.\n      lv_length = 0.\n      WHILE lv_i + lv_length < lv_len1 AND lv_j + lv_length < lv_len2.\n        IF it_s1(lv_i + lv_length) <> it_s2(lv_j + lv_length).\n          EXIT.\n        ENDIF.\n        lv_length += 1.\n      ENDDO.\n\n      IF lv_length > lv_max_length.\n        lv_max_length = lv_length.\n        lv_longest_substring = it_s1+lv_i(lv_i + lv_length).\n      ENDIF.\n    ENDDO.\n\n    result = lv_longest_substring.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SECTION.\n  DATA: lr_longest_common_substring TYPE REF TO lcl_longest_common_substring,\n        ls_result TYPE string.\n\n  CREATE OBJECT lr_longest_common_substring.\n\n  lr_longest_common_substring->longest_common_substring(\n    EXPORTING\n      it_s1 = 'Tangible'\n      it_s2 = 'Non-Tangible'\n    IMPORTING\n      result = ls_result ).\n\n  WRITE: / ls_result.\n"
    },
    {
        "instruction": "Write a Python code to print \"Hello World!\" on the console.",
        "input": "",
        "output": "print(\"Hello World!\")",
        "abap": "WRITE: / 'Hello World!'.\n"
    },
    {
        "instruction": "Write code for displaying the Fibinacci sequence up to the nth term.",
        "input": "",
        "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b",
        "abap": "FORM fibonacci USING p_n TYPE i RETURNING VALUE(p_result) TYPE i.\n  DATA: l_a TYPE i,\n         l_b TYPE i,\n         l_c TYPE i.\n\n  IF p_n < 0.\n    WRITE: 'Incorrect input'.\n    RETURN.\n  ELSEIF p_n = 0.\n    p_result = 0.\n  ELSEIF p_n = 1.\n    p_result = 1.\n  ELSE.\n    l_a = 0.\n    l_b = 1.\n    DO p_n - 2 TIMES.\n      l_c = l_a + l_b.\n      l_a = l_b.\n      l_b = l_c.\n    ENDDO.\n    p_result = l_b.\n  ENDIF.\n\nENDFORM. \n"
    },
    {
        "instruction": "Write a PL/SQL program to print out all numbers from 1 to 10.",
        "input": "",
        "output": "BEGIN\n  FOR i IN 1..10 LOOP\n    DBMS_OUTPUT.PUT_LINE(i);\n  END LOOP;\nEND;",
        "abap": "DO.\n  lv_counter = 1.\n  WHILE lv_counter <= 10.\n    WRITE: / lv_counter.\n    ADD 1 TO lv_counter.\n  ENDDO.\nENDPROCESS.\n"
    },
    {
        "instruction": "Identify the advantages of using deep learning models.",
        "input": "",
        "output": "The advantages of using deep learning models include: the ability to handle large and complex datasets; the ability to achieve better generalization performance; greater accuracy than traditional machine learning algorithms; the ability to capture non-linear relationships; and improved efficiency.",
        "abap": "REPORT zdeep_learning_advantages.\n\n\" Advantages of using Deep Learning Models \"\n\nDATA: lv_large_datasets TYPE string,\n      lv_generalization TYPE string,\n      lv_accuracy TYPE string,\n      lv_nonlinear_relationships TYPE string,\n      lv_efficiency TYPE string.\n\n\" Ability to handle large and complex datasets \"\nlv_large_datasets = 'The ability to handle large and complex datasets'.\n\n\" Ability to achieve better generalization performance \"\nlv_generalization = 'The ability to achieve better generalization performance'.\n\n\" Greater accuracy than traditional machine learning algorithms \"\nlv_accuracy = 'Greater accuracy than traditional machine learning algorithms'.\n\n\" Ability to capture non-linear relationships \"\nlv_nonlinear_relationships = 'The ability to capture non-linear relationships'.\n\n\" Improved efficiency \"\nlv_efficiency = 'Improved efficiency'.\n\n\" Output the advantages of using Deep Learning Models \"\nWRITE: / lv_large_datasets, lv_generalization, lv_accuracy, lv_nonlinear_relationships, lv_efficiency.\n"
    },
    {
        "instruction": "Write an API endpoint to get the average annual temperature of a given city.",
        "input": "",
        "output": "@app.route(\"/get_average_annual_temp/<city>\", methods=['GET'])\ndef get_average_annual_temp(city):\n    # Get the average annual temperature of the given city\n    temp = get_average_annual_temperature(city)\n    # Return the average temperature in json format\n    return jsonify({'temp': temp})",
        "abap": "REPORT z_get_average_annual_temp.\n\nDATA: lv_city TYPE string,\n      lv_temp  TYPE f.\n\nSELECT SINGLE mean FROM zcl_weather_data=>zcl_weather_data WHERE city = lv_city INTO lv_temp.\n\nIF sy-subrc <> 0.\n  MESSAGE e01(00) WITH 'City not found'.\nENDIF.\n\nDATA: lr_response TYPE REF TO cl_http_client_response.\n\nCREATE OBJECT lr_response\n  EXPORTING\n    client            = cl_http_client=>create_if_required_by_client\n    request = NEW cl_http_request(\n      method         = cl_abap_server_tools=>http_method_get\n      request_uri    = '/get_average_annual_temp/<city>'\n    ).\n\nCALL METHOD lr_response->set_multipart_data\n  EXPORTING\n    i_name        = 'temp'\n    i_value_type  = cl_abap_char_utilities=>c_type_f\n    i_length      = 10\n    i_value       =\n  .\n\nSET HANDLER:\n  method cl_http_client_response=>request_failed FOR lr_response->get_request.\n\nCALL METHOD lr_response->send\n  EXPORTING\n    i_server         = sy-servr\n    i_host           =\n    i_port           =\n  RECEIVING\n    r_out_parameters =\n\nIF lr_response->status_code EQ '200'.\n  CALL METHOD lr_response->receive\n    IMPORTING\n      body       =\n      headers     =\n      status_code =\n    .\nENDIF.\n"
    },
    {
        "instruction": "Write a C# program to find the maximum and minimum of three numbers.",
        "input": "",
        "output": "public void Maximum_Minimum(int num1, int num2, int num3)\n{\n    int max = Math.Max(Math.Max(num1, num2),num3);\n    int min =  Math.Min(Math.Min(num1,num2),num3);\n    Console.WriteLine(\"Maximum Number is : \" + max);\n    Console.WriteLine(\"Minimum Number is : \" + min);\n}",
        "abap": "REPORT zmax_min.\n\nCLASS lcl_max_min DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      maximum_minimum IMPORTING\n        value(iv_num1) TYPE i\n        value(iv_num2) TYPE i\n        value(iv_num3) TYPE i\n      RAISING no_data_found.\nENDCLASS.\n\nCLASS lcl_max_min IMPLEMENTATION.\n  METHOD maximum_minimum.\n    DATA: lv_max TYPE f,\n          lv_min TYPE f.\n\n    IF iv_num1 > iv_num2 AND iv_num1 > iv_num3.\n      lv_max = iv_num1.\n    ELSEIF iv_num2 > iv_num1 AND iv_num2 > iv_num3.\n      lv_max = iv_num2.\n    ELSE.\n      lv_max = iv_num3.\n    ENDIF.\n\n    IF iv_num1 < iv_num2 AND iv_num1 < iv_num3.\n      lv_min = iv_num1.\n    ELSEIF iv_num2 < iv_num1 AND iv_num2 < iv_num3.\n      lv_min = iv_num2.\n    ELSE.\n      lv_min = iv_num3.\n    ENDIF.\n\n    WRITE: / 'Maximum Number is : ', lv_max.\n    WRITE: / 'Minimum Number is : ', lv_min.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SECTION.\n  CALL METHOD lcl_max_min=>maximum_minimum\n    EXPORTING\n      iv_num1 = 10\n      iv_num2 = 20\n      iv_num3 = 30.\n"
    },
    {
        "instruction": "Identify the type of the following variable:\n$$\na = 5\n$$",
        "input": "",
        "output": "The type of 'a' is an integer.",
        "abap": "DATA: lv_value TYPE string.\nlv_value = 'a'.\n"
    },
    {
        "instruction": "Construct a SQL query to get all CustomerIDs from the Orders table if their OrderTotal is greater than 500.",
        "input": "",
        "output": "SELECT CustomerID\nFROM Orders\nWHERE OrderTotal > 500;",
        "abap": "REPORT zselect_orders.\n\nDATA: ls_order TYPE ty_orders,\n      lt_orders LIKE TABLE OF ty_orders.\n\nSELECT SINGLE CustomerID\n  INTO ls_order\n  FROM orders\n  WHERE OrderTotal > '500'.\n\nIF sy-subrc = 0.\n  WRITE : ls_order-customerid.\nENDIF.\n"
    },
    {
        "instruction": "Write a script to determine whether an element is present in a given array.",
        "input": "Given array: [1,2,5,7]\nNumber to find: 5",
        "output": "def element_in_array(lst, n): \n    for i in range(len(lst)): \n        if n == lst[i]: \n            return True \n    return False",
        "abap": "CLASS lcl_element_in_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      element_in_array\n        IMPORTING\n          VALUE(im_list TYPE tieref)\n          VALUE(iv_n     TYPE i4 )\n        RETURNING\n          VALUE(rv_result TYPE abap_bool ).\nENDCLASS.\n\nCLASS lcl_element_in_array IMPLEMENTATION.\n  METHOD element_in_array.\n    DATA: ls_line LIKE LINE OF im_list->*.\n\n    LOOP AT im_list INTO ls_line.\n      IF iv_n = ls_line.\n        rv_result = abap_true.\n        RETURN.\n      ENDIF.\n    ENDLOOP.\n    rv_result = abap_false.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Build a model using scikit-learn that classifies the given text data into \u2018Positive\u2019 or \u2018Negative\u2019.",
        "input": "The customer service was great, and I will definitely recommend this product to others.",
        "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Create arrays for the features and the label\nX = ['The customer service was great, and I will definitely recommend this product to others.'] \ny = ['Positive']\n\n# Create a CountVectorizer for parsing/counting words\ncv = CountVectorizer()\n \n# Parse the data with the vectorizer\nX = cv.fit_transform(X)\n \n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n \n# Create the model, train it, then test it\nmodel = LogisticRegression() \nmodel.fit(X_train, y_train) \nmodel.score(X_test, y_test)",
        "abap": "TYPES: BEGIN OF ty_text,\n          text TYPE string,\n        END OF ty_text.\n\nDATA: lt_texts TYPE STANDARD TABLE OF ty_text,\n      ls_text  TYPE ty_text,\n      lv_model  TYPE REF TO cl_statistical_model_logistic_regression,\n      lt_x_train TYPE STANDARD TABLE OF cl_statistical_model_logistic_regression=>tx,\n      lt_y_train TYPE STANDARD TABLE OF cl_statistical_model_logistic_regression=>ty.\n\n\" Create array for the features and the label\nls_text-text = 'The customer service was great, and I will definitely recommend this product to others.'.\nlt_texts = VALUE #( ls_text ).\ny = 'Positive'.\n\n\" Create a CountVectorizer for parsing/counting words\nDATA: lv_cv TYPE REF TO cl_statistical_model_logistic_regression=>ti,\n      lv_features TYPE STANDARD TABLE OF cl_statistical_model_logistic_regression=>tx.\n\nlv_cv->initialize( ).\n\n\" Parse the data with the vectorizer\nDO 1 TIMES.\n  READ TABLE lt_texts INTO ls_text INDEX sy-index.\n  IF sy-subrc <> 0.\n    EXIT.\n  ENDIF.\n  lv_features = VALUE #( ( ls_text-text ) ).\n  APPEND lv_features TO lt_x_train.\nENDDO.\n\n\" Create train and test sets\nlv_cv->split_data( EXPORTING\n                     it_x       = lt_x_train\n                     it_y       = y\n                     ratio_test = 33\n                     random_state = 42 IMPORTING\n                     et_x_train = DATA(lt_x_train)\n                     et_x_test  = DATA(lt_x_test)\n                     et_y_train = DATA(lt_y_train)\n                     et_y_test  = DATA(lt_y_test)).\n\n\" Create the model, train it, then test it\nlv_model->initialize( ).\nlv_model->train(\n  EXPORTING\n    iv_x      = lt_x_train\n    iv_y      = lt_y_train\n    iv_model  = 'logistic_regression'\n  IMPORTING\n    et_x      = DATA(lt_x)\n    et_y      = DATA(lt_y) ).\n\n\" Model Evaluation\nDATA: lv_score TYPE cl_statistical_model_logistic_regression=>fs.\nlv_model->score(\n  EXPORTING\n    iv_x       = lt_x_test\n    iv_y       = lt_y_test\n    iv_model   = 'logistic_regression'\n  IMPORTING\n    ev_score   = lv_score ).\n\n\" Class for Logistic Regression Model\nCLASS cl_statistical_model_logistic_regression DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      initialize,\n      train\n        IMPORTING\n          iv_x      TYPE STANDARD TABLE OF string\n          iv_y      TYPE STANDARD TABLE OF string\n          iv_model  TYPE string\n        EXPORTING\n          et_x      TYPE STANDARD TABLE OF string\n          et_y      TYPE STANDARD TABLE OF string,\n      score\n        IMPORTING\n          iv_x       TYPE STANDARD TABLE OF string\n          iv_y       TYPE STANDARD TABLE OF string\n          iv_model   TYPE string\n        RETURNING\n          VALUE(ev_score) TYPE float.\n\n  PRIVATE SECTION.\n    DATA: mv_model TYPE string.\n\nENDCLASS.\n\nCLASS cl_statistical_model_logistic_regression IMPLEMENTATION.\n\nMETHOD initialize.\n  mv_model = 'logistic_regression'.\nENDMETHOD.\n\nMETHOD train\n  IMPORTING\n    iv_x      TYPE STANDARD TABLE OF string\n    iv_y      TYPE STANDARD TABLE OF string\n    iv_model  TYPE string\n  EXPORTING\n    et_x      TYPE STANDARD TABLE OF string\n    et_y      TYPE STANDARD TABLE OF string.\n  DATA: lv_model TYPE REF TO if_ols_logistic_regression.\n\n  IF iv_model = 'logistic_regression'.\n    CREATE OBJECT lv_model TYPE cl_abap_statistical_model_logistic_regression.\n    lv_model->fit( iv_x  = iv_x\n                    iv_y  = iv_y ).\n\n    LOOP AT iv_x INTO DATA(lv_feature).\n      APPEND lv_feature TO et_x.\n    ENDLOOP.\n\n    LOOP AT iv_y INTO DATA(lv_label).\n      APPEND lv_label TO et_y.\n    ENDLOOP.\n  ELSEIF iv_model = 'logistic_regression'.\n    CREATE OBJECT lv_model TYPE cl_abap_statistical_model_logistic_regression.\n    lv_model->fit( iv_x  = iv_x\n                    iv_y  = iv_y ).\n\n    LOOP AT iv_x INTO DATA(lv_feature).\n      APPEND lv_feature TO et_x.\n    ENDLOOP.\n\n    LOOP AT iv_y INTO DATA(lv_label).\n      APPEND lv_label TO et_y.\n    ENDLOOP.\n  ENDIF.\nENDMETHOD.\n\nMETHOD score\n  IMPORTING\n    iv_x       TYPE STANDARD TABLE OF string\n    iv_y       TYPE STANDARD TABLE OF string\n    iv_model   TYPE string\n  RETURNING\n    VALUE(ev_score) TYPE float.\n  DATA: lv_model TYPE REF TO if_ols_logistic_regression,\n        lv_result TYPE cl_abap_statistical_model_logistic_regression=>fs.\n\n  IF iv_model = 'logistic_regression'.\n    CREATE OBJECT lv_model TYPE cl_abap_statistical_model_logistic_regression.\n    lv_model->predict( it_x  = iv_x\n                        it_y  = iv_y ).\n\n    DATA: lr_result TYPE REF TO data,\n          lt_result TYPE STANDARD TABLE OF ty_text.\n\n    FIELD-SYMBOL(<fs_result>).\n    ASSIGN lv_model->result TO <fs_result>.\n\n    LOOP AT <fs_result> INTO DATA(ls_result).\n      APPEND ls_result TO lt_result.\n    ENDLOOP.\n\n    ev_score = 0.7.\n\n  ELSEIF iv_model = 'logistic_regression'.\n    CREATE OBJECT lv_model TYPE cl_abap_statistical_model_logistic_regression.\n    lv_model->predict( it_x  = iv_x\n                        it_y  = iv_y ).\n\n    DATA: lr_result TYPE REF TO data,\n          lt_result TYPE STANDARD TABLE OF ty_text.\n\n    FIELD-SYMBOL(<fs_result>).\n    ASSIGN lv_model->result TO <fs_result>.\n\n    LOOP AT <fs_result> INTO DATA(ls_result).\n      APPEND ls_result TO lt_result.\n    ENDLOOP.\n\n    ev_score = 0.7.\n  ENDIF.\nENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Apply the filter method in JavaScript to return only those elements of a given array that are not null.",
        "input": "const array = [1, null, 2, undefined, 3, NaN];",
        "output": "const filteredArray = array.filter(el => el != null);",
        "abap": "DATA: lt_filtered TYPE STANDARD TABLE OF REFERENCE DATA(occurs 0).\n\nLOOP AT it_array INTO DATA(lr_element).\n  IF lr_element IS NOT BOUND.\n    APPEND lr_element TO lt_filtered.\n  ENDIF.\nENDLOOP.\n\n\" Note: Assuming it_array is the original table and lr_element is a reference type\n"
    },
    {
        "instruction": "Convert the given binary string to its corresponding decimal number.",
        "input": "10111101",
        "output": "189.",
        "abap": "It seems like you've provided a number, but I'm not sure what the context is for translating it into ABAP. Could you please provide more information or clarify your request? For example:\n\n- Is this related to a programming task?\n- Are there any specific code snippets that need translation?\n\nPlease let me know so I can better understand and assist you in translating the number 189 into ABAP if necessary.\n\nIf not, the word \"one eight nine\" spelled out is \"Eighty-Nine\"."
    },
    {
        "instruction": "Write a loop in React that renders a list of numbers from 1 - 10.",
        "input": "",
        "output": "render() {\n  const numbers = [1,2,3,4,5,6,7,8,9,10];\n  return (\n    <ul>\n      {numbers.map(number => <li>{number}</li>)}\n    </ul>\n  );\n}",
        "abap": "REPORT zdemo.\n\nCLASS lcl_demo DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      render\n        IMPORTING\n          it_numbers TYPE i4_t04t-tel,\n        EXPORTING\n          et_html    TYPE string_table.\nENDCLASS.\n\nCLASS lcl_demo IMPLEMENTATION.\n  METHOD render.\n    DATA: lt_html TYPE TABLE OF string.\n\n    \" Create a table of HTML strings\n    DO 10 TIMES.\n      APPEND '<li>' TO lt_html.\n      APPEND sy-index TO lt_html.\n      APPEND '</li>' TO lt_html.\n    ENDDO.\n\n    \" Join the table into one string\n    et_html = VALUE #( BASE space ( it_numbers[ 1 ] ) FOR html IN lt_html THEN html ).\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_numbers TYPE i4_t04t-tel,\n      lt_html   TYPE string_table.\n\nlt_numbers = VALUE #( ( 1 )( 2 )( 3 )( 4 )( 5 )( 6 )( 7 )( 8 )( 9 )( 10 ) ).\n\nlcl_demo=>render(\n  EXPORTING\n    it_numbers = lt_numbers\n  IMPORTING\n    et_html   = lt_html ).\n\n\" Print the result\nLOOP AT lt_html INTO DATA(line).\n  WRITE: / line.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a code to check whether two strings are anagrams or not.",
        "input": "first = \"listen\"\nsecond = \"silent\"",
        "output": "\"\"\"\nWrite a code to check whether two strings are anagrams or not\n\"\"\"\n\n# Strings to be checked\nfirst = \"listen\"\nsecond = \"silent\"\n\n# Sorting the strings\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\n\n# Checking if both sorted strings are equal or not\nif first_sorted == second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")",
        "abap": "REPORT zanagram_check.\n\n\" Define two input parameters\nDATA: lv_first TYPE string,\n      lv_second TYPE string.\n\n\" Prompt user to enter two strings\nlv_first = 'listen'.\nlv_second = 'silent'.\n\n\" Sorting the strings\nDATA: lt_first_sorted TYPE string_tab,\n      lt_second_sorted TYPE string_tab.\nSORTED lv_first INTO TABLE lt_first_sorted IN NATURAL KEY.\nSORTED lv_second INTO TABLE lt_second_sorted IN NATURAL KEY.\n\n\" Joining sorted characters back into a string\nlv_first_sorted = join( value = lt_first_sorted ).\nlv_second_sorted = join( value = lt_second_sorted ).\n\n\" Checking if both sorted strings are equal or not\nIF lv_first_sorted CA ls second_sorted.\n  WRITE: 'Strings are Anagrams'.\nELSE.\n  WRITE: 'Strings are not Anagrams'.\nENDIF.\n\n\" Helper function to join string table into a single string\nFORM join\n  USING\n    value TYPE string_tab\n  IMPORTING\n    result TYPE string.\n  DATA: lv_result TYPE string.\n  LOOP AT value INTO DATA(ls_item).\n    lv_result = |{ lv_result }{ ls_item }|.\n  ENDLOOP.\n  result = lv_result.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Create a method to checkout the content of dictionary.",
        "input": "",
        "output": "def check_dict(dictionary):\n    for key in dictionary:\n        print(key + \": \" + str(dictionary[key]))",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_dictionary IMPORTING\n                          VALUE( iv_dictionary ) TYPE ty_dict\n                         CHANGING\n                           cs_dictionary TYPE ty_dict.\n\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD check_dictionary.\n    LOOP AT IV_DICTIONARY INTO FIELD-SYMBOL(<key>).\n      WRITE: |{ <key> }: { iv_dictionary-<key> }|.\n    ENDLOOP.\n  ENDMETHOD.\n\nTYPES:\n  BEGIN OF ty_dict,\n    key TYPE string,\n    value TYPE i,\n  END OF ty_dict.\n\nDATA:\n  ls_dict TYPE STANDARD TABLE OF ty_dict,\n  lv_key TYPE string,\n  lv_value TYPE i.\n\nls_dict = VALUE #( ( key = 'key1' value = 1 )\n                   ( key = 'key2' value = 2 ) ).\n\ncheck_dictionary( EXPORTING iv_dictionary = ls_dict ).\n"
    },
    {
        "instruction": "You are given a list of items. Output a list of items and their respective frequencies.",
        "input": "[1,2,2,4,5,2,3,4,5,6]",
        "output": "1: 1\n2: 3\n3: 1\n4: 2\n5: 2\n6: 1",
        "abap": "DATA: lv_mapping TYPE ty_map.\n\ntypes: BEGIN OF type_map,\n        key      TYPE i,\n        value    TYPE i,\n      END OF type_map.\n\nlv_mapping = VALUE #( (\n  1 = 1\n  2 = 3\n  3 = 1\n  4 = 2\n  5 = 2\n  6 = 1 ).\n\nLOOP AT lv_mapping INTO DATA(ls_entry).\n  WRITE: / ls_entry-key, ls_entry-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Create an HTML form with three text fields\u2014name, age and gender.",
        "input": "",
        "output": "<form>\n <label for=\"name\">Name:</label>\n <input type=\"text\" id=\"name\" name=\"name\">\n <br>\n <label for=\"age\">Age:</label>\n <input type=\"text\" id=\"age\" name=\"age\">\n <br>\n <label for=\"gender\">Gender:</label>\n <input type=\"text\" id=\"gender\" name=\"gender\">\n</form>",
        "abap": "DATA: ls_data TYPE ty_data.\n\nFORM display.\n  DATA: lv_name TYPE string,\n        lv_age  TYPE i,\n        lv_gender TYPE string.\n\n  TYPES: BEGIN OF ty_data,\n           name TYPE string,\n           age TYPE i,\n           gender TYPE string,\n         END OF ty_data.\n\n  CALL METHOD cl_gui_frontend_services=>show_input_dialog\n    EXPORTING\n      window_title              = 'Input Dialog'\n      text_line1                = 'Enter your details:'\n      default_value1            =\n      default_value2            =\n      default_value3            =\n      value_checked             =\n      extended_selection_button =\n      default_control_id1       =\n      default_control_id2       =\n      default_control_id3       =\n      first_value_id1           =\n      first_value_id2           =\n      first_value_id3           =\n    IMPORTING\n      value1                     = lv_name\n      value2                     = lv_age\n      value3                     = lv_gender.\n\n  ls_data-name = lv_name.\n  ls_data-age = lv_age.\n  ls_data-gender = lv_gender.\n\n  WRITE: / 'Name:', ls_data-name.\n  WRITE: / 'Age:', ls_data-age.\n  WRITE: / 'Gender:', ls_data-gender.\n\nENDFORM.\n"
    },
    {
        "instruction": "Compare two strings to determine if they are equal or not.",
        "input": "String1: \"Hello World\"\nString2: \"Hello World\"",
        "output": "true",
        "abap": "def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"John\"))\n"
    },
    {
        "instruction": "Write a function in Python that takes two parameters and returns a list containing those two numbers",
        "input": "",
        "output": "def make_list(a, b):\n  return [a, b]",
        "abap": "TYPES: BEGIN OF ty_data,\n         a TYPE string,\n         b TYPE string,\n       END OF ty_data.\n\nDATA: ls_result TYPE ty_data.\nls_result-a = 'A'.\nls_result-b = 'B'.\n\nDATA: lt_list TYPE STANDARD TABLE OF ty_data.\n\nAPPEND ls_result TO lt_list.\n\nLOOP AT lt_list INTO DATA(ls_item).\n  WRITE: / ls_item-a, ls_item-b.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a code to return the first 3 elements in a list.",
        "input": "mylist = [1,4,3,6,7,2,4]",
        "output": "mylist[:3]",
        "abap": "DO.\n  READ TABLE ls_list INDEX sy-index INTO DATA(ls_element).\n  IF sy-index > 3.\n    EXIT.\n  ELSEIF ls_element = 3.\n    \"do nothing, we've reached the end of our slice\"\n  ENDIF.\nENDDO.\n\nls_list[] = VALUE #( ( 1 ) ( 2 ) ( 3 ) ) .`\n\nHowever, if you want to directly use a `LOOP` statement like in Python's list slicing:\n\n"
    },
    {
        "instruction": "You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.",
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "def transpose(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    transpose_matrix = [[0] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            transpose_matrix[j][i] = matrix[i][j]\n\n    return transpose_matrix",
        "abap": "CLASS lcl_transpose DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      transpose IMPORTING\n                  VALUE( iv_matrix ) TYPE ty_matrix\n        EXPORTING\n          VALUE( et_transposed_matrix ) TYPE ty_matrix.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_transpose IMPLEMENTATION.\n  METHOD transpose.\n    DATA: lv_m TYPE i,\n          lv_n TYPE i,\n          ls_row TYPE ty_row.\n\n    FIELD-SYMBOLS: <fs_row> TYPE STANDARD TABLE.\n\n    \" Check if input matrix is not empty\n    ASSERT sy-subrc = 0.\n\n    \" Get dimensions of the matrix\n    mv_matrix = iv_matrix.\n    mv_transposed_matrix = VALUE #( ).\n\n    lv_m = lines( mv_matrix ).\n    DO lv_m TIMES.\n      ls_row[] = mv_matrix[ sy-index - 1 ].\n      APPEND ls_row TO mv_transposed_matrix.\n\n      CLEAR: ls_row.\n    ENDDO.\n\n    \" Transpose the matrix\n    CLEAR: mv_transposed_matrix.\n    LOOP AT mv_matrix INTO DATA(ls_col).\n      INSERT VALUE #( ) INTO TABLE mv_transposed_matrix INDEX 0.\n      DO lv_m TIMES.\n        APPEND ls_col[ sy-index - 1 ] TO mv_transposed_matrix[ sy-index - 1 ].\n      ENDDO.\n    ENDLOOP.\n\n    et_transposed_matrix = mv_transposed_matrix.\n\n  ENDMETHOD.\nENDCLASS.\n\nTYPES: BEGIN OF ty_row,\n         value TYPE i,\n       END OF ty_row.\n\nDATA: mv_matrix TYPE STANDARD TABLE OF ty_row,\n      mv_transposed_matrix TYPE STANDARD TABLE OF ty_row.\n\nCLASS lcl_test DEFINITION INHERITING FROM cl_abap_object_pool DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      class_constructor,\n      main IMPORTING\n                 VALUE( iv_matrix ) TYPE ty_matrix\n        EXPORTING\n          VALUE( ev_transposed_matrix ) TYPE ty_matrix.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD main.\n    DATA: lo_transpose TYPE REF TO lcl_transpose.\n\n    CREATE OBJECT lo_transpose TYPE lcl_transpose.\n    lo_transpose->transpose(\n      EXPORTING\n        iv_matrix = iv_matrix\n      IMPORTING\n        et_transposed_matrix = ev_transposed_matrix ).\n\n  ENDMETHOD.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD class_constructor.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a function that takes a number and returns the sum of all its divisors.",
        "input": "",
        "output": "def get_divisor_sum(n):\n    divisor_sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "abap": "REPORT zdivisor_sum.\n\nCLASS lcl_divisor_sum DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_divisor_sum IMPORTING p_n TYPE i\n                        RETURNING VALUE(p_sum) TYPE i.\nENDCLASS.\n\nCLASS lcl_divisor_sum IMPLEMENTATION.\n  METHOD get_divisor_sum.\n    DATA: ls_i TYPE i.\n\n    p_sum = 0.\n    DO.\n      IF sy-index > p_n / 2.\n        EXIT.\n      ELSEIF p_n MOD sy-index = 0.\n        ADD sy-index TO p_sum.\n      ENDIF.\n      ENDDO.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a C++ program that sorts a given array in descending order.",
        "input": "int array[] = {6, 3, 8, 12, 9, 4};",
        "output": "#include<iostream>\nusing namespace std;\n \nint main()\n{\n    int array[] = {6, 3, 8, 12, 9, 4};\n    int arraySize = sizeof(array)/sizeof(array[0]);\n \n    //ascending order sorting\n    for(int i = 0; i < arraySize; i++)\n    {\n        // find the position of smallest element\n        int small = i;\n        for(int j = i+1; j < arraySize; j++)\n        {\n            if(array[j] > array[small])\n                small = j;\n        }\n \n        // swap the position of smallest element\n        int temp = array[i];\n        array[i] = array[small];\n        array[small] = temp;\n    }\n \n    // print the sorted array\n    cout << \"Sorted array : \";\n    for(int i = 0; i < arraySize; i++)\n        cout << array[i] << \" \";\n \n    return 0;\n}",
        "abap": "REPORT zsort_array.\n\nDATA: lv_array TYPE STANDARD TABLE OF i,\n      lv_size  TYPE i.\n\n\" Initialize an array with unsorted values\nlv_array = value #( 6, 3, 8, 12, 9, 4 ).\n\n\" Calculate the size of the array\nlv_size = lines( lv_array ).\n\n\" Sorting in ascending order using selection sort\nLOOP AT lv_array ASSIGNING FIELD-SYMBOL(<fs>).\n  DATA: small TYPE i.\n  \" Find the position of the smallest element\n  small = sy-tabix.\n\n  LOOP AT lv_array ASSIGNING <fs2> FROM sy-tabix + 1.\n    IF <fs2>-value > <fs>-value.\n      small = sy-tabix.\n    ENDIF.\n  ENDLOOP.\n\n  \" Swap the positions of the smallest and current elements\n  PERFORM swap USING: <fs>, lv_array[ small ].\nENDLOOP.\n\n\" Print the sorted array\nWRITE:/ 'Sorted array:'.\n\nLOOP AT lv_array INTO DATA(ls_value).\n  WRITE ls_value.\n  IF sy-tabix LT lines( lv_array ) - 1.\n    WRITE space.\n  ENDIF.\nENDLOOP.\n\nFORM swap USING VALUE(t1) TYPE i VALUE(t2) TYPE i.\n  t1 = t2.\nENDFORM.\n"
    },
    {
        "instruction": "Find the sum of two numbers using C#.",
        "input": "The two numbers are: 123 and 456",
        "output": "int  result = 123 + 456;\nConsole.WriteLine(result); //Output: 579",
        "abap": "DATA: lv_result TYPE i VALUE 579.\n\nlv_result = 123 + 456.\nWRITE: / lv_result.\n"
    },
    {
        "instruction": "Debug the following JavaScript code which calculates the average of an array of integers:",
        "input": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\nsum += arr[i]}\naverage = sum / arr.length",
        "output": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\naverage = sum / arr.length;\nconsole.log(average);",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i,\n      lv_sum  TYPE i,\n      lv_avg  TYPE f.\n\nlv_arr = value #( (2) (3) (4) (5) ).\n\nDO.\n  lv_sum = lv_sum + sy-index - 1.\n  IF sy-index > lines( lv_arr ).\n    EXIT.\n  ENDIF.\nENDDO.\n\nlv_avg = lv_sum / lines( lv_arr ).\n\nWRITE: lv_avg.\n"
    },
    {
        "instruction": "Use the back-propagation algorithm to learn the weights of a given neural network.",
        "input": "",
        "output": "# Initialize weights with random values & weights\nweights = np.random.uniform(-1,1, (num_nodes, num_inputs))\nbias = np.random.uniform(-1,1, num_nodes)\n\n#Forward pass\nwhile True:\n    \n    # Compute a_L and estimated output y_hat\n    a_L, y_hat = compute_forward_pass(x, weights, bias)\n    \n    # Compute the loss\n    loss = compute_loss(y_hat, y)\n    \n    # Compute delta and derivatives\n    delta = compute_delta(a_L, y)\n    weights_derivatives, bias_derivatives = compute_derivatives(x, a_L, delta)\n\n    # Update the weights\n    weights -= learning_rate * weights_derivatives\n    bias -= learning_rate * bias_derivatives",
        "abap": "TYPES: BEGIN OF ty_weight,\n         value TYPE f DECIMAL 8,\n       END OF ty_weight.\n\nDATA: lt_weights TYPE STANDARD TABLE OF ty_weight,\n      lv_bias    TYPE f DECIMAL 8,\n      ls_delta   TYPE ty_weight,\n      ls_derivative TYPE ty_weight,\n      ld_loss     TYPE f DECIMAL 18,\n      lv_learning_rate TYPE f DECIMAL 10 VALUE '0.01'.\n\nLOOP AT 1.\n  \" Initialize weights with random values & weights\n  DO num_nodes TIMES.\n    APPEND INITIAL LINE TO lt_weights.\n    DATA(lv_random_value) = cl_abap_random=>create( seed = sy-datum sy-uzeit ).\n    MOVE-CORRESPONDING lv_random_value->value+(-1) TO ( lt_weights[ sy-index ]-value ).\n  ENDDO.\n\n  \" Initialize bias\n  DO num_nodes TIMES.\n    APPEND INITIAL LINE TO lt_weights.\n    DATA(lv_random_bias) = cl_abap_random=>create( seed = sy-datum sy-uzeit ).\n    MOVE-CORRESPONDING lv_random_bias->value+(-1) TO ( lt_weights[ sy-index ]-value ).\n  ENDDO.\n\n  \" Forward pass\n  DO.\n    \" Compute a_L and estimated output y_hat\n    DATA(lv_a_l) = compute_forward_pass( x, lt_weights, lv_bias ).\n\n    \" Compute the loss\n    ld_loss = compute_loss( lv_y_hat, y ).\n\n    \" Break if training is done (e.g. max iterations reached)\n    IF sy-index > max_iterations.\n      EXIT.\n    ENDIF.\n\n    \" Compute delta and derivatives\n    ls_delta = compute_delta( lv_a_l, y ).\n    DATA(lt_derivative) = compute_derivatives( x, lv_a_l, ls_delta ).\n\n    \" Update the weights\n    LOOP AT lt_weights INTO DATA(ls_weight).\n      ADD ( -1 * ld_learning_rate ) * ls_derivative-weight TO ls_weight-value.\n      MODIFY lt_weights INDEX sy-index FROM ls_weight.\n    ENDLOOP.\n\n    \" Update bias\n    lv_bias = lv_bias - ( 1 * ld_learning_rate ) * lt_derivative-bias.\n\n  ENDDO.\n"
    },
    {
        "instruction": "Write a Python function to create a two-dimensional array of specified dimensions.",
        "input": "",
        "output": "def create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr",
        "abap": "TYPES: BEGIN OF ty_element,\n          value TYPE i,\n        END OF ty_element.\n\nDATA: lv_rows TYPE i,\n      lv_columns TYPE i.\nDATA: lt_2d_array TYPE STANDARD TABLE OF ty_element.\n\n\" Create 2D array with specified number of rows and columns\nlv_rows = <value for rows>.\nlv_columns = <value for columns>.\n\nLOOP AT sy-tfill INTO DATA(ls_fill) FROM 0 TO lv_columns - 1.\n  APPEND INITIAL LINE TO lt_2d_array ASSIGNING <ls_element>.\n  DO lv_columns TIMES.\n    APPEND VALUE #( value = 0 ) TO <ls_element> [].\n  ENDDO.\nENDDO.\n\nlt_2d_array = VALUE #( itab = lt_2d_array ).\n\n\" or alternative way\n\nDATA: lt_2d_array_alternative TYPE STANDARD TABLE OF ty_element.\nDO lv_rows TIMES.\n  DO lv_columns TIMES.\n    APPEND VALUE #( value = 0 ) TO lt_2d_array_alternative.\n  ENDDO.\nENDDO.\n\nlt_2d_array_alternative = VALUE #( itab = lt_2d_array_alternative ).\n"
    },
    {
        "instruction": "Compose a function named average_list which takes a list of numbers as its argument and computes the average.",
        "input": "",
        "output": "def average_list(nums):\n    return sum(nums)/len(nums)",
        "abap": "REPORT zaverage_list.\n\nCLASS lcl_average DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_average\n        IMPORTING\n          VALUE( it_numbers ) TYPE STANDARD TABLE OF f DECIMAL DIGITS 10\n        RETURNING\n          VALUE( ro_result ) TYPE f.\nENDCLASS.\n\nCLASS lcl_average IMPLEMENTATION.\n  METHOD calculate_average.\n    DATA: lv_sum TYPE p, lv_count TYPE i.\n\n    lv_sum = 0.\n    LOOP AT it_numbers INTO DATA(ls_number).\n      lv_sum = lv_sum + ls_number.\n    ENDLOOP.\n    lv_count = lines( it_numbers ).\n\n    ro_result = lv_sum / lv_count.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_numbers TYPE STANDARD TABLE OF f DECIMAL DIGITS 10,\n        lv_average TYPE f.\n\n  APPEND 1 TO lt_numbers.\n  APPEND 2 TO lt_numbers.\n  APPEND 3 TO lt_numbers.\n  APPEND 4 TO lt_numbers.\n  APPEND 5 TO lt_numbers.\n\n  CALL METHOD cl_average=>calculate_average\n    EXPORTING\n      it_numbers = lt_numbers\n    IMPORTING\n      ro_result = lv_average.\n\n  WRITE: / 'Average: ', lv_average.\n"
    },
    {
        "instruction": "Create a CSS style to set the background color of a div class \"sample\".",
        "input": "",
        "output": ".sample{\n   background-color: #fff;\n}",
        "abap": "CLASS lcl_sample DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_style\n        RETURNING\n          VALUE( ro_style ) TYPE cl_abap_style=>style\n        RAISING\n          exc_style.\n\nENDCLASS.\n\nCLASS lcl_sample IMPLEMENTATION.\n  METHOD get_style.\n    DATA: lr_style TYPE REF TO cl_abap_style,\n          lv_color TYPE abap_char2x4 VALUE '#fff' .\n\n    CREATE OBJECT lr_style.\n    lr_style->set_background_color( lv_color ).\n\n    ro_style = lr_style .\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "How to print the elements of a two-dimensional array in C?",
        "input": "",
        "output": "We can use nested loops to print the elements of a two-dimensional array in C. The outer loop iterates over the rows, while the inner loop iterates over the columns. For example, the following code snippet prints the elements of a two-dimensional array: \n \nint array[3][3] = {{1,2,3},{4,5,6},{7,8,9}};\nfor (int i=0; i<3; i++)\n{   \n    for(int j=0; j<3; j++) \n    {\n        printf(\"%d \", array[i][j]); \n    }\n    printf(\"\\n\");\n}",
        "abap": "REPORT zexample.\n\nDATA: lv_array TYPE STANDARD TABLE OF i,\n      l_length TYPE i.\n\nl_length = 3.\nlv_array = VALUE #( (1) (2) (3)\n                     (4) (5) (6)\n                     (7) (8) (9) ).\n\nLOOP AT lv_array INTO DATA(lv_element).\n  WRITE: / lv_element.\nENDLOOP.\n"
    },
    {
        "instruction": "Calculate the result of raising 2 to the power of 6.",
        "input": "",
        "output": "64",
        "abap": "It seems like you want me to write a simple ABAP program, but I need more context.\n\nCould you provide more information about what you would like the program to do? \n\nFor example:\n\nDo you want it to:\n- Calculate something?\n- Read/Write data from a database?\n- Perform some other task?\n\nLet me know and I'll be happy to assist you!"
    },
    {
        "instruction": "Given a Python list, write the code to flatten it",
        "input": "l1=[1,2,3,[4,[5,6]]]",
        "output": "def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)",
        "abap": "CLASS lcl_flatten DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      flatten\n        IMPORTING\n          it_nums TYPE STANDARD TABLE OF any.\n        RETURNING\n          VALUE(re_result) TYPE STANDARD TABLE OF any.\nENDCLASS.\n\nCLASS lcl_flatten IMPLEMENTATION.\n  METHOD flatten.\n    DATA: lt_result TYPE STANDARD TABLE OF any.\n\n    LOOP AT it_nums INTO DATA(ls_elem).\n      IF ls_elem TYPE i OR ls_elem TYPE f\n         OR ls_elem TYPE string\n         OR ls_elem TYPE c\n         OR ls_elem TYPE x LENGTH 16. \"Add more types as needed\n        APPEND ls_elem TO lt_result.\n      ELSEIF is_list TYPE REF TO cl_abap_iterable.\n        DATA(lo_iterator) = is_list->make_iterator( ).\n        WHILE lo_iterator->has_next( ) <> abap_false.\n          APPEND lo_iterator->next( ) TO lt_result.\n        ENDWHILE.\n      ELSE. \" Assuming the list contains other lists\n        DATA: lt_sublist TYPE STANDARD TABLE OF any,\n              lo_sublist TYPE REF TO cl_abap_iterable.\n\n        lo_sublist = is_list->make_iterator( ).\n        DO.\n          IF lo_sublist->has_next( ) <> abap_false.\n            EXIT.\n          ENDIF.\n          lt_sublist = VALUE #( ( lo_sublist->next( ) ) ).\n\n          CALL METHOD lcl_flatten=>flatten\n            EXPORTING\n              it_nums  = lt_sublist\n            IMPORTING\n              re_result = DATA(ls_subresult).\n\n          APPEND LINES OF ls_subresult TO lt_result.\n        ENDDO.\n      ENDIF.\n    ENDLOOP.\n\n    re_result[] = lt_result[].\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Design an HTML form with the following fields: first name, last name, age, phone number and address.",
        "input": "",
        "output": "<form> \n  <label> First Name: </label> \n  <input type=\"text\" name=\"firstname\" required> \n  <label> Last Name: </label> \n  <input type=\"text\" name=\"lastname\" required> \n  <label> Age: </label> \n  <input type=\"number\" name=\"age\" min=\"18\" required> \n  <label> Phone Number: </label> \n  <input type=\"tel\" name=\"phone\" required> \n  <label> Address: </label> \n  <input type=\"text\" name=\"address\" required> \n  <input type=\"submit\" value=\"Submit\"> \n</form>",
        "abap": "REPORT zexample.\n\nCLASS lcl_form DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      process_input\n        IMPORTING\n          iv_firstname TYPE string\n          iv_lastname  TYPE string\n          iv_age       TYPE i\n          iv_phone     TYPE string\n          iv_address   TYPE string,\n      display_form.\nENDCLASS.\n\nCLASS lcl_form IMPLEMENTATION.\n  METHOD process_input.\n    WRITE: / 'Firstname:', iv_firstname, ', Lastname:', iv_lastname, ', Age:', iv_age, ', Phone:', iv_phone, ', Address:', iv_address.\n  ENDMETHOD.\n\n  METHOD display_form.\n    DATA: lv_text TYPE string,\n          lr_layout TYPE REF TO cl_gui_custom_container,\n          lr_input_type1 TYPE REF TO cl_gui_input_type1,\n          lr_input_type2 TYPE REF TO cl_gui_input_type2,\n          lr_input_type3 TYPE REF TO cl_gui_input_type3,\n          lr_input_type4 TYPE REF TO cl_gui_input_type4.\n\n    CREATE OBJECT lr_layout\n      EXPORTING\n        parent = cl_gui_control=>create_container_low( ).\n\n    lv_text = |<table border=\"0\" width=\"100%\">|\n             || '<tr><td>Firstname: </td><td><input type=\"text\" name=\"firstname\" required></td></tr>' ||\n             || '<tr><td>Lastname: </td><td><input type=\"text\" name=\"lastname\" required></td></tr>' ||\n             || '<tr><td>Age: </td><td><input type=\"number\" name=\"age\" min=\"18\" required></td></tr>' ||\n             || '<tr><td>Phone Number: </td><td><input type=\"tel\" name=\"phone\" required></td></tr>' ||\n             || '<tr><td>Address: </td><td><input type=\"text\" name=\"address\" required></td></tr>' ||\n             || '</table>'.\n    CALL METHOD lr_layout->set_text( lr_text = lv_text ).\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lo_form TYPE REF TO lcl_form,\n        lv_firstname TYPE string,\n        lv_lastname  TYPE string,\n        lv_age       TYPE i,\n        lv_phone     TYPE string,\n        lv_address   TYPE string.\n\n  CREATE OBJECT lo_form.\n  CALL METHOD lo_form->display_form( ).\n\n  CALL METHOD lo_form->process_input\n    EXPORTING\n      iv_firstname = 'John'\n      iv_lastname  = 'Doe'\n      iv_age       = 30\n      iv_phone     = '1234567890'\n      iv_address   = '123 Main St'.\n\n  CALL METHOD lo_form->display_form( ).\n\n  CALL METHOD lo_form->process_input\n    EXPORTING\n      iv_firstname = ''\n      iv_lastname  = ''\n      iv_age       = 17\n      iv_phone     = ''\n      iv_address   = ''.\n"
    },
    {
        "instruction": "Write a function to remove all duplicate elements in an array.",
        "input": "data = [1, 2, 3, 2, 4, 5]",
        "output": "def remove_duplicates(data):\n    \"\"\"Remove all duplicate elements in an array\"\"\"\n    \n    # Initialize an empty list\n    unique_data = []\n\n    # Iterate over the data\n    for i in data:\n        # Check if element is not already in list\n        if i not in unique_data:\n            # If not, then add to list\n            unique_data.append(i)\n    \n    return unique_data\n\nprint(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]",
        "abap": "TYPES: BEGIN OF ty_data,\n         value TYPE i,\n       END OF ty_data.\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_data,\n      lv_value TYPE i.\n\n\" Example data\nlt_data = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ( 1 ) ).\n\n\" Remove duplicates from the internal table\nLOOP AT lt_data INTO DATA(ls_element).\n  IF ls_element-value NOT IN SVALUES( \" Check if value is not already in table\n       1\n       2\n       3\n       4\n       5 ).\n    \" If not, then add to table\n    INSERT ls_element INTO TABLE unique_data.\n  ENDIF.\nENDLOOP.\n\n\" Output the data without duplicates\nLOOP AT unique_data INTO DATA(ls_unique).\n  WRITE: ls_unique-value.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a query to retrieve all the customer names from an orders table.",
        "input": "Table Name: Orders",
        "output": "SELECT CustomerName FROM Orders;",
        "abap": "DATA: ls_orders TYPE oorders.\nSELECT customername INTO ls_orders-customername\n  FROM orders.\n"
    },
    {
        "instruction": "Suggest a Python code to parse an XML document.",
        "input": "",
        "output": "# Parse an XML document using Python\nimport xml.etree.ElementTree as ET\n\n# load the XML document\ntree = ET.parse('document.xml')\n# get the root element\nroot = tree.getroot()\n# loop through all the elements\nfor element in root.findall('element'):\n    # print the attributes of all elements\n    print(element.attrib)",
        "abap": "\" Parse an XML document using ABAP\n\nDATA: lv_xml_document TYPE string,\n      lo_document      TYPE REF TO if_ixml_document,\n      li_element       TYPE REF TO if_ixml_element.\n\n\" Load the XML document into a string\nlv_xml_document = cl_abap_char_utilities=>read_file( 'document.xml' ).\n\n\" Parse the XML document\nlo_document ?= cl_ixml=>create( ).\nli_xdom_document ?= lo_document->parse_string( lv_xml_document ).\n\n\" Get the root element\nli_root_element ?= li_xdom_document->get_root_element( ).\n\n\" Loop through all elements\nWHILE li_root_element IS NOT INITIAL.\n  DATA: ls_attributes TYPE ixml_nametype,\n        lt_elements   TYPE STANDARD TABLE OF REF TO data.\n\n  \" Get the name of the current element\n  ls_attributes = li_root_element->get_name( ).\n  IF ls_attributes CA 'element'.\n    \" Print the attributes of all elements\n    WRITE: / ls_attributes.\n  ENDIF.\n\n  \" Get the children of the current element\n  lt_elements ?= li_root_element->children( ).\n\n  \" Loop through the children and move to the next one\n  LOOP AT lt_elements INTO li_element.\n    li_root_element = li_element.\n    EXIT.\n  ENDLOOP.\nENDWHILE.\n"
    },
    {
        "instruction": "Write a code to access the nth element of a linked list.",
        "input": "",
        "output": "# defining the Node class\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef getNthElement(head, n): \n\tcurrent = head \n\tcount = 0\n\n\t# looping through the linked list\n\twhile(current is not None): \n\t\tif (count == n): \n\t\t\treturn current.data \n\t\tcount += 1\n\t\tcurrent = current.next\n\treturn -1",
        "abap": "CLASS lcl_node DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_nth_element IMPORTING\n        value( n ) TYPE i\n        head TYPE REF TO lcl_node\n      RETURNING\n        value( result ) TYPE i.\n\nENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD get_nth_element.\n\n    DATA: current TYPE REF TO lcl_node,\n          count   TYPE i VALUE 0.\n\n    IF head IS INITIAL.\n      RAISE EXCEPTION type cx_static_check message 'Head is not defined'.\n    ENDIF.\n\n    current = head.\n\n    DO n TIMES.\n      IF current->data IS NOT INITIAL.\n        result = current->data.\n        RETURN.\n      ELSE.\n        count = count + 1.\n        current = current->next.\n      ENDIF.\n    ENDDO.\n\n    RAISE EXCEPTION type cx_static_check message 'Node not found'.\n\n  ENDMETHOD.\n\nCLASS lcl_node DEFINITION INHERITING FROM cl_abap_object_model DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor IMPORTING\n        value( data ) TYPE i.\n\n  PRIVATE SECTION.\n    DATA: next TYPE REF TO lcl_node,\n          data TYPE i.\n\nENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD constructor.\n    me->data = data.\n    me->next  = NEW #( ).\n\n  ENDMETHOD.\n\nENDCLASS.\n\nDATA: head TYPE REF TO lcl_node.\n\nINITIALIZER.\n  DATA: node1 TYPE REF TO lcl_node,\n        node2 TYPE REF TO lcl_node,\n        node3 TYPE REF TO lcl_node.\n\n  node1 = NEW #( 10 ).\n  node2 = NEW #( 20 ).\n  node3 = NEW #( 30 ).\n\n  node1->next = node2.\n  node2->next = node3.\n\n  head = node1.\n\nDATA: n TYPE i VALUE 2,\n      result TYPE i.\n\nresult = lcl_node=>get_nth_element( n = n head = head ).\n\nWRITE: 'The ', n, '-th element is ', result.\n"
    },
    {
        "instruction": "Explain the term \"backtracking\".",
        "input": "",
        "output": "Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions and abandons each partial candidate c (\"backtracks\") as soon as it determines that c cannot possibly be completed to a valid solution.",
        "abap": "CLASS lcl_backtracker DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_permutations\n        IMPORTING\n          VALUE(iv_array) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE STANDARD TABLE OF REF TO data.\n\nENDCLASS.\n\nCLASS lcl_backtracker IMPLEMENTATION.\n  METHOD get_permutations.\n    DATA: lv_count TYPE i,\n          ls_perm  TYPE REF TO data,\n          lt_result TYPE TABLE OF REF TO data.\n\n    CREATE OBJECT ls_perm TYPE string VALUE abap_true.\n    APPEND ls_perm TO it_result.\n\n    PERFORM build_permutation CHANGING iv_array CHANGING lt_result.\n\n    WHILE lt_result[] IS NOT INITIAL.\n\n      MOVE-CORRESPONDING it_result[ 1 ] TO lv_count.\n      IF ls_perm->length = lv_count OR ls_perm->length > iv_array[ lines( iv_array ) ].\n        DELETE lt_result INDEX 1.\n      ELSEIF iv_array-LOW <= ( ls_perm->to_upper( ) + '' - ls_perm->to_lower( ) ) AND\n             ( ls_perm->to_upper( ) + '' - ls_perm->to_lower( ) ) <= iv_array-HIGH.\n\n        lv_count = lines( it_result ).\n        PERFORM build_permutation CHANGING iv_array CHANGING lt_result.\n\n      ELSE.\n        DELETE lt_result INDEX 1.\n        PERFORM reset_permutation CHANGING ls_perm.\n\n      ENDIF.\n\n    ENDDO.\n\n    MOVE-CORRESPONDING it_result[] TO rv_result.\n\n  ENDMETHOD.\n\n  METHOD build_permutation.\n\n    DATA: lv_index TYPE i,\n          lv_index2 TYPE i,\n          lt_copy  TYPE TABLE OF REF TO data,\n          lv_temp  TYPE REF TO data,\n          ls_current TYPE REF TO data.\n\n    \" Copy the current permutation\n    PERFORM copy_permutation CHANGING it_array CHANGING lt_copy.\n\n    DO.\n      CASE abap_true.\n        WHEN it_array IS INITIAL.\n          APPEND LINES( lt_copy ) TO et_result.\n          EXIT.\n\n        WHEN it_array-LOW <= ( ls_current->to_upper( ) + '' - ls_current->to_lower( ) ) AND\n             ( ls_current->to_upper( ) + '' - ls_current->to_lower( ) ) <= it_array-HIGH.\n          lv_index = lines( it_array ).\n          PERFORM build_permutation CHANGING it_array CHANGING lt_copy.\n\n        WHEN OTHERS.\n          lv_temp = REF( it_array-1 ).\n          DELETE it_array INDEX 1.\n          APPEND ls_current TO it_array.\n          APPEND LINES( lt_copy ) TO et_result.\n\n      ENDCASE.\n    ENDDO.\n\n  ENDMETHOD.\n\n  METHOD reset_permutation.\n    DELETE ls_perm.\n  ENDMETHOD.\n\n  METHOD copy_permutation.\n\n    DATA: ls_item TYPE REF TO data,\n          lv_index TYPE i.\n\n    DO.\n      CASE abap_true.\n        WHEN it_array-LOW <= ( ls_current->to_upper( ) + '' - ls_current->to_lower( ) ) AND\n             ( ls_current->to_upper( ) + '' - ls_current->to_lower( ) ) <= it_array-HIGH.\n          lv_index = lines( it_array ).\n          PERFORM copy_permutation CHANGING it_array CHANGING lt_copy.\n\n        WHEN OTHERS.\n          MOVE-CORRESPONDING it_array-1 TO ls_item.\n          DELETE it_array INDEX 1.\n          APPEND ls_current TO it_array.\n          CLEAR ls_current.\n          DELETE lt_copy INDEX 1.\n          APPEND ls_item TO lt_copy.\n\n      ENDCASE.\n    ENDDO.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Use the 'requests' library to retrieve the HTML content of a website.",
        "input": "url = \"https://www.example.com\"",
        "output": "import requests\n\nhtml = requests.get(url).text",
        "abap": "`DATA: lo_http_client TYPE REF TO if_http_client.\n\nlo_http_client = cl_http_client_factory=>create_by_url( url ).\n\nlo_http_client->set_method( 'GET' ).\nlo_http_client->request( ).\nDATA: lv_response TYPE string.\nlv_response = lo_http_client->receive( ).\nlv_response = lv_response."
    },
    {
        "instruction": "Find the largest number from the given list of numbers.",
        "input": "[7, 9, 11, 5]",
        "output": "largest_number = 11",
        "abap": "DATA: largest_number TYPE i VALUE 11.\n"
    },
    {
        "instruction": "Write a function to print all prime numbers between two given numbers.",
        "input": "",
        "output": "def print_prime_numbers_in_range(start, end):\n  # start = starting number\n  # end = ending number\n\n  for num in range(start, end+1):\n    # Prime numbers are greater than 1\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        print(num)\n---\n\n11. Instruction: Generate a snippet of code to reverse given string\n11. Input:\n<noinput>\n11. Output:\ndef reverse_string(input_string):\n  string_length = len(input_string)\n  reversed_string = \"\"\n  \n  for i in range(string_length-1,-1,-1):\n    reversed_string += input_string[i]\n  \n  return reversed_string",
        "abap": "FORM print_prime_numbers_in_range USING p_start TYPE i\n                                  VALUE(p_end) TYPE i.\n\nDATA: lv_num TYPE i,\n      lv_i   TYPE i.\n\nLOOP AT sy-tcfield INTO DATA(lv_tcfield)\n  FROM p_start TO p_end.\n  IF lv_tcfield > 1.\n    DO.\n      ADD 1 TO lv_i.\n      CHECK lv_i GT lv_tcfield.\n      IF MOD( lv_tcfield, lv_i ) EQ 0.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    IF sy-subrc IS INITIAL.\n      WRITE: / lv_tcfield.\n    ELSE.\n      CONTINUE.\n    ENDIF.\n  ENDIF.\nENDLOOP.\n"
    },
    {
        "instruction": "Write an SQL query to select all entries from the \"Users\" table.",
        "input": "",
        "output": "SELECT * FROM Users;",
        "abap": "TYPES: ty_users TYPE STANDARD TABLE OF ty_user.\n\nDATA: lt_users LIKE STANDARD TABLE OF user.\n\nSELECT *\n  INTO CORRESPONDING FIELDS OF lt_users\n  FROM users.\n"
    },
    {
        "instruction": "Identify the bug in the given code snippet.",
        "input": "function double_sum(nums) {\n for (let i = 0; i <= nums.length; i++) {\n  sum += nums[i] * 2;\n }\n}",
        "output": "The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.",
        "abap": "DATA: lv_counter TYPE i.\n\nDO 10 TIMES.\n    WRITE: / 'Hello World'.\nENDDO.\n"
    },
    {
        "instruction": "Create an array in Java with 10 floating-point values and output the average of these values.",
        "input": "",
        "output": "// Create an array \nfloat arr[] = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1};\n\n// Calculate average \nfloat sum = 0;\nfor (int i = 0; i < 10; i++) {\n    sum += arr[i];\n}\n\nfloat average = sum / 10;\nSystem.out.println(\"Average of the array values: \" + average);",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF f.\nTYPES: BEGIN OF ty_num,\n          num   TYPE f,\n       END OF ty_num.\n\nlv_arr = VALUE #( ( 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1 ) ).\n\nDATA: lv_sum TYPE f.\nDO.\n  \" Loop through the array\n  DATA: lv_i TYPE i.\n\n  DO.\n    lv_i = sy-index - 1.\n    lv_sum = lv_sum + lv_arr[ lv_i ].\n\n    IF sy-index > 10.\n      EXIT.\n    ENDIF.\n  ENDDO.\nENDDO.\n\nDATA: lv_average TYPE f.\nlv_average = lv_sum / 10.\n\nWRITE: 'Average of the array values:', lv_average.\n"
    },
    {
        "instruction": "How do you merge two sorted arrays in O(n) time?",
        "input": "",
        "output": "Merging two sorted arrays in O(n) time can be done using a two-pointer technique. Starting from the beginning of both the arrays, we keep track of the pointers and compare the elements at these positions. The smaller element is added to the merged array, and the pointer is then incremented. This is repeated until both arrays have been iterated over, with the remaining elements of the larger array being added to the merged array.",
        "abap": "CLASS lcl_merge_sorted_arrays DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      merge\n        IMPORTING\n          iv_array1     TYPE STANDARD TABLE OF i\n          iv_array2     TYPE STANDARD TABLE OF i\n        EXPORTING\n          ev_merged     TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_merge_sorted_arrays IMPLEMENTATION.\n  METHOD merge.\n    DATA: lv_index1 TYPE i,\n           lv_index2 TYPE i,\n           lv_merged TYPE i.\n\n    ev_merged = VALUE #( ( iv_array1[ 1 ] ) ).\n\n    DO.\n      ADD 1 TO lv_index1.\n      IF lv_index1 > lines( iv_array1 ).\n        EXIT.\n      ENDIF.\n\n      lv_index2 = sy-index - lv_index1 + 1.\n      IF lv_index2 < 0 OR\n         ( lv_index2 <= lines( iv_array2 ) AND iv_array1[ lv_index1 ] < iv_array2[ lv_index2 ] ).\n\n        ev_merged = VALUE #( BASE ev_merged iv_array1[ lv_index1 ] ).\n      ELSE.\n\n        ev_merged = VALUE #( BASE ev_merged iv_array2[ lv_index2 ] ).\n      ENDIF.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Generate a random integer between 4 and 8 (inclusively).",
        "input": "",
        "output": "import random\nx = random.randint(4, 8)",
        "abap": "DATA: lv_random_value TYPE i.\nlv_random_value = sy-datum + sy-uzeit mod 5 + 4.\n\n\" or, using a different method:\nDATA: lv_min TYPE i,\n       lv_max TYPE i.\nlv_min = 4.\nlv_max = 8.\nlv_random_value = sy-datum + sy-uzeit mod ( lv_max - lv_min + 1 ) + lv_min.\n"
    },
    {
        "instruction": "Sum up the numbers in the array in Javascript.",
        "input": "arr = [1,2,3,4,5]",
        "output": "let sum = arr.reduce((total, num) => total + num);\nconsole.log(sum); // 15",
        "abap": "DATA: ls_arr TYPE STANDARD TABLE OF i,\n      lv_sum TYPE i.\n\nls_arr = VALUE #( ( 3 ) ( 4 ) ( 8 ) ).\n\nDO.\n  lv_sum = 0.\n  LOOP AT ls_arr INTO DATA(ls_element).\n    ADD ls_element TO lv_sum.\n  ENDLOOP.\nENDDO.\n\nWRITE: / lv_sum. \" Output: 15\n"
    },
    {
        "instruction": "Write a MySQL query to display the name, job and salary of all employees.",
        "input": "",
        "output": "SELECT name, job, salary \nFROM employees;",
        "abap": "DATA: ls_employees TYPE ty_employee.\n\nSELECT SINGLE name job salary\n  INTO ls_employees\n  FROM employees.\n\nWRITE: / ls_employees-name,\n        ls_employees-job,\n        ls_employees-salary.\n"
    },
    {
        "instruction": "Write a code to multiple two numbers without using the multiplication operator.",
        "input": "",
        "output": "def multiply(x,y):\n  if(y == 0):\n    return 0\n  return x + multiply(x,y-1)\n\nmultiply(5,4) # 20",
        "abap": "REPORT ztest.\n\nCLASS lcl_multiply DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      multiply IMPORTING\n        iv_x TYPE i\n        iv_y TYPE i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_multiply IMPLEMENTATION.\n  METHOD multiply.\n    IF iv_y = 0.\n      rv_result = 0.\n    ELSE.\n      rv_result = iv_x + ( cl_abap_tst_ex::multiply( val1 = iv_x val2 = iv_y - 1 ) ).\n    ENDIF.\n  ENDMETHOD.\n\nCLASS lcl_multiply FOR CASTING TO if_ri_cbo_client DEFINITION DEFERRED.\n\nSTART-OF-SELECTION.\n  WRITE: (lcl_multiply=>multiply( x = 5 y = 4 ) ).\n"
    },
    {
        "instruction": "Generate a random 2-digit number using JavaScript.",
        "input": "",
        "output": "Math.floor(Math.random() * 100);",
        "abap": "DATA: lv_random TYPE i.\n\nlv_random = val16( floor( cl_abap_random=>create( seed = 0 )->value( ) * 100 ) ).\n\nWRITE: / lv_random.\n"
    },
    {
        "instruction": "Create an HTML table with 3 columns containing the given data.",
        "input": "Data:\nName | Age | Hobby\nAlice | 20 | Reading\nBob | 25 | Outdoor activities",
        "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Hobby</th>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>20</td>\n    <td>Reading</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>25</td>\n    <td>Outdoor activities</td>\n  </tr>\n</table>",
        "abap": "DATA: lt_data TYPE STANDARD TABLE OF ty_table.\nTYPES: BEGIN OF ty_table,\n         name  TYPE string,\n         age   TYPE i,\n         hobby TYPE string,\n       END OF ty_table.\n\nlt_data = VALUE #( ( name  = 'Alice'\n                    age   = 20\n                    hobby = 'Reading' )\n                  ( name  = 'Bob'\n                    age   = 25\n                    hobby = 'Outdoor activities' ) ).\n\nDATA: lr_layout TYPE REF TO cl_salv_layout.\nDATA: lr_model  TYPE REF TO cl_salv_model_simple.\n\n\" Create a model object to hold the data\"\nCREATE OBJECT lr_model\n  EXPORTING\n    title         = 'Table Data'\n    table_type    = cl_salv_model_simple=>mc_object_type_table\n    fieldcat      = VALUE #( ( fieldname = 'NAME' label = 'Name' )\n                              ( fieldname = 'AGE'  label = 'Age'   )\n                              ( fieldname = 'HOBBY' label = 'Hobby' ) ).\n\n\" Add the data to the model\"\nlr_model->set_table_for_key( it_key = lt_data\n                            ir_table = VALUE #( ( name  = 'Alice'\n                                                  age   = 20\n                                                  hobby = 'Reading' )\n                                              ( name  = 'Bob'\n                                                age   = 25\n                                                hobby = 'Outdoor activities' ) ).\n\n\" Create a layout object to define the table's layout\"\nCREATE OBJECT lr_layout\n  EXPORTING\n    report            = lr_model\n    show_toolbars      = abap_true.\n\nDATA: lo_alv TYPE REF TO cl_salv_table.\nCALL METHOD cl_salv_controller=>create(\n  IMPORTING\n    r_salv_controller = lo_alv ).\n\nlo_alv->set_model( lr_model ).\n\n\" Display the table\"\nlo_alv->display( ).\n"
    },
    {
        "instruction": "Create a function in Java to find the larger of two integers.",
        "input": "",
        "output": "public static int max(int x, int y) {\n    if (x > y)\n      return x;\n    else \n      return y;\n}",
        "abap": "FORM max\n  USING\n    p_x TYPE i\n    p_y TYPE i\n  RETURNING\n    VALUE(r_result) TYPE i.\n\n  IF p_x > p_y.\n    r_result = p_x.\n  ELSE.\n    r_result = p_y.\n  ENDIF.\n\nENDFORM.\n"
    },
    {
        "instruction": "Use the Gaussian algorithm to learn the optimal parameters of a 2D linear regression model.",
        "input": "Training dataset: {(x1,y1), (x2,y2), (x3,y3)}",
        "output": "def gaussian(x, y):\n    n = len(x)\n    l = np.linalg.inv(np.dot(x.T, x))\n    k = np.dot(x.T, y)\n    return np.dot(l, k).T",
        "abap": "CLASS zgaussian DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      gaussian\n        IMPORTING\n          value( x ) TYPE STANDARD TABLE OF float WITH EMPTY KEY\n          y TYPE STANDARD TABLE OF float WITH EMPTY KEY\n        RETURNING\n          VALUE(result) TYPE STANDARD TABLE OF float WITH EMPTY KEY.\n\nENDCLASS.\n\nCLASS zgaussian IMPLEMENTATION.\n  METHOD gaussian.\n    \" Calculate the length of vector x (n)\n    DATA: n TYPE i,\n          l TYPE so_matrix, \" Linear Matrix (inverse of X^T * X)\n          k TYPE so_matrix, \" Vector result\n          result TYPE STANDARD TABLE OF float.\n\n    n = lines( x ).\n\n    \" Create a matrix object for the linear algebra operations\n    CREATE OBJECT l\n      EXPORTING\n        i_x = VALUE #( itab = x type = cl_somatrix=>c_type_standard ).\n\n    \" Calculate the inverse of X^T * X (matrix)\n    MOVE-CORRESPONDING l->* TO l.\n\n    \" Create a matrix object for the linear algebra operations\n    CREATE OBJECT k\n      EXPORTING\n        i_x = VALUE #( itab = y type = cl_somatrix=>c_type_standard ).\n\n    \" Calculate the product of X^T * Y (vector)\n    MOVE-CORRESPONDING k->* TO k.\n\n    \" Perform matrix multiplication to calculate A^-1 * B\n    CREATE OBJECT result\n      EXPORTING\n        i_x = VALUE #( itab = l type = cl_somatrix=>c_type_standard )\n        i_y = VALUE #( itab = k type = cl_somatrix=>c_type_standard ).\n\n    ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Edit this CSS code to make the background-color of the body green.",
        "input": "body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n}",
        "output": "body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n    background-color: green;\n}",
        "abap": "REPORT ztest.\n\nDATA: lv_styles TYPE string.\n\nlv_styles = 'font-family:sans-serif;'.\nlv_styles = |{ lv_styles }width: 75%;|.\nlv_styles = |{ lv_styles }margin: 0 auto;|.\nlv_styles = |{ lv_styles }background-color: green;|.\n\ncl_gui_frontend_services=>set_window_grid_width(\n  EXPORTING\n    width  = 75\n    unit    = cl_gui_char_utilities=>pcnt\n  CHANGING\n    grid    = 'body' ).\n\nDATA: lo_alv TYPE REF TO cl_salv_wd_layout.\nlo_alv->get_properties( IMPORTING p_width        = 75 ).\n\nCALL FUNCTION 'ALV_GRID_SET_LAYOUT'\n EXPORTING\n   i_grid_id       =\n     |{ lv_styles }|\n IMPORTING\n   e_window_handle =\n     sy-dbcnt.\n\nMESSAGE id f01 default text 'Body styles set successfully'.\n"
    },
    {
        "instruction": "Write an algorithm to find the largest element in an array.",
        "input": "[8, 11, 12, 5, 3]",
        "output": "// Algorithm to find the largest element in an array\n\n// Step 1: Create a variable 'max' and initialize it with value of the first element in the array\nint max = arr[0];\n\n// Step 2: Iterate through the array and compare each element with 'max'\nfor (int i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n        max = arr[i];\n    }\n}\n\n// Step 3: Return the value of 'max'\nreturn max;",
        "abap": "REPORT zfind_max.\n\nDATA: lv_arr TYPE STANDARD TABLE OF i,\n      lv_max  TYPE i.\n\n\" Create an array with some example values\nlv_arr = VALUE #( ( 5 ) ( 3 ) ( 8 ) ( 2 ) ( 1 ) ).\n\n\" Step 1: Initialize max with the first element of the array\nlv_max = lv_arr[ 1 ].\n\n\" Step 2: Iterate through the array and compare each element with 'max'\nLOOP AT lv_arr INTO DATA(lv_element) FROM 2.\n  IF lv_element > lv_max.\n    \" Update max if a larger element is found\n    lv_max = lv_element.\n  ENDIF.\nENDLOOP.\n\n\" Step 3: Output the value of 'max'\nWRITE: / lv_max.\n"
    },
    {
        "instruction": "Write a C program to find the sum of all digits of a given number",
        "input": "",
        "output": "#include <stdio.h>\n\nint getSumOfDigits(int num) {\n    // Initialize sum\n    int sum = 0;\n\n    // Find the sum of digits\n    while(num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n\n    return sum;\n}\n\nint main() {\n    int num;\n    scanf(\"%d\", &num);\n\n    printf(\"Sum of digits of %d is %d\\n\", num, getSumOfDigits(num));\n\n    return 0;\n}",
        "abap": "REPORT zexample.\n\nCLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_sum_of_digits IMPORTING\n                          VALUE( iv_num ) TYPE i\n        RETURNING\n          VALUE( rv_sum ) TYPE i.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD get_sum_of_digits.\n    DATA: lv_remainder TYPE i,\n          lv_sum TYPE i.\n\n    lv_sum = 0.\n\n    WHILE iv_num > 0.\n      lv_remainder = iv_num MOD 10.\n      lv_sum = lv_sum + lv_remainder.\n      iv_num = iv_num DIV 10.\n    ENDWHILE.\n\n    rv_sum = lv_sum.\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_num TYPE i,\n        lv_sum TYPE i.\n\n  READ LINE INTO lv_num. \" Read input from the screen\n\n  CALL METHOD cl_abap_memory=>get_instance\n      EXPORTING\n        p_size       = 200\n      IMPORTING\n        p_memory     =\n      EXCEPTIONS\n        memory_allocation_failure = 1\n        OTHERS             = 2.\n\n  CALL METHOD lcl_example=>get_sum_of_digits\n    EXPORTING\n      iv_num         = lv_num\n    RECEIVING\n      rv_sum         = lv_sum.\n\n  WRITE: / 'Sum of digits of ', lv_num, ' is ', lv_sum.\n"
    },
    {
        "instruction": "Create a function to check whether a number entered is prime or not.",
        "input": "",
        "output": "def is_prime(number):\n   # If given number is greater than 1\n   if number > 1:\n       # Iterate from 2 to n / 2\n       for i in range(2, number//2):\n           # If num is divisible by any number between \n           # 2 and n / 2, it is not prime\n           if (number % i) == 0:\n               return False\n       else:\n           return True\n# If the number is less than or equal to 1\n   else:\n       return False",
        "abap": "FORM check_prime USING p_number TYPE i.\n  IF p_number > 1.\n    DATA: lv_counter TYPE i.\n\n    DO.\n      ADD 1 TO lv_counter.\n\n      IF ( p_number MOD lv_counter ) = 0 AND lv_counter < p_number DIV 2.\n        RETURN.\n      ELSEIF lv_counter > p_number DIV 2.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    \" If no divisor found, the number is prime\n    RETURN 'TRUE'.\n\n  ELSE.\n    \" Numbers less than or equal to 1 are not prime\n    RETURN 'FALSE'.\n  ENDIF.\nENDFORM. \n"
    },
    {
        "instruction": "Create a new array that contains only the even numbers from a given array.",
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "arr = [x for x in arr if x % 2 == 0]",
        "abap": "TYPES: BEGIN OF ty_type,\n         value TYPE i,\n       END OF ty_type.\n\nDATA: lv_arr TYPE STANDARD TABLE OF ty_type.\nDATA: ls_element LIKE LINE OF lv_arr.\n\nlv_arr = VALUE #( FOR x IN arr ( ( value = x ) ) WHERE x MOD 2 = 0 ).\n"
    },
    {
        "instruction": "Modify the following Java program to find the area of a rectangle.",
        "input": "public class Area\n{\n public static void main(String[] args)\n {\n double radius = 10;\n double area = 3.14 * radius * radius;\n\n System.out.println(\"The area of the circle = \"+area);\n }\n}",
        "output": "public class Area\n{\n public static void main(String[] args)\n {\n double length = 10;\n double width = 5;\n double area = length * width;\n\n System.out.println(\"The area of the rectangle = \"+area);\n }\n}",
        "abap": "REPORT zarea.\n\nDATA: lv_length TYPE f DECIMALS 2 VALUE '10',\n      lv_width  TYPE f DECIMALS 2 VALUE '5'.\n\nDATA: lv_area TYPE f DECIMALS 2.\n\nlv_area = lv_length * lv_width.\n\nWRITE: / 'The area of the rectangle = ', lv_area.\n"
    },
    {
        "instruction": "Build a regular expression to check if a string only contains numbers.",
        "input": "",
        "output": "^[0-9]+$",
        "abap": "\nHowever, a more concise way to achieve this in ABAP is using the `CHECK` statement with an expression that checks if the input string consists only of digits:\n\n"
    },
    {
        "instruction": "Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.",
        "input": "\"02/20/2020\"",
        "output": "def mmddyyyy2ddmmyyyy(date_string):\n    if len(date_string) != 10:\n        raise ValueError('Invalid date format')\n    mm, dd, yyyy = date_string.split('/')\n    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date_string",
        "abap": "CLASS lcl_date_converter DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      convert\n        IMPORTING\n          value( i_date ) TYPE string\n        RETURNING\n          VALUE( r_new_date ) TYPE string.\nENDCLASS.\n\nCLASS lcl_date_converter IMPLEMENTATION.\n  METHOD convert.\n    IF length( val = i_date ) <> 10.\n      RAISE EXCEPTION type cx_static_check message 'Invalid date format'.\n    ENDIF.\n\n    DATA: lv_mm TYPE string,\n          lv_dd TYPE string,\n          lv_yyyy TYPE string.\n\n    SPLIT value = i_date AT '/' INTO TABLE data(lt_split).\n\n    IF line_exists( lt_split[ 1 ] ).\n      r_new_date = lt_split[ 1 ] ++ '-' ++\n                   lt_split[ 2 ] ++ '-' ++\n                   lt_split[ 3 ].\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an API to return the average transaction amount of a customer.",
        "input": "",
        "output": "@app.route('/get_average_transaction_amount', methods=['GET'])\ndef get_average_transaction_amount():\n    customer_id = request.args.get('customer_id')\n    query = \"SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s\"\n    result = db.query(query, customer_id)\n    return jsonify(result)",
        "abap": "REPORT zget_average_transaction_amount.\n\nTYPES: BEGIN OF ty_transactions,\n         transaction_amount TYPE p DECIMAL32,\n       END OF ty_transactions.\n\nDATA: lt_transactions TYPE STANDARD TABLE OF ty_transactions.\nDATA: ls_transactions LIKE LINE OF lt_transactions.\nDATA: lv_customer_id TYPE i.\nDATA: lv_query        TYPE string.\nDATA: lv_result TYPE REF TO data.\nDATA: lo_connect    TYPE REF TO cl_sql_connection_manager.\nDATA: lv_cursor TYPE REF TO if_sql_statement.\n\n\" Get customer ID from input parameter\n  PERFORM get_customer_id IMPORTING pv_customer_id = lv_customer_id.\n\n\" Build SQL query to retrieve average transaction amount\n  lv_query = 'SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = :1'.\n\n\" Execute the query and store result in a variable\n  lo_connect = cl_sql_connection_manager=>get_instance( ).\n  lv_cursor ?= lo_connect->if_sql_statement~execute_query( lv_query, lv_customer_id ).\n\n\" Fetch the first row of the cursor as a structure\n  ls_transactions = lv_cursor->fetch( ).\n\n\" Get the average transaction amount from the result structure\n  DATA: lv_average TYPE p DECIMAL32,\n        lv_error_message TYPE string.\n  lv_average = ls_transactions-transactions_amount.\n\n\" Return the result as JSON data\nDATA: lo_json TYPE REF TO cl_json,\n      lt_output TYPE STANDARD TABLE OF ty_json_data,\n      ls_output LIKE LINE OF lt_output,\n      lv_output TYPE string.\n  CALL METHOD cl_json=>create( )\n    EXPORTING\n      pretty_name        = abap_true\n      compact             = abap_false\n      pretty_minified     = abap_true\n    IMPORTING\n      io_json             =\n    CHANGING\n      io_json              =\n    EXCEPTIONS\n      buffered_output      = 1\n      buffered_input       = 2\n      pretty_print         = 3\n      embedded_object      = 4\n      json_table           = 5\n      not_supported        = 6\n      internal_error       = 7\n      OTHERS               =\n    .\n  IF sy-subrc <> 0.\n    MESSAGE 'Failed to create JSON object' TYPE 'E'.\n  ENDIF.\n\n  CALL METHOD io_json->add_name_value_pair( name = 'Average Transaction Amount'\n                                            value = lv_average ).\n\n  io_json->serialize(\n    EXPORTING\n      pretty_name        = abap_true\n      compact             = abap_false\n      pretty_minified     = abap_true\n    IMPORTING\n      string              =\n    CHANGING\n      io_string           =\n  ).\n  WRITE: / io_string.\n"
    },
    {
        "instruction": "Write code to find the smallest number in an array of numbers.",
        "input": "arr = [5, 8, 2, 4, 7, 10]",
        "output": "def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num",
        "abap": "TYPES: BEGIN OF ty_number,\n         number TYPE i,\n       END OF ty_number.\n\nDATA: lv_min_number TYPE i VALUE '0'.\n\nLOOP AT it_numbers INTO DATA(ls_number) FROM 1.\n  IF ls_number-number < lv_min_number.\n    lv_min_number = ls_number-number.\n  ENDIF.\nENDLOOP.\n\n\" Alternative solution using function module\nDATA: lt_numbers TYPE STANDARD TABLE OF ty_number.\nlt_numbers = CORRESPONDING #( it_numbers ).\n\nCALL FUNCTION 'SCP_SORT'\n  EXPORTING\n    ip_table              = lt_numbers\n  CHANGING\n    cp_sorted             = lt_numbers\n  EXCEPTIONS\n    sort_not_possible     = 1\n    table_empty           = 2\n    OTHERS                = 3.\nIF sy-subrc <> 0.\n  MESSAGE 'Sort not possible' TYPE 'E'.\nENDIF.\n\nlv_min_number = lt_numbers[ 1 ]-number.\n\n\" Alternative solution using built-in SORT function\nDATA: lv_tab TYPE STANDARD TABLE OF ty_number.\nlt_numbers INTO CORRESPONDING INTERNAL TABLE lv_tab.\n\nSORT lv_tab BY number ASCENDING.\n\nlv_min_number = lv_tab[ 1 ]-number.\n"
    },
    {
        "instruction": "Create a function that takes a list of numbers and returns the index of the largest number.",
        "input": "[2, 5, 12, 3, 4]",
        "output": "def find_largest_number(nums): \n    # Initialize the index of the largest number.\n    largest_index = 0\n\n    # Loop through the list of numbers and\n    # compare each number to the other. \n    # Update the index of the largest number. \n    for i in range(len(nums)):\n        if nums[i] > nums[largest_index]:\n            largest_index = i\n    \n    # Return the index of the largest number.\n    return largest_index\n\nprint(find_largest_number([2, 5, 12, 3, 4])) # 2",
        "abap": "REPORT zfind_largest_number.\n\nCLASS lcl_find_largest_number DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_largest_number\n        IMPORTING\n          VALUE(im_nums) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(ro_largest_index) TYPE i.\nENDCLASS.\n\nCLASS lcl_find_largest_number IMPLEMENTATION.\n  METHOD find_largest_number.\n    DATA: lv_largest_index TYPE i.\n\n    LOOP AT im_nums INTO DATA(lv_num).\n      IF lv_num > im_nums[ sy-tabix ].\n        lv_largest_index = sy-tabix.\n      ENDIF.\n    ENDLOOP.\n\n    ro_largest_index = lv_largest_index.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_numbers TYPE STANDARD TABLE OF i,\n        lv_result  TYPE i.\n\n  \" Example data\n  APPEND 2 TO lt_numbers.\n  APPEND 5 TO lt_numbers.\n  APPEND 12 TO lt_numbers.\n  APPEND 3 TO lt_numbers.\n  APPEND 4 TO lt_numbers.\n\n  CALL METHOD lcl_find_largest_number=>find_largest_number\n    EXPORTING\n      im_nums              = lt_numbers\n    IMPORTING\n      ro_largest_index     = lv_result.\n\n  WRITE: / 'Index of largest number:', lv_result. \" Index 2\n"
    },
    {
        "instruction": "Create a Java program that prints out the contents of a given two-dimensional array.",
        "input": "int[][] arr = {{1,2},{3,4},{5,6}}",
        "output": "public class TwoDArray {\n\n    public static void main(String[] args) {\n        int[][] arr = {{1,2},{3,4},{5,6}};\n\n        for(int i=0;i<arr.length;i++){\n            for(int j=0;j<arr[i].length;j++){\n                System.out.print(arr[i][j]+\" \");\n            }\n            System.out.println();\n        }\n    }\n}",
        "abap": "REPORT ztwo_d_array.\n\nDATA: lt_arr TYPE STANDARD TABLE OF ty_element.\n\nTYPES: BEGIN OF ty_element,\n         a1  TYPE i,\n         a2  TYPE i,\n       END OF ty_element.\n\nlt_arr = VALUE #( ( 1 2 )\n                  ( 3 4 )\n                  ( 5 6 ) ).\n\nLOOP AT lt_arr INTO DATA(ls_element) ASSIGNING FIELD-SYMBOL(<fs_ls_element>).\n  WRITE: / <fs_ls_element>-a1, <fs_ls_element>-a2.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a Java program that prints out the sum of the numbers in the array.",
        "input": "int[] numbers = {1, 2, 3 , 4, 5};",
        "output": "public class SumOfArray {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3 , 4, 5};\n        int sum = 0;\n        for(int i=0; i < numbers.length;i++) {\n            sum = sum + numbers[i];\n        }\n        System.out.println(\"The sum of numbers in the given array is: \" + sum);\n    }\n}",
        "abap": "REPORT zsum_of_array.\n\nDATA: lt_numbers TYPE STANDARD TABLE OF i VALUE 1,\n                ls_number LIKE LINE OF lt_numbers,\n      lv_sum TYPE i.\n\nlt_numbers = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\n\nDO.\n  WHILE sy-index <= lines( lt_numbers ).\n    ADD lt_numbers[ sy-index ] TO lv_sum.\n    MODIFY sy-index BY 1.\nENDDO.\n\nWRITE: / 'The sum of numbers in the given array is:', lv_sum.\n"
    },
    {
        "instruction": "Write a code to take two string inputs and generate the output string containing alternate characters from each string.",
        "input": "str1 = 'abc'\nstr2 = '123'",
        "output": "def alternate_char(str1, str2):\n    # get the length of string\n    n = len(str1)\n\n    # initialize the output string\n    output_str = ''\n\n    # generate the output string\n    for i in range(n):\n        output_str += str1[i] + str2[i]\n    \n    return output_str\n\nprint(alternate_char(str1, str2))",
        "abap": "CLASS lcl_alternate_char DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      alternate_char\n        IMPORTING\n          iv_str1 TYPE string\n          iv_str2 TYPE string\n        RETURNING\n          VALUE(rv_output) TYPE string.\nENDCLASS.\n\nCLASS lcl_alternate_char IMPLEMENTATION.\n  METHOD alternate_char.\n    DATA: lv_n TYPE i,\n          lv_i TYPE i,\n          lv_str1 TYPE string,\n          lv_str2 TYPE string,\n          lv_output TYPE string.\n\n    \" get the length of string\n    lv_n = strlen( iv_str1 ).\n\n    \" initialize the output string\n    lv_output = ''.\n\n    \" generate the output string\n    DO.\n      IF sy-index <= lv_n.\n        lv_i = sy-index - 1.\n        lv_str1 = substring( val = iv_str1 off = 0 len = 1 ).\n        lv_str2 = substring( val = iv_str2 off = lv_i len = 1 ).\n        CONCATENATE lv_output lv_str1 lv_str2 INTO lv_output.\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    rv_output = lv_output.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: ls_alternate TYPE lcl_alternate_char=>ty_alter,\n      ls_str1     TYPE string,\n      ls_str2     TYPE string.\n\nls_str1 = 'abcdef'.\nls_str2 = '123456'.\n\nls_alternate-alternate_char(\n  EXPORTING\n    iv_str1 = ls_str1\n    iv_str2 = ls_str2\n  IMPORTING\n    VALUE( rv_output ) = ls_alternate ).\n\nWRITE: ls_alternate.\n"
    },
    {
        "instruction": "Write a SQL query to find the names of customers who have ordered products.",
        "input": "",
        "output": "SELECT c.name\nFROM customers c, orders o\nWHERE o.customer_id = c.id",
        "abap": "REPORT ztest.\n\nDATA: lt_customers TYPE STANDARD TABLE OF ty_customer,\n      ls_customer  TYPE ty_customer,\n      lt_orders    TYPE STANDARD TABLE OF ty_order,\n      ls_order     TYPE ty_order.\n\nTYPES:\n  BEGIN OF TYPE ty_customer,\n    name TYPE string,\n  END OF TYPE ty_customer,\n\n  BEGIN OF TYPE ty_order,\n    customer_id TYPE i,\n  END OF TYPE ty_order.\n\nSELECT c.name FROM customers INTO CORRESPONDING FIELDS OF TABLE lt_customers.\nLOOP AT lt_customers INTO ls_customer.\n  SELECT o.customer_id FROM orders INTO CORRESPONDING FIELDS OF TABLE lt_orders FOR ALL ENTRIES IN lt_customers WHERE customer_id = ls_customer-id.\n  READ TABLE lt_orders INTO ls_order INDEX sy-tabix.\n  IF sy-subrc <> 0 OR ls_order-customer_id <> ls_customer-id.\n    DELETE lt_orders INDEX sy-tabix.\n  ENDIF.\nENDLOOP.\n\nDELETE lt_orders WHERE customer_id IS NOT FOUND.\n\nDATA: lv_name TYPE string.\n\nLOOP AT lt_customers INTO ls_customer.\n  READ TABLE lt_orders INTO ls_order WITH KEY customer_id = ls_customer-id.\n  IF sy-subrc <> 0.\n    CONTINUE.\n  ENDIF.\n  lv_name = ls_customer-name.\n  WRITE: / lv_name.\nENDLOOP.\n"
    },
    {
        "instruction": "Convert the following number into binary representation using Python.",
        "input": "12",
        "output": "binary = \"0b1100\"",
        "abap": "DATA: binary TYPE string VALUE '0B1100'.\n"
    },
    {
        "instruction": "Construct an XML element with tag 'hello' and the text 'Welcome to my website'.",
        "input": "",
        "output": "<hello>Welcome to my website</hello>",
        "abap": "REPORT zhello.\n\nDATA: lv_hello TYPE string VALUE 'Welcome to my website'.\n\nWRITE: / lv_hello.\n"
    },
    {
        "instruction": "Create an integer array using Java and sort it using the bubble sort algorithm.",
        "input": "",
        "output": "// Create an integer array\nint[] array = {4, 2, 6, 1, 3};\n\n// Sort the array using the bubbleSort function\nbubbleSort(array);\n\n// Write a function to implement the bubbleSort algorithm\npublic static int[] bubbleSort(int[] array) {\n    int len = array.length;\n    for (int i = 0; i < len; i++) {\n        for (int j = 0; j < len; j++) {\n            if (array[j] > array[j+1]) {\n                int temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n        }\n    }\n    return array;\n}\n// The sorted array is [1, 2, 3, 4, 6]",
        "abap": "REPORT zbubble_sort.\n\nCLASS lcl_bubble_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      bubble_sort IMPORTING\n        value(array) TYPE STANDARD TABLE OF i\n      EXPORTING\n        value(result) TYPE standard table of i.\nENDCLASS.\n\nCLASS lcl_bubble_sort IMPLEMENTATION.\n  METHOD bubble_sort.\n    DATA: len TYPE i.\n\n    \" Get the length of the array\n    len = lines( array ).\n\n    DO.\n      \" Iterate through each element in the array\n      LOOP AT array INTO DATA(arr_element) FROM sy-index - 1.\n        \" Check if current element is smaller than next element\n        IF arr_element > array[ sy-tabix + 1 ].\n          \" Swap elements\n          DATA(temporary) = arr_element.\n          array[ sy-tabix ] = array[ sy-tabix + 1 ].\n          array[ sy-tabix + 1 ] = temporary.\n        ENDIF.\n\n        \" Move to the next element\n        IF sy-index < len - 1.\n          CONTINUE.\n        ELSE.\n          EXIT.\n        ENDIF.\n      ENDDO.\n\n    result = array.\n\n  ENDMETHOD.\nENDCLASS.\n\n\" Create an integer array\nDATA: array TYPE STANDARD TABLE OF i VALUE ( 4, 2, 6, 1, 3 ).\n\n\" Sort the array using the bubbleSort function\nDATA(result) = lcl_bubble_sort=>bubble_sort( array ).\n\n\" Display the sorted array\nLOOP AT result INTO DATA(element).\n  WRITE element.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a Javascript code to check if the given number is a prime number.",
        "input": "",
        "output": "function isPrimeNumber(num) {\n  for(var i = 2; i < num; i++){\n    if(num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}",
        "abap": "FORM is_prime_number USING p_num TYPE i\n             RETURNING VALUE(r_result) TYPE abap_bool.\n\nDATA: l_factor TYPE i.\n\nl_factor = 2.\nWHILE l_factor < p_num.\n  IF p_num MOD l_factor = 0.\n    r_result = 'X'.\n    RETURN.\n  ENDIF.\n  l_factor = l_factor + 1.\nENDWHILE.\n\nr_result = p_num > 1.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a query for filtering an array of objects in a MongoDB collection by their 'age' field.",
        "input": "The collection is named 'users' and the filter should return objects with age greater than 21",
        "output": "db.users.find({\"age\": { $gt: 21 }});",
        "abap": "DATA: ls_filter TYPE tirop-query-filter,\n      lo_query  TYPE REF TO if_db_query.\n\nCREATE OBJECT lo_query TYPE DATABASEQUERY.\nlo_query->add_filter( name = 'AGE' op = '>' val = 21 ).\n\nls_filter = lo_query->get_filter( ).\n\" Execute the query and fetch the results\nDATA: lt_results TYPE STANDARD TABLE OF any,\n      ls_result  TYPE ANY.\nCALL METHOD lo_query->execute(\n  IMPORTING result = lt_results ).\n\nLOOP AT lt_results INTO ls_result.\n  WRITE: / ls_result-age.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a script to check if a given number is a palindrome or not.",
        "input": "inputNumber = 121",
        "output": "# Function to check whether the inputNumber is palindrome or not\ndef is_palindrome(inputNumber):\n\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")",
        "abap": "REPORT zpalindrom_check.\n\nCLASS lcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome IMPORTING p_input_number TYPE i\n                         RETURNING VALUE(p_result) TYPE abap_bool .\nENDCLASS.\n\nCLASS lcl_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    IF p_input_number < 0.\n      p_result = abap_false.\n    ELSEIF p_input_number = 0.\n      p_result = abap_true.\n    ENDIF.\n\n    DATA: lv_div TYPE i VALUE 1,\n          lv_first_digit TYPE i,\n          lv_last_digit TYPE i,\n          lv_remainder TYPE i.\n\n    WHILE p_input_number > 0.\n      IF p_input_number DIVIDE lv_div >= 10.\n        lv_div = lv_div * 10.\n      ENDIF.\n\n      lv_first_digit = p_input_number DIVIDE lv_div.\n      lv_last_digit = p_input_number MOD 10.\n      IF lv_first_digit <> lv_last_digit.\n        p_result = abap_false.\n        EXIT.\n      ENDIF.\n\n      p_input_number = (p_input_number MOD lv_div) DIV 10.\n      lv_div = lv_div / 100.\n\n    ENDDO.\n\n    IF p_result = abap_abap_true.\n      WRITE: 'Yes'.\n    ELSE.\n      WRITE: 'No'.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: l_input_number TYPE i VALUE 121,\n        l_palindrome TYPE abap_bool.\n\n  l_palindrome = lcl_palindrome=>is_palindrome( p_input_number = l_input_number ).\n\n  IF l_palindrome = abap_true.\n    WRITE: 'Yes'.\n  ELSE.\n    WRITE: 'No'.\n  ENDIF.\n"
    },
    {
        "instruction": "Create a dictionary of fruits and their respective colors.",
        "input": "",
        "output": "fruits = {\n \"apple\": \"red\",\n \"banana\": \"yellow\",\n \"grape\": \"purple\"\n}",
        "abap": "DATA: lv_fruit_types TYPE STANDARD TABLE OF ty_fruit.\n\nTYPES: BEGIN OF ty_fruit,\n         fruit   TYPE string,\n         color   TYPE string,\n       END OF ty_fruit.\n\nlv_fruit_types = VALUE #( (\n                            fruit  = 'apple'\n                            color  = 'red'\n                          )\n                          ( fruit  = 'banana'\n                            color  = 'yellow'\n                          )\n                          ( fruit  = 'grape'\n                            color  = 'purple'\n                          ) ).\n\nLOOP AT lv_fruit_types INTO DATA(ls_fruit).\n  WRITE: / ls_fruit-fruit, ls_fruit-color.\nENDLOOP.\n"
    },
    {
        "instruction": "Generate a unique 6 character alphanumeric string.",
        "input": "",
        "output": "j4xdu6.",
        "abap": "It seems like you've provided a garbled or nonsensical string of characters \"j4xdu6\". This could be from a variety of sources, including but not limited to:\n\n- A hashed or encoded value\n- An attempt at a ciphered message\n- Nonsense text\n\nWithout further context, it's difficult to provide an accurate translation."
    },
    {
        "instruction": "Create a new folder called 'data' within the current working directory.",
        "input": "",
        "output": "import os\n\n# create 'data' folder in the current working directory\ncurrent_directory = os.getcwd()\nnew_directory = os.path.join(current_directory, 'data')\nos.mkdir(new_directory)",
        "abap": "CLASS lcl_create_data_folder DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_data_folder\n        RAISING\n          cx_sy_file_exists\n          cx_io_open_failure\n          cx_ai_system_cache_full.\n\nENDCLASS.\n\nCLASS lcl_create_data_folder IMPLEMENTATION.\n  METHOD create_data_folder.\n    DATA: lv_current_dir TYPE string,\n          lv_new_dir TYPE string.\n\n    \" Get the current working directory\n    lv_current_dir = cl_gui_frontend_services=>get_current_directory( ).\n\n    \" Create 'data' folder in the current working directory\n    lv_new_dir = |{ lv_current_dir }/data|.\n    CALL METHOD cl_fdc_factory=>create_folder(\n      EXPORTING\n        iv_full_path         = lv_new_dir\n      EXCEPTIONS\n        illegal_path         = 1\n        system_error         = 2\n        permission_denied    = 3\n        others               = 4\n    ).\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Given the following dictionary, change the value of the key \"a\" to \"apples\".",
        "input": "my_dict = {\"a\": \"bananas\", \"b\": \"pears\"}",
        "output": "my_dict = {\"a\": \"apples\", \"b\": \"pears\"}",
        "abap": "In ABAP, this would be represented as:\n\nDATA: ls_dict TYPE ty_tt.\nls_dict = VALUE #(\n  ( key = 'A' value = 'Apples' )\n  ( key = 'B' value = 'Pears' ).\n\nTYPES: ty_tt TYPE STANDARD TABLE OF ty_dd.\n\nTYPES: BEGIN OF ty_dd,\n       key  TYPE c LENGTH 1,\n       value TYPE string,\n     END OF ty_dd."
    },
    {
        "instruction": "Create a JavaScript function that finds the shortest word in a string.",
        "input": "sentence = \"I'm so excited to begin this journey\"",
        "output": "function findShortestWord(sentence) { \n    let words = sentence.split(\" \"); \n    let shortestWord = words[0]; \n  \n    for (let i = 0; i < words.length; i++) { \n        if (words[i].length < shortestWord.length) \n            shortestWord = words[i]; \n    } \n  \n    return shortestWord; \n}",
        "abap": "CLASS lcl_shortest_word DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_shortest_word IMPORTING sentence TYPE string RETURNING value(shortest_word) TYPE string.\nENDCLASS.\n\nCLASS lcl_shortest_word IMPLEMENTATION.\n  METHOD find_shortest_word.\n    DATA: words TYPE STANDARD TABLE OF string,\n          word TYPE string,\n          shortest_word TYPE string VALUE sentence.\n\n    SPLIT sentence AT space INTO TABLE words.\n\n    LOOP AT words INTO word.\n      IF strlen( word ) < strlen( shortest_word ).\n        shortest_word = word.\n      ENDIF.\n    ENDLOOP.\n\n    shortest_word = shortest_word.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Explain in simple terms what is a tree structure in data structures.",
        "input": "",
        "output": "A tree structure in data structures is a hierarchical structure composed of a root node connected to one or more nodes each of which is connected to one or more other nodes. It is a non-linear data structure that allows efficient insertion and retrieval of data.",
        "abap": "DATA: lr_root_node TYPE REF TO data.\n\nCLASS lt_tree_node DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor IMPORTING iv_value TYPE string\n        raising cx_static_check.\n    METHODS:\n      insert_child IMPORTING ir_child_type TYPE REF TO data\n        raising cx_static_check,\n      get_children RETURNING VALUE(rt_children) TYPE TABLE OF REF TO data\n        raising cx_static_check.\nENDCLASS.\n\nCLASS lt_tree_node IMPLEMENTATION.\n  METHOD constructor.\n    \" Initialize the node with a value and an empty list of children\n    super->constructor( ).\n    mv_value = iv_value.\n    mv_children = VALUE #( ).\n  ENDMETHOD.\n\n  METHOD insert_child.\n    \" Insert the child into the current node's list of children\n    INSERT ir_child_type INTO TABLE mv_children.\n  ENDMETHOD.\n\n  METHOD get_children.\n    \" Return a table of all the children in this node\n    rt_children = mv_children.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lr_node TYPE REF TO lt_tree_node.\n\n\" Create the root node with some initial value\nCREATE OBJECT lr_root_node\n  EXPORTING\n    iv_value = 'Root Node'.\n\n\" Create a child node and insert it into the root node\nCREATE OBJECT lr_child1\n  EXPORTING\n    iv_value = 'Child 1'.\nlr_root_node->insert_child( lr_child1 ).\n\n\" Create another child node and insert it into the root node\nCREATE OBJECT lr_child2\n  EXPORTING\n    iv_value = 'Child 2'.\nlr_root_node->insert_child( lr_child2 ).\n\n\" Get all children of the root node and display them\nDATA: lt_children TYPE TABLE OF REF TO data.\nlr_root_node->get_children( IMPORTING et_children = lt_children ).\nLOOP AT lt_children INTO DATA(lr_current_child).\n  WRITE: / lr_current_child->mv_value.\nENDLOOP.\n\n\" Output:\n\" Child 1\n\" Child 2\n"
    },
    {
        "instruction": "How do you remove the last item from a list in Python?",
        "input": "",
        "output": "list.pop()",
        "abap": "DATA: ls_list TYPE i VALUE 1,\n      li_list LIKE TABLE OF i.\n\nINSERT ls_list INTO TABLE li_list.\nDELETE TABLE li_list INDEX sy-tabix.\n"
    },
    {
        "instruction": "How would you modify the following code to make it more efficient?",
        "input": "def find_word(word, text):\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"",
        "output": "def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\"",
        "abap": "CLASS lcl_search_word DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_word\n        IMPORTING\n          word   TYPE string\n          text   TYPE string\n        EXPORTING\n          result TYPE string.\n\nENDCLASS.\n\nCLASS lcl_search_word IMPLEMENTATION.\n  METHOD find_word.\n    IF text CS word.\n      result = 'Word found'.\n    ELSE.\n      result = 'Word not found'.\n    ENDIF.\n  ENDMETHOD.\n\nCLASS lcl_search_word_efficient DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_word\n        IMPORTING\n          word   TYPE string\n          text   TYPE string\n        EXPORTING\n          result TYPE string.\n\nENDCLASS.\n\nCLASS lcl_search_word_efficient IMPLEMENTATION.\n  METHOD find_word.\n    IF text CAAB word.\n      result = 'Word found'.\n    ELSE.\n      result = 'Word not found'.\n    ENDIF.\n  ENDMETHOD.\n\nCLASS lif_search_word DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_word\n        IMPORTING\n          word   TYPE string\n          text   TYPE string\n        EXPORTING\n          result TYPE string.\n\nENDCLASS.\n\nCLASS lif_search_word IMPLEMENTATION.\n  METHOD find_word BY OBJECT.\n    IF text CS word.\n      result = 'Word found'.\n    ELSE.\n      result = 'Word not found'.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python function to remove the characters which have odd index values of a given string.",
        "input": "string = \"Hello World\"",
        "output": "def remove_odd_index(string):\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result",
        "abap": "CLASS lcl_remove_odd_index DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_odd_index\n        IMPORTING\n          VALUE(iv_string) TYPE string\n        EXPORTING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_remove_odd_index IMPLEMENTATION.\n  METHOD remove_odd_index.\n    DATA: lv_length TYPE i,\n          lv_i     TYPE i,\n          lv_result TYPE string.\n\n    lv_length = xstrlen( iv_string ).\n\n    DO lv_length TIMES.\n      lv_i = sy-index - 1.\n      IF lv_i MOD 2 = 0.\n        lv_result+lv_i(1) = iv_string+lv_i(1).\n      ENDIF.\n    ENDDO.\n\n    rv_result = lv_result.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function that takes in a list of numbers and prints out the greatest number.",
        "input": "list = [8, 2, 14, 25]",
        "output": "def find_greatest(list):\n    \"\"\"Print out the greatest number from a list of numbers.\"\"\"\n    greatest = list[0]\n    for num in list:\n        if num > greatest:\n            greatest = num\n    print('The greatest number is: ', greatest)",
        "abap": "REPORT zfind_greatest.\n\nPARAMETERS: p_list TYPE STANDARD TABLE OF i.\n\nINITIALIZATION.\n  PERFORM get_numbers_from_input.\n\nAT SELECTION-SCREEN ON VALUE-REQUEST FOR p_list.\n\n  DATA: ls_num TYPE i,\n        lt_nums LIKE p_list.\n\n  DO 5 TIMES.\n    READ TABLE p_list INTO ls_num.\n    IF sy-subrc <> 0.\n      EXIT.\n    ENDIF.\n    APPEND ls_num TO lt_nums.\n  ENDDO.\n\n  SORT lt_nums DESCENDING.\n\n  MOVE-CORRESPONDING lt_nums TO p_list.\n\nSTART-OF-SELECTION:\n  PERFORM find_greatest USING p_list.\n\nFORM find_greatest USING it_list TYPE STANDARD TABLE OF i.\n  DATA: greatest TYPE REF TO data,\n        lv_num  TYPE i VALUE 0.\n\n  CREATE OBJECT greatest.\n\n  LOOP AT it_list INTO lv_num.\n    IF lv_num > greatest->* CAST cl_abap_value( greatest )->value.\n      greatest->set_value( lv_num ).\n    ENDIF.\n  ENDLOOP.\n\n  WRITE: / 'The greatest number is: ', greatest->get_value( ).\n\n  \" alternative approach using SORT and READ TABLE\n  SORT it_list DESCENDING.\n\n  READ TABLE it_list INTO greatest->* CAST cl_abap_value( greatest )->value.\n\nENDFORM.\n\nFORM get_numbers_from_input.\n  p_list = VALUE #( ( 10 ) ( 20 ) ( 30 ) ( 40 ) ( 50 ) ).\nENDFORM.\n"
    },
    {
        "instruction": "Write a Python program to print out the Fibonacci sequence up to 20 numbers",
        "input": "",
        "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))",
        "abap": "CLASS lcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fibonacci IMPORTING\n                  VALUE(iv_n) TYPE i\n        EXPORTING\n          VALUE(ev_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_fibonacci IMPLEMENTATION.\n  METHOD fibonacci.\n    DATA: lv_a TYPE i,\n           lv_b TYPE i,\n           lv_c TYPE i,\n           lv_i TYPE i.\n\n    IF iv_n < 0.\n      WRITE: 'Incorrect input'.\n    ELSEIF iv_n = 0.\n      ev_result = 0.\n    ELSEIF iv_n = 1.\n      ev_result = 1.\n    ELSE.\n      lv_a = 0.\n      lv_b = 1.\n      DO iv_n TIMES.\n        lv_c = lv_a + lv_b.\n        lv_a = lv_b.\n        lv_b = lv_c.\n      ENDDO.\n      ev_result = lv_b.\n    ENDIF.\n  ENDMETHOD.\n\nCLASS lcl_driver DEFINITION INHERITING FROM cl_abap_object.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main REDEFINITION.\nENDCLASS.\n\nCLASS lcl_driver IMPLEMENTATION.\n  METHOD main.\n    DATA: lo_fibonacci TYPE REF TO lcl_fibonacci,\n          lv_result TYPE i,\n          lv_i TYPE i.\n\n    CREATE OBJECT lo_fibonacci.\n\n    WRITE: / 'Fibonacci sequence:'.\n    DO 20 TIMES.\n      CALL METHOD lo_fibonacci->fibonacci\n        EXPORTING\n          iv_n = sy-index - 1\n        IMPORTING\n          ev_result = lv_result.\n      WRITE: / lv_result.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA(lo_driver) = NEW lcl_driver( ).\n  lo_driver->main( ).\n"
    },
    {
        "instruction": "Write a method that prints out a square of size n.",
        "input": "n=5",
        "output": "public static void printSquare(int n) { \n    for (int i = 0; i < n; i++) { \n        for (int j = 0; j < n; j++) { \n            System.out.print(\"* \"); \n        }  \n        System.out.println(); \n    } \n} \n   \n// Output: \n/*       \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n*/",
        "abap": "REPORT zprint_square.\n\nCLASS lcl_print_square DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"! Print a square of asterisks to the console.\n      \"! @parameter n <i> The size of the square. \".\n      METHOD print_square IMPORTING VALUE( n ) TYPE i ).\nENDCLASS.\n\nCLASS lcl_print_square IMPLEMENTATION.\n  METHOD print_square.\n    DO n TIMES.\n      WRITE: / ( n ) * '* ' .\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA(n) = 5.\n  PERFORM print_square USING n.\n"
    },
    {
        "instruction": "Write a Python function to compute the factorial of an integer.",
        "input": "",
        "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)",
        "abap": "REPORT zfactorial.\n\nCLASS lcl_factorial DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      factorial IMPORTING\n        p_n TYPE i\n        RETURNING\n          VALUE(r_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_factorial IMPLEMENTATION.\n  METHOD factorial.\n    IF p_n = 0.\n      r_result = 1.\n    ELSE.\n      r_result = p_n * CALL METHOD cl_abap_function_utilities=>factorial( p_n - 1 ).\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_factorial TYPE i.\n\n  lv_factorial = cl_abap_function_utilities=>factorial( 5 ).\n  WRITE: / 'Factorial of 5 is:', lv_factorial.\n"
    },
    {
        "instruction": "Construct a for loop that will loop over the string \"Hello World\".",
        "input": "",
        "output": "for letter in \"Hello World\":\n    print(letter)",
        "abap": "DATA: lv_string TYPE string VALUE 'Hello World'.\n\nDO.\n  WHILE strlen( lv_string ) > 0.\n\n    WRITE ( lv_string+0(1) ).\n\n    lv_string = lv_string+1.\n\n  ENDDO.\n"
    },
    {
        "instruction": "Write pseudo code for finding the maximum element in an array.",
        "input": "",
        "output": "START\nSET max_element to 0\nLOOP through array\n IF current element is greater than max_element\n SET max_element to current element\nEND LOOP\nPRINT maximum element\nEND",
        "abap": "REPORT zmax_element.\n\nDATA: lv_max_element TYPE i VALUE 0.\nDATA: lt_array TYPE STANDARD TABLE OF i.\n\n\" Initialize array with values (replace with actual data)\nlt_array = VALUE #( 3 5 2 7 1 ).\n\nLOOP AT lt_array INTO DATA(lv_current_element).\n  IF lv_current_element > lv_max_element.\n    MOVE-CORRESPONDING lv_current_element TO lv_max_element.\n  ENDIF.\nENDLOOP.\n\nWRITE: / 'Maximum element:', lv_max_element.\n\n\" Alternatively, you can use the REDUCE function to find the maximum value:\nDATA: lv_max_element_alt TYPE i VALUE sy-dbcrc.\nlv_max_element_alt = REDUCE #( INIT e = lv_max_element\n                           INTO val INTO DATA(lv_current_element)\n                           FOR lt_array LIKE sy-lisel FROM it_array ).\n\nWRITE: / 'Maximum element (alternative):', lv_max_element_alt.\n\n\" Note: The REDUCE function is available from ABAP 7.0 and later.\n"
    },
    {
        "instruction": "Explain what the following line of code does.",
        "input": "a %= b",
        "output": "This line of code assigns the remainder of a divided by b to a, so that the resulting value of a is the remainder of a divided by b. For example, if a is 10 and b is 3, the value of a after executing this line of code would be 1 (the remainder of 10 divided by 3).",
        "abap": "The line of code you are referring to is likely:\n\n`a = a mod b;`\n\nIn ABAP, this can be written as:\n\n`DATA: a TYPE i VALUE 10. \" Initialize variable a with value 10\nDATA: b TYPE i VALUE 3. \" Initialize variable b with value 3\n\na = a MOD b.`"
    },
    {
        "instruction": "Write a JS program that takes a number n and prints out the first n even numbers.",
        "input": "n = 10",
        "output": "function getFirstNEvens(n) {\n    let arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(2 * i);\n    }\n    return arr;\n}\n\nlet firstNEvens = getFirstNEvens(n);\nconsole.log(firstNEvens); // Output: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]",
        "abap": "REPORT zget_first_nevens.\n\nCLASS lcl_get_first_nevens DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      getFirstNEvens\n        IMPORTING\n          VALUE(iv_n) TYPE i\n        RETURNING\n          VALUE(rv_first_nevens) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_get_first_nevens IMPLEMENTATION.\n  METHOD getFirstNEvens.\n    DATA: lt_first_nevens TYPE STANDARD TABLE OF i.\n\n    DO iv_n TIMES.\n      APPEND 2 * sy-index TO lt_first_nevens.\n    ENDDO.\n\n    rv_first_nevens = lt_first_nevens.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_n TYPE i VALUE 10,\n      lt_first_nevens TYPE STANDARD TABLE OF i.\n\nlt_first_nevens = lcl_get_first_nevens=>getFirstNEvens( lv_n ).\n\nWRITE: / lt_first_nevens.\n"
    },
    {
        "instruction": "Create a JavaScript function that takes in two parameters and returns their sum.",
        "input": "",
        "output": "function sum(num1, num2) {\n return num1 + num2;\n}",
        "abap": "FUNCTION sum\n  IMPORTING\n    VALUE(num1) TYPE i\n    VALUE(num2) TYPE i\n  RETURNING\n    VALUE(result) TYPE i.\n  result = num1 + num2.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Create a program in Python that calculates the average of numbers in a list.",
        "input": "[9, 5, 10, 12]",
        "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5",
        "abap": "REPORT z_average.\n\nCLASS lcl_average DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      average IMPORTING numbers TYPE STANDARD TABLE OF f DECIMAL\n                RETURNING VALUE(result) TYPE f DECIMAL.\nENDCLASS.\n\nCLASS lcl_average IMPLEMENTATION.\n  METHOD average.\n    DATA: lv_sum TYPE f DECIMAL,\n          lv_len TYPE i.\n\n    \" Sum up all the numbers in the table\n    DO.\n      EXIT.\n      ADD value = numbers[ sy-index ] TO lv_sum.\n      IF sy-index > lines( numbers ).\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    \" Calculate average by dividing sum by count of elements\n    result = lv_sum / lines( numbers ).\n  ENDMETHOD.\n\nCLASS lcl_main DEFINITION INHERITING FROM cl_alv_table DEFINITION.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD init.\n    DATA: lt_numbers TYPE STANDARD TABLE OF f DECIMAL,\n          lo_average TYPE REF TO lcl_average.\n\n    \" Create a table of numbers\n    INSERT VALUE #( val = 9 ) INTO TABLE lt_numbers.\n    INSERT VALUE #( val = 5 ) INTO TABLE lt_numbers.\n    INSERT VALUE #( val = 10 ) INTO TABLE lt_numbers.\n    INSERT VALUE #( val = 12 ) INTO TABLE lt_numbers.\n\n    \" Calculate average\n    lo_average = NEW lcl_average( ).\n    result = lo_average->average( numbers = lt_numbers ).\n\n    WRITE: / 'Average:', result.\n  ENDMETHOD.\n\nINITIALIZER.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  NEW lcl_main( )->init( ).\n"
    },
    {
        "instruction": "Write an HTML page including the given text.",
        "input": "This is a test page",
        "output": "<html>\n  <head>\n    <title>Test Page</title>\n  </head>\n  <body>\n    <h1>This is a test page</h1>\n  </body>\n</html>",
        "abap": "REPORT ztestpage.\n\nDATA: lv_html TYPE string.\n\nlv_html = '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Test Page</title>\n  </head>\n  <body>\n    <h1>This is a test page</h1>\n  </body>\n</html>'.\n\nWRITE lv_html.\n"
    },
    {
        "instruction": "Read the JSON string below and convert it into a dictionary.",
        "input": "jsonString = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'",
        "output": "import json\n\njsonObject = json.loads(jsonString)\ndictionary = dict(jsonObject)\nprint(dictionary)",
        "abap": "DATA: lr_json TYPE i,\n      lo_jsonx TYPE REF TO cl_json.\n\nlo_jsonx = cl_json=>create( parser_name = 'JSON_TABLE_EX' ).\n\n\" Assuming jsonString contains the JSON data as a string\nlo_jsonx->deserialize(\n  EXPORTING\n    iv_data       = jsonString\n  IMPORTING\n    ev_deserialize_result = DATA(lv_is_valid)\n  EXCEPTIONS\n    invalid_json     = 1\n    OTHERS           = 2 ).\n \nDATA: lv_dict TYPE ty_oo_data.\n\nlv_dict = lo_jsonx->data.\n\nLOOP AT lv_dict INTO DATA(ls_item).\n\n  WRITE: ls_item-key || ':', ls_item-value. \n\nENDLOOP.\n"
    },
    {
        "instruction": "Write a code to get the value of pi (to 6 decimal places) using mathematical methods.",
        "input": "",
        "output": "\"\"\"\nCalculate the value of pi using mathematical methods\n\"\"\"\n\ndef calculate_pi():\n    pi = 0  \n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(2*n+1)\n    pi = pi*4\n    return round(pi, 6)\n\nif __name__ == '__main__':\n    print(calculate_pi())\n\n# Output\n# 3.141593",
        "abap": "REPORT zcalculate_pi.\n\nDATA: lv_n TYPE i,\n      lv_pi TYPE f DECIMALS 8.\n\nlv_n = 1000.\nDO lv_n TIMES.\n  lv_pi = lv_pi + (-1)**sy-index / ( 2 * sy-index + 1 ).\nENDDO.\nlv_pi = lv_pi * 4.\nWRITE: / lv_pi.\n"
    },
    {
        "instruction": "Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript.",
        "input": "let array = [9, 4, 15, 10, 6, 20];",
        "output": "// max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20",
        "abap": "TYPES: BEGIN OF ty_array,\n         value TYPE i,\n       END OF ty_array.\n\nDATA: array TYPE STANDARD TABLE OF ty_array,\n      max   TYPE i.\n\n\" Initialize max to 0 as a starting point\nmax = 0.\n\nLOOP AT array INTO DATA(line).\n  \" If the current value of line-value is greater than max, max will be updated\n  IF line-value > max.\n    max = line-value.\n  ENDIF.\nENDLOOP.\n\nWRITE: max. \" Output: 20\n"
    },
    {
        "instruction": "Write a function to multiply two numbers in Java.",
        "input": "5, 8",
        "output": "public static int multiply(int x, int y){\n  return x * y;\n}\n\nSystem.out.println(multiply(5, 8));",
        "abap": "REPORT zexample.\n\nCLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: multiply\n      IMPORTING\n        iv_x TYPE i\n        iv_y TYPE i\n      RETURNING\n        VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD multiply.\n    rv_result = iv_x * iv_y.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_result TYPE i.\n\nSET PARAMETER ID 'X' FIELD '5'.\nSET PARAMETER ID 'Y' FIELD '8'.\n\nCALL FUNCTION 'SAPGUI_SET_PARAMETER'\n  EXPORTING\n    parameter_name1        = 'A'\n    parameter_value1        = 'ZEXAMPLE'\n\n  IMPORTING\n    result                  = lv_result\n\n  EXCEPTIONS\n    no_function_found       = 2\n    function_not_found      = 3\n    OTHERS                  = 4.\n\nWRITE: / lv_result.\n"
    },
    {
        "instruction": "Create a Regular Expression pattern to find words that contain the letters \"a\", \"b\", and \"c\".",
        "input": "",
        "output": "\\b[abc]+\\w*\\b",
        "abap": "DATA: lv_string TYPE string.\n\nlv_string = 'abc123'.\n\nIF REGEX('\\b[abc]+\\w*\\b' USING lv_string) = abap_true.\n  WRITE: / 'Match found!'.\nENDIF.\n"
    },
    {
        "instruction": "Use the list comprehension syntax to make a new list whose elements are the square of the first list.",
        "input": "lst = [1, 2, 3, 4]",
        "output": "[x**2 for x in lst]",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF f,\n       lv_result LIKE LINE OF lv_list.\n\nlv_list = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\n\nLOOP AT lv_list INTO DATA(lv_x).\n  lv_result = lv_x * lv_x.\n  APPEND lv_result TO lv_list.\nENDLOOP.\n\nWRITE: / lv_list.\n"
    },
    {
        "instruction": "Given a list of numbers, find the index of the greatest value.",
        "input": "lst = [3, 5, 6, 8, 9]",
        "output": "index = 4",
        "abap": "DATA: index TYPE i VALUE 4.\n"
    },
    {
        "instruction": "Find the minimum element in an unordered array given in Python.",
        "input": "arr = [17, 21, 4, 7, 29, 34, 11]",
        "output": "min_ele = arr[0]\nfor i in range (1, len(arr)):\n    if (min_ele > arr[i]):\n       min_ele = arr[i] \n    \nprint(\"Minimum element in array is\", min_ele)",
        "abap": "REPORT zfind_min_in_array.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_min IMPORTING\n        iv_arr TYPE STANDARD TABLE OF i4\n        RAISING\n          cx_static_check.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD find_min.\n    DATA: lv_min     TYPE i,\n          lv_index   TYPE i,\n          lt_sorted TYPE STANDARD TABLE OF i4.\n\n    SORT iv_arr INTO lt_sorted.\n\n    IF sy-index > 0.\n      READ TABLE iv_arr INTO lv_min INDEX 1.\n      DO.\n        MOVE-CORRESPONDING lv_min TO DATA(lv_temp).\n        TRANSPORT lv_temp.\n        FIND FIRST MATCH WITH TABLE iv_arr INTO lv_index.\n        IF lv_index IS INITIAL.\n          EXIT.\n        ENDIF.\n        lv_min = iv_arr[ lv_index ].\n      ENDDO.\n    ELSE.\n      lv_min = iv_arr[ 0 ].\n    ENDIF.\n\n    \" or simpler:\n    DATA: lv_min2 TYPE i.\n    SORT iv_arr INTO DATA(lt_sorted).\n    lv_min2 = lt_sorted[ 1 ].\n\n    \" or even simpler:\n    SORT iv_arr.\n    IF sy-index > 0.\n      lv_min2 = iv_arr[ 1 ].\n    ELSE.\n      lv_min2 = iv_arr[ 0 ].\n    ENDIF.\n\n    ASSERT lv_min = lv_min2.\n\n    WRITE: / 'Minimum element in array is', lv_min.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_array TYPE STANDARD TABLE OF i4,\n        lv_min   TYPE i.\n\n  APPEND 10 TO lt_array.\n  APPEND 5  TO lt_array.\n  APPEND 20 TO lt_array.\n  APPEND 15 TO lt_array.\n\n  lcl_main=>find_min(\n    EXPORTING\n      iv_arr = lt_array\n  ).\n"
    },
    {
        "instruction": "Find the total number of elements in the following array.",
        "input": "my_array = [[1,2], 3, 4]",
        "output": "Total number of elements = 4",
        "abap": "DATA: lt_array TYPE STANDARD TABLE OF i.\nlt_array = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ).\n\nWRITE: / |Total number of elements|: { strlen( to_char( lt_array[] ) ).\n"
    },
    {
        "instruction": "Write a script to generate the Fibonacci sequence up to a certain number.",
        "input": "Number of elements to generate: 10",
        "output": "def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        lst = [1, 1]\n        while len(lst) < n:\n            lst.append(lst[-1] + lst[-2])\n        return lst",
        "abap": "CLASS zcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fibonacci_sequence\n        IMPORTING\n          iv_n       TYPE i\n        EXPORTING\n          et_result  TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS zcl_fibonacci IMPLEMENTATION.\n  METHOD fibonacci_sequence.\n    DATA: lt_result TYPE STANDARD TABLE OF i,\n          lv_first  TYPE i VALUE 1,\n          lv_second TYPE i VALUE 1,\n          lv_index  TYPE i.\n\n    \" handle edge cases\n    IF iv_n = 0.\n      \" an empty list for n=0 is not really needed, but it's handled implicitly in the loop\n    ELSEIF iv_n = 1.\n      APPEND lv_first TO lt_result.\n    ELSE.\n      APPEND lv_first TO lt_result.  \" append the first element to the result table\n      APPEND lv_second TO lt_result.\n\n      DO iv_n - 2 TIMES.\n        lv_index = lines( lt_result ).\n        APPEND ( lt_result[ lv_index ] + lt_result[ lv_index - 1 ] ) TO lt_result.\n      ENDDO.\n    ENDIF.\n\n    \" return the result\n    et_result = lt_result.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Suggest a sorting algorithm to sort the following array in descending order.",
        "input": "arr = [17, 21, 4, 7, 29, 34, 11]",
        "output": "A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.",
        "abap": "REPORT z_bubble_sort.\n\nCLASS lcl_bubble_sort DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_array\n        IMPORTING\n          it_arr TYPE STANDARD TABLE OF i,\n        EXPORTING\n          et_sorted TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_bubble_sort IMPLEMENTATION.\n  METHOD sort_array.\n    DATA: lt_temp TYPE i VALUE abap_true.\n\n    LOOP AT it_arr INTO DATA(ls_item).\n      WRITE: / ls_item.\n    ENDLOOP.\n\n    DO.\n      lt_temp = abap_false.\n\n      LOOP AT it_arr INTO DATA(ls_current) FROM sy-index - 1\n        BACKWARD.\n        IF ls_current > it_arr[ sy-index ].\n          lt_temp = abap_true.\n\n          \" Swap elements\n          it_arr[ sy-index ] = ls_current.\n          it_arr[ sy-index - 1 ] = it_arr[ sy-index + 1 ].\n        ENDIF.\n      ENDDO.\n\n      IF NOT lt_temp IS INITIAL.\n        WRITE: / 'Not sorted yet'.\n        CONTINUE.\n      ELSE.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    et_sorted = it_arr.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: ls_array TYPE STANDARD TABLE OF i,\n      ls_sorted TYPE STANDARD TABLE OF i.\n\n\" Add some numbers to the array\nAPPEND 10 TO ls_array.\nAPPEND 5 TO ls_array.\nAPPEND 2 TO ls_array.\nAPPEND 7 TO ls_array.\nAPPEND 9 TO ls_array.\nAPPEND 1 TO ls_array.\n\nWRITE: / 'Unsorted Array:'.\n\nls_sorted = lcl_bubble_sort=>sort_array( it_arr = ls_array ).\n\nWRITE: /. 'Sorted Array:'.\n\nLOOP AT ls_sorted INTO DATA(ls_item).\n  WRITE: / ls_item.\nENDLOOP.\n"
    },
    {
        "instruction": "What is the largest prime factor of the number 885?",
        "input": "",
        "output": "The largest prime factor of 885 is 5.",
        "abap": "CLASS lcl_prime_factor DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD:\n      \"Finds the prime factors of a given number and returns the largest one\"\n      get_largest_prime_factor IMPORTING\n        ip_number TYPE i\n        EXPORTING\n          ep_largest_prime_factor TYPE i.\n\nENDCLASS.\n\nCLASS lcl_prime_factor IMPLEMENTATION.\n  METHOD get_largest_prime_factor.\n    DATA: lv_divisor TYPE i,\n          lv_remainder TYPE i,\n          lv_i TYPE i.\n\n    lv_remainder = ip_number.\n    DO.\n      IF lv_remainder < 2.\n        \"No prime factors left, so exit\n        EXIT.\n      ENDIF.\n\n      DO.\n        \"Find the largest divisor of 'lv_remainder'\n        lv_divisor = lv_remainder / ( lv_remainder MOD 6 ).\n        IF lv_remainder DIVIDE lv_divisor.\n          \"Update the remainder with this new divisor and loop again\n          lv_remainder = ( lv_remainder / lv_divisor ).\n        ELSE.\n          \"This is not a factor, so increase 'lv_i' to try the next divisor\n          lv_i = 1.\n        ENDIF.\n\n        IF lv_i > lv_remainder.\n          ep_largest_prime_factor = lv_remainder.\n          EXIT.\n        ENDIF.\n      ENDDO.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM get_largest_prime_factor USING 885\n                                  CHANGING DATA(lv_largest_prime) TYPE i.\n  WRITE: / 'Largest prime factor:', lv_largest_prime.\n"
    },
    {
        "instruction": "Create an object in JavaScript that performs a task given a condition.",
        "input": "",
        "output": "const myObject = {\n  doTask: (condition) => {\n    if(condition) {\n      // code to perform the task\n    } \n  }\n}",
        "abap": "DATA: ls_object TYPE ty_object.\n\nls_object-do_task(\n  EXPORTING\n    iv_condition = 'X'  \" true or false, where X is true and ' ' is false\n  IMPORTING\n  ).\n\" Note that in ABAP we don't use a function like \"doTask\", instead we define a method within the class definition\n\nCLASS lcl_object DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: do_task\n      IMPORTING\n        iv_condition TYPE i2\n      RAISING\n        cx_static_check.\nENDCLASS.\n\nCLASS lcl_object IMPLEMENTATION.\n  METHOD do_task.\n    IF iv_condition = abap_true.\n      \" code to perform the task\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a code to remove the duplicates from a given list.",
        "input": "mylist = [1,2,3,1,2]",
        "output": "\"\"\"\nWrite a code to remove the duplicates from a given list\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,1,2]\n\n# Creating a new list with unique elements\nunique_list = list(set(mylist))\n\n# Printing the new list\nprint(\"New list with unique elements is {}\".format(unique_list))",
        "abap": "REPORT zdemo.\n\nTYPES: BEGIN OF ty_element,\n          value TYPE i,\n        END OF ty_element.\nDATA: mylist TYPE STANDARD TABLE OF ty_element,\n      unique_list TYPE STANDARD TABLE OF ty_element.\n\nmylist = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 1 ) ( 2 ) ).\n\nSELECT * FROM ( SELECT DISTINCT element-value\n                 FROM ( SELECT DISTINCT value\n                          FROM @value ).\n                    ). INTO CORRESPONDING FIELDS OF TABLE unique_list.\n\nWRITE: / 'New list with unique elements is:', unique_list.\n"
    },
    {
        "instruction": "Write a code to generate the multiplication table of a given integer.",
        "input": "x = 5",
        "output": "\"\"\"\nWrite a code to generate the multiplication table of a given integer\n\"\"\"\n\n# Number for which multiplication table will be generated\nx = 5\n\n# Generating the multiplication table\nfor i in range(1,11):\n    # Printing each row of the table\n    print(\"{} x {} = {}\".format(x,i,x*i))",
        "abap": "REPORT zmultiplication_table.\n\nTYPES: ty_multiplication_result TYPE string.\nDATA: lv_x TYPE i VALUE 5,\n      lt_multiplication_table TYPE STANDARD TABLE OF ty_multiplication_result.\n\n\" Generating multiplication table\nLOOP AT sy-tcfield = 'i' FROM 1 TO 10 INTO DATA(lv_i).\n  \" Calculating each row of the table\n  APPEND |{ lv_x } x { lv_i } = { lv_x * lv_i }| TO lt_multiplication_table.\nENDLOOP.\n\n\" Printing multiplication table\nLOOP AT lt_multiplication_table INTO DATA(ls_result).\n  WRITE: / ls_result.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a list comprehension to square each number in the list.",
        "input": "arr = [1, 2, 3, 4, 5]",
        "output": "arr = [x**2 for x in arr] # [1, 4, 9, 16, 25]",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i.\n\n\" initialize array with numbers from 1 to 5\nDO.\n  IF sy-index <= 5.\n    APPEND sy-index TO lv_arr.\n    CONTINUE.\n  ENDIF.\nENDDO.\n\nLOOP AT lv_arr INTO DATA(lv_x).\n  WRITE: ( lv_x ** 2 ).\nENDLOOP.\n"
    },
    {
        "instruction": "Manipulate the given list in Python to include the new element at the beginning.",
        "input": "list = [1, 2, 3]\nnew_element = 0",
        "output": "list = [0] + list \nlist.insert(0, new_element)",
        "abap": "DATA: lt_list TYPE STANDARD TABLE OF i.\n\nlt_list = VALUE #( 0 ). \" or any initial value\nlt_list = VALUE #( 0 ) && lt_list.\n"
    },
    {
        "instruction": "Write a MySQL query to find the highest salary of each department.",
        "input": "",
        "output": "SELECT d.name, MAX(e.salary)\nFROM Department d\nINNER JOIN Employee e\nON d.department_id = e.department_id\nGROUP BY d.name;",
        "abap": "REPORT zdepartment_salary.\n\nDATA: lt_departments TYPE STANDARD TABLE OF ty_department,\n      ls_department  TYPE ty_department,\n      lt_employees   TYPE STANDARD TABLE OF ty_employee,\n      ls_employee    TYPE ty_employee,\n      lv_max_salary  TYPE i.\n\nTYPES: BEGIN OF ty_department.\n          INCLUDE TYPE adsmidpvtydepartment AS department.\n       ENDS OF ty_department.\n\nTYPES: BEGIN OF ty_employee.\n          INCLUDE TYPE adsmidpvyemployee AS employee.\n         INCLUDE TYPE adsmidpvtydepartment AS department.\n       ENDS OF ty_employee.\n\nSELECT d~name, MAX(e~salary) INTO TABLE lt_departments\n  FROM zdemo_department d\n  INNER JOIN zdemo_employee e\n  ON d~department_id = e~department_id\n  GROUP BY d~name.\n\nLOOP AT lt_departments INTO ls_department.\n  lv_max_salary = ls_department-max_salary.\n  WRITE: / ls_department-name, lv_max_salary.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a C++ code to find the greatest common divisor of two integers",
        "input": "",
        "output": "#include<iostream>\n\nusing namespace std;\n\nint gcd(int first, int second) {\n    // Base case\n    if (second == 0)\n        return first;\n    \n    return gcd(second, first % second);\n}\n\nint main() {\n    // Define two integers\n    int first = 10;\n    int second = 20;\n    \n    cout << \"The greatest common divisor of \" << first << \" and \" << second << \" is \" << gcd(first, second) << endl;\n\n    return 0;\n}",
        "abap": "REPORT zgcd.\n\nCLASS lcl_gcd DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      gcd\n        IMPORTING\n          first TYPE i\n          second TYPE i\n        RETURNING\n          VALUE(rv_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_gcd IMPLEMENTATION.\n  METHOD gcd.\n    IF second = 0.\n      rv_result = first.\n    ELSE.\n      rv_result = cl_abap_behaviour=>get_instance( )->gcd( second, first MOD second ).\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_first TYPE i,\n        lv_second TYPE i,\n        lv_result TYPE i.\n\n  \" Define two integers\n  lv_first = 10.\n  lv_second = 20.\n\n  \" Compute the greatest common divisor\n  lv_result = lcl_gcd=>gcd( lv_first, lv_second ).\n\n  WRITE: / 'The greatest common divisor of ', lv_first, ' and ', lv_second, ' is ', lv_result.\n\nEND-OF-SELECTION.\n"
    },
    {
        "instruction": "Create a for loop that goes through every element of list_of_words and prints \u2018success\u2019 if an element is equal to \u201cexample\u201d and prints \u2018failure\u2019 in any other case.",
        "input": "list_of_words = [\"hello\", \"example\", \"world\"]",
        "output": "for word in list_of_words:\n    if word == \"example\":\n        print(\"success\")\n    else:\n        print(\"failure\")",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF string.\nlv_list = value #( 'word1' 'word2' 'example' 'word4' ).\n\nLOOP AT lv_list INTO DATA(lv_word).\n  IF lv_word = \"example\".\n    WRITE: / \"success\".\n  ELSE.\n    WRITE: / \"failure\".\n  ENDIF.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.",
        "input": "matrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]\n         ]",
        "output": "def reverse_matrix(matrix):\n    \"\"\"Reverse the order of the rows and columns in a matrix of numbers.\"\"\"\n    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            reversed_matrix[j][i] = matrix[i][j]\n    return reversed_matrix",
        "abap": "CLASS lcl_matrix_reverser DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_matrix\n        IMPORTING\n          VALUE(matrix) TYPE abap_table_of_flt [\n        RETURNING\n          VALUE(reversed_matrix) TYPE abap_table_of_flt [\n        RAISING\n          NO_METHOD_FOUND ].\n\nENDCLASS.\n\nCLASS lcl_matrix_reverser IMPLEMENTATION.\n  METHOD reverse_matrix.\n    \" Create a reversed matrix of the same size as the input matrix\n    DATA: lo_reversed_matrix TYPE REF TO cl_abap_matrix,\n          li_row TYPE i.\n\n    CREATE OBJECT lo_reversed_matrix TYPE cl_abap_matrix.\n\n    LOOP AT matrix INTO DATA(ls_row) INDEX sy-tabix WITH 1.\n      READ TABLE ls_row TRANSPORTING NO FIELDS INDEX sy-index - 1 INTO DATA(ls_element).\n      IF sy-subrc <> 0.\n        \" Swap row with the one from the bottom\n        lo_reversed_matrix->insert( row = matrix[ sy-tabeindex ] index = sy-index ).\n      ENDIF.\n\n    ENDDO.\n    reversed_matrix = lo_reverserd_matrix->get_table( ).\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a for-loop to print out the values from a list named 'mylist'",
        "input": "mylist = [1,2,3,4,5,6,7]",
        "output": "for i in mylist:\nprint(i)",
        "abap": "LOOP AT itab INTO DATA(ls_item).\n  WRITE: / ls_item.\nENDLOOP.\n"
    },
    {
        "instruction": "Modify the following code to handle an input which is a negative number.",
        "input": "def power_func(number):\n    if number >= 0:\n        return number**2",
        "output": "def power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2",
        "abap": "CLASS lcl_power DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      power_func IMPORTING\n                  VALUE( iv_number ) TYPE i\n                 RETURNING\n                   VALUE( rv_result ) TYPE string.\nENDCLASS.\n\nCLASS lcl_power IMPLEMENTATION.\n  METHOD power_func.\n    IF iv_number < 0.\n      rv_result = 'Invalid input!'.\n    ELSE.\n      rv_result = |{ iv_number }^2|.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lv_result TYPE string.\nlv_result = lcl_power=>power_func( -5 ).\nWRITE: / lv_result. \" Output: Invalid input!\nlv_result = lcl_power=>power_func( 5 ).\nWRITE: / lv_result. \" Output: 25\n"
    },
    {
        "instruction": "Create a function that takes two strings and returns a new string containing the first three characters of each string combined.",
        "input": "\"Hello\"\n\"World\"",
        "output": "def combine_first_three(string1, string2): \n    # Get the first three characters of each string \n    string1 = string1[:3]\n    string2 = string2[:3]\n\n    # Combine the first three characters of each string \n    combined_string = string1 + string2\n\n    # Return the new string \n    return combined_string\n\nprint(combine_first_three(\"Hello\", \"World\")) # HelWor",
        "abap": "CLASS lcl_combine_strings DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      combine_first_three\n        IMPORTING\n          string1 TYPE string\n          string2 TYPE string\n        RETURNING\n          VALUE(result) TYPE string.\nENDCLASS.\n\nCLASS lcl_combine_strings IMPLEMENTATION.\n  METHOD combine_first_three.\n    \" Get the first three characters of each string\n    DATA: lv_string1 TYPE string,\n          lv_string2 TYPE string.\n    lv_string1 = string1(3).\n    lv_string2 = string2(3).\n\n    \" Combine the first three characters of each string\n    result = lv_string1 + lv_string2.\n\n  ENDMETHOD.\n\nENDCLASS.\n\nSTART-OF-SECTION.\n  DATA: lv_string1 TYPE string,\n        lv_string2 TYPE string,\n        lv_result TYPE string.\n\n  lv_string1 = 'Hello'.\n  lv_string2 = 'World'.\n\n  CALL METHOD cl_abap_behaviordescr=>get_class 'lcl_combine_strings' INTO DATA(lv_program).\n  lv_program->combine_first_three( EXPORTING string1 = lv_string1\n                                  string2 = lv_string2\n                                IMPORTING result = lv_result ).\n\n  WRITE: lv_result.\nEND-OF-SECTION.\n"
    },
    {
        "instruction": "Write a code to delete all the vowels from a given string.",
        "input": "string = \"hello world\"",
        "output": "\"\"\"\nWrite a code to delete all the vowels from a given string\n\"\"\"\n\n# Given string\nstring = \"hello world\"\n\n# Removing all the vowels from the string\nno_vowels = \"\".join([letter for letter in string if letter not in \"aeiouAEIOU\"])\n\n# Printing the new string\nprint(\"String without vowels is\", no_vowels)",
        "abap": "REPORT zdelete_vowels.\n\nDATA: lv_string TYPE string VALUE 'hello world'.\n\nDATA(lv_no_vowels) = REDUCE string( init lv_string val assigning\n  <<FOR letter IN lv_string CHANGING value = VALUE #( val= letter cond=( NOT ( letter CA \"AEIOUaeiou\" ) ) )>> ).\n\nWRITE: / lv_no_vowels.\n"
    },
    {
        "instruction": "Name a few Python libraries used for data analysis.",
        "input": "",
        "output": "Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.",
        "abap": "Here are the equivalent ABAP data analysis libraries:\n\n*   **Pandas**: No direct equivalent, but can be achieved using CL_ABAP_DATA_DESCR or classes from class ABAP_DOM. \n    Alternative approach: Implement your own classes to handle data handling.\n*   **NumPy**: Not directly available in ABAP, but numerical operations can be performed using the ABAP built-in functions or external libraries like `cl_abap_math` for mathematical operations and `if_x01` for linear algebra.\n\n        DATA: lv_number1 TYPE i,\n              lv_number2 TYPE i.\n        lv_number1 = 10.\n        lv_number2 = 5.\n\n        IF lv_number1 + lv_number2 > 15. \" performs addition\n          MESSAGE 'true' TYPE 'I'.\n        ELSEIF lv_number1 - lv_number2 < 5. \" performs subtraction\n          MESSAGE 'false' TYPE 'I'.\n        ENDIF.\n*   **SciPy**: Not directly available in ABAP, but scientific and engineering applications can be implemented using built-in functions or external libraries like `cl_abap_math` for mathematical operations.\n*   **Matplotlib**: No direct equivalent, as it's a plotting library. \n    Alternative approach: Use either report output with various styles to display the results in an interactive way or use the ABAP interface to SAP GUI and create reports based on Crystal Reports. However, there are libraries like `abap2xlsx` that can convert data into Excel files.\n\n        REPORT zsample.\n        WRITE: 'Hello World'.\n\n*   **Scikit-Learn**: No direct equivalent. Machine learning algorithms can be implemented using the following ABAP classes:\n    *   `cl_abap_machine_learning`: for machine learning and predictive analytics, \n    *   `if_sam_machine_learning_api` : for various machine learning tasks,\n    *   `ABAPDOM_DATAHANDLER`: to implement data analysis\n*   **Seaborn**: No direct equivalent. Data visualization can be done using `cl_gui_chart_line`, `cl_gui_chart_bar` and `cl_gui_chart_pie`.\n\nThese alternatives are available from the ABAP Development Tools in SAP Solution Manager 7.2 onwards, as well as in SAP Netweaver 7.3.\n\nNote: For advanced data analysis tasks you can also use external tools like python on SAP HANA, or SAP Vora (a SQL-based analytics engine) and call these via REST APIs from ABAP."
    },
    {
        "instruction": "Write a regular expression to validate a given string of IP addresses.",
        "input": "",
        "output": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
        "abap": "DATA: lv_ip TYPE string.\n\n\" Assuming lv_ip contains the IP address to be validated\nIF lv_ip CP '^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$'.\n  \" validation passed\nELSE.\n  \" invalid IP address\nENDIF.\n"
    },
    {
        "instruction": "What is the purpose of a constructor in a class in Java?",
        "input": "",
        "output": "The purpose of a constructor in a class in Java is to initialize an object of that class. A constructor is a special kind of method that is used to create an object of its associated class. When an object of the class is created, the constructor is used to set the initial state of the object.",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor IMPORTING VALUE(iv_value) TYPE i,\n      test_method.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD constructor.\n    \"Set the initial state of the object\n    WRITE: / 'Constructor called with value', iv_value.\n  ENDMETHOD.\n\n  METHOD test_method.\n    DATA: lv_value TYPE string.\n    lv_value = 'Hello, World!'.\n    WRITE: / lv_value.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA(lo_example) = NEW lcl_example( iv_value = 5 ).\n  lo_example->test_method( ).\n"
    },
    {
        "instruction": "Create a function to convert a given number from decimal to binary representation using Python.",
        "input": "",
        "output": "def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 2)\n        num = num // 2\n    return binary[::-1]",
        "abap": "FORM dec_to_binary USING p_num TYPE i\n             CHANGING p_binary TYPE string.\n\n  DATA: lv_remainder TYPE i,\n         lv_number TYPE i.\n\n  p_binary = ''.\n  DO.\n    IF p_num > 0.\n      lv_remainder = p_num MOD 2.\n      lv_number = p_num / 2.\n      APPEND lv_remainder TO p_binary.\n      p_num = lv_number.\n    ELSE.\n      EXIT.\n    ENDIF.\n  ENDDO.\n\n  \" Reverse the binary string\n  p_binary = p_binary[].\n\nENDFORM.\n"
    },
    {
        "instruction": "Sort the following list in descending order.",
        "input": "my_list = [1, 5, 3, 7]",
        "output": "my_list.sort(reverse=True)",
        "abap": "DATA: lt_data TYPE STANDARD TABLE OF i.\n\n\" assume you have a internal table 'lt_data' filled with data\n\nSORT lt_data DESCENDING.\n"
    },
    {
        "instruction": "Write a Python function to convert a given string to lowercase.",
        "input": "string = \"FOO\"",
        "output": "def to_lowercase(string):\n    return string.lower()\n\nstring = \"FOO\"\nprint(to_lowercase(string))",
        "abap": "CLASS lcl_string_converter DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: method TO_LOWERCASE\n      IMPORTING\n        iv_string TYPE string\n      RETURNING\n        VALUE(rv_string) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_string_converter IMPLEMENTATION.\n  METHOD to_lowercase.\n    rv_string = iv_string ADJUST CAShE.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_string TYPE string.\n\nlv_string = 'FOO'.\nWRITE: / |{ cl_abap_char_utilities=>if_cl_abap_char_utilities_mpc~upper_to_lower( lv_string ) }|.\n"
    },
    {
        "instruction": "Re-write the code segment as a list comprehension.",
        "input": "numbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i)",
        "output": "numbers = [i for i in range(10) if i % 2 == 0]",
        "abap": "DATA: lt_numbers TYPE STANDARD TABLE OF i.\nLOOP AT sy-tcline INTO DATA(lv_index).\n  IF lv_index MOD 2 EQ 0.\n    APPEND lv_index TO lt_numbers.\n  ENDIF.\nENDLOOP.\nWRITE: / lt_numbers.\n"
    },
    {
        "instruction": "Rewrite the following SQL query so that it produces the same result but in an efficient way.",
        "input": "SELECT * FROM Orders WHERE OrderId IN (SELECT OrderId FROM OrderItems WHERE ProductId IN (SELECT ProductId FROM Products WHERE CategoryId = 2))",
        "output": "SELECT Orders.* \nFROM Orders \nINNER JOIN OrderItems \nON Orders.OrderId = OrderItems.OrderId \nINNER JOIN Products \nON OrderItems.ProductId = Products.ProductId\nWHERE Products.CategoryId = 2",
        "abap": "DATA: ls_orders TYPE ty_orders,\n      lt_products TYPE STANDARD TABLE OF ty_products.\n\nSELECT SINGLE *\n  INTO ls_orders\n  FROM orders\n  INNER JOIN orderitems\n    ON orders-orderid = orderitems-orderid\n  INNER JOIN products\n    ON orderitems-productid = products-productid\n  WHERE products-categoryid = '2'.\n\nIF sy-subrc <> 0.\n  MESSAGE 'No data found' TYPE 'E'.\nENDIF.\n\nTYPES: BEGIN OF ty_orders,\n          \" fields from Orders table\n        END OF ty_orders.\n\nTYPES: BEGIN OF ty_products,\n          \" fields from Products table\n        END OF ty_products.\n"
    },
    {
        "instruction": "Write a code to connect to a remote database.",
        "input": "username: john\npassword: john123\nIP: 100.10.0.10",
        "output": "import psycopg2\n\nconn = psycopg2.connect(host=\"100.10.0.10\", database=\"mydb\", user=\"john\", password=\"john123\")",
        "abap": "DATA: lr_con TYPE REF TO adbc_connection.\n\nTRY.\n    lr_con = cl_pgcsql_connection_factory=>get_connection(\n        i_host      = '100.10.0.10'\n        i_database  = 'mydb'\n        i_user_name = 'john'\n        i_password  = 'john123' ).\n  CATCH cx_pgcsql INTO DATA(lx_exception).\n    \" Handle error\nENDTRY.\n"
    },
    {
        "instruction": "Write a function in Java that takes two strings as parameters and returns true if the first string is a substring of the second.",
        "input": "",
        "output": "public boolean isSubstring(String s1, String s2) \n{ \n    int M = s1.length(); \n    int N = s2.length(); \n  \n    for (int i = 0; i <= N - M; i++) { \n        int j; \n  \n        for (j = 0; j < M; j++) \n            if (s2.charAt(i + j) != s1.charAt(j)) \n                break; \n  \n        if (j == M) \n            return true; \n    } \n  \n    return false; \n}",
        "abap": "REPORT zis_substring.\n\nCLASS lcl_is_substring DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_substring\n        IMPORTING\n          iv_s1 TYPE string\n          iv_s2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_is_substring IMPLEMENTATION.\n  METHOD is_substring.\n    DATA: lv_length_s1 TYPE i,\n          lv_length_s2 TYPE i,\n          lv_index     TYPE i.\n\n    lv_length_s1 = strlen( iv_s1 ).\n    lv_length_s2 = strlen( iv_s2 ).\n\n    DO lv_length_s2 - lv_length_s1 + 1 TIMES.\n      lv_index = sy-index - lv_length_s1 + 1.\n\n      DATA: lv_j TYPE i,\n            lv_found TYPE abap_bool.\n\n      DO lv_length_s1 TIMES.\n        lv_j = sy-index - 1.\n        IF iv_s1+lvr_j(1) <> iv_s2+lv_index+lvr_j(1).\n          EXIT.\n        ENDIF.\n      ENDDO.\n\n      IF lv_j >= lv_length_s1.\n        rv_result = abap_true.\n        RETURN.\n      ENDIF.\n    ENDDO.\n\n    rv_result = abap_false.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a function to generate a random password of length n",
        "input": "",
        "output": "import random\n\ndef generate_password(n):\n    \"\"\"\n    Create a function to generate a random password of length n\n    :param n: the length of the password\n    :return: a random password of length n\n    \"\"\" \n    # create a character list of symbols, alphabets, and numbers\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    # create a list of length n with random characters\n    password = [random.choice(characters) for _ in range(n)] \n    # convert the list to a string\n    password = ''.join(password)  \n    # return the password\n    return password",
        "abap": "CLASS zpassword_generator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_password IMPORTING p_length TYPE i RETURNING value(r_password) TYPE string.\nENDCLASS.\n\nCLASS zpassword_generator IMPLEMENTATION.\n  METHOD generate_password.\n    DATA: lv_characters TYPE string VALUE 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=',\n          lt_random_numbers TYPE STANDARD TABLE OF string,\n          ls_random_number TYPE string.\n\n    DO p_length TIMES.\n      \" Generate a random character from the set of characters\n      CALL METHOD cl_abap_char_utilities=>random_upper_lower INTO ls_random_number\n        EXCEPTIONS\n          wrong_parameter = 1\n          OTHERS = 2.\n      IF sy-subrc <> 0.\n        RAISE EXCEPTION TYPE zcx_password_generator.\n      ENDIF.\n\n      \" Append the character to the list of random numbers\n      APPEND ls_random_number TO lt_random_numbers.\n    ENDDO.\n\n    \" Convert the table of strings into a single string\n    r_password = JOIN( itab = lt_random_numbers SEPARATED BY space ).\n\n  ENDMETHOD.\n\nCLASS zcx_password_generator DEFINITION INHERITING FROM cx_static_check.\n  DATA:\n    p1 TYPE REF TO cl_abap_char_utilities.\n\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      raise\n        IMPORTING\n          VALUE(p1) TYPE string\n        RAISING\n          WRONG_PARAMETER.\nENDCLASS.\n\nCLASS zcx_password_generator IMPLEMENTATION.\n  METHOD raise.\n    IF NOT p1 IS INITIAL.\n      MESSAGE 'p1 is required' TYPE 'E'.\n      RAISE EXCEPTION TYPE wrong_parameter.\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a code to print out all the prime numbers between 2 and 10.",
        "input": "",
        "output": "# initialize an empty list to store prime numbers\nprime_numbers = []\n\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\n\nprint(prime_numbers) # prints [2, 3, 5, 7]",
        "abap": "DATA: lv_prime_numbers TYPE STANDARD TABLE OF i VALUE SPACE.\n\nLOOP AT VALUE 2 TO 10 INTO DATA(lv_num).\n\n  \" Initialize counter\n  DATA(lv_cnt) = 0.\n\n  LOOP AT VALUE 2 TO lv_num - 1 INTO DATA(lv_i).\n\n    IF lv_num MOD lv_i EQ 0.\n      ADD 1 TO lv_cnt.\n    ENDIF.\n  ENDLOOP.\n\n  IF lv_cnt EQ 0.\n    APPEND lv_num TO lv_prime_numbers.\n  ENDIF.\n\nENDLOOP.\n\nWRITE: lv_prime_numbers. \" prints [2, 3, 5, 7]\n"
    },
    {
        "instruction": "Read the following two JSON strings and merge them",
        "input": "json1 = {\n    \"name\": \"John\",\n    \"age\": 20\n}\n\njson2 = {\n    \"address\": \"123 Street\"\n}",
        "output": "import json\n\njson1 = json.loads(json1)\njson2 = json.loads(json2)\nmerged_json = {**json1, **json2}",
        "abap": "DATA: ls_json1 TYPE i,\n       ls_json2 TYPE i.\n\nDATA: lv_json TYPE string.\n\nlv_json = '{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}'.\nls_json1 = json->deserialize( lv_json ).\n\nlv_json = '{\n  \"key3\": \"value3\",\n  \"key4\": \"value4\"\n}'.\nls_json2 = json->deserialize( lv_json ).\n\nDATA: lt_merged_json TYPE ty_json.\n\nlt_merged_json = value #( base json=>merge ( ls_json1 ls_json2 ) ).\n\n\" Alternatively, you can also use the ABAP JSON extension\nlt_merged_json = VALUE #( key1 = ls_json1-key1 key3 = ls_json2-key3 key4 = ls_json2-key4 ).\n"
    },
    {
        "instruction": "Write a Python program to get the day of week from a given date and time.",
        "input": "from datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0)",
        "output": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")",
        "abap": "TYPES: BEGIN OF ty_date,\n          day TYPE dats.\nEND OF ty_date.\n\nDATA: lv_date TYPE ty_date.\n\nINITIALIZER: \" You can initialize the variable here or use a value from the screen\n\nlv_date-day = '2023-01-15'.  \" example date, adjust according to your needs\n\nREPORT zdemo_day_of_week.\n\nPERFORM get_day_of_week USING lv_date-day CHANGING result TYPE string.\n\nWRITE: / result.\n\n\nFORM get_day_of_week\n  USING\n    p_date TYPE ty_date,\n  CHANGING\n    value (result) TYPE string.\n\n  \" ABAP equivalent of Python's date.strftime(\"%A\")\n  result = cl_abap_context_info=>get_short_text( p_date-day ).\nENDFORM.\n"
    },
    {
        "instruction": "Develop an algorithm for sorting a given list in ascending order.",
        "input": "my_list = [5,1,4,2,8]",
        "output": "def sort_list(my_list): \n  for i in range(len(my_list)):\n    for j in range(i+1, len(my_list)):\n      if my_list[i] > my_list[j]: \n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\n\nsort_list(my_list)",
        "abap": "REPORT ztest.\n\nCLASS lcl_sorting DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_list\n        IMPORTING\n          value( itab ) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE( rs_tab ) TYPE STANDARD TABLE OF i .\nENDCLASS.\n\nCLASS lcl_sorting IMPLEMENTATION.\n  METHOD sort_list.\n    DATA: lr_index TYPE i,\n          lr_itab TYPE itab.\n\n    CLEAR: lr_itab[].\n\n    LOOP AT itab INTO lr_itab.\n      INSERT itab INTO TABLE lr_itab.\n    ENDLOOP.\n\n    DO.\n      \" Check if any further swaps are needed\n      READ TABLE lr_itab INDEX sy-sdlinfr FROM 1 INTO DATA(lr_item).\n      IF sy-subrc <> 0 OR lr_item IS INITIAL.\n        EXIT.\n      ELSEIF lr_item <> lr_itab[ sy-index - 1 ].\n        PERFORM swap USING: sy-index - 1 lr_index.\n      ENDIF.\n\n      \" Check for further swaps\n      READ TABLE lr_itab INDEX lr_index INTO DATA(lr_prev).\n      IF sy-subrc <> 0 OR lr_prev IS INITIAL.\n        EXIT.\n      ELSEIF lr_item < lr_prev.\n        PERFORM swap USING: lr_index lr_index - 1.\n      ENDIF.\n\n    ENDDO.\n\n    rs_tab = lr_itab[].\n  ENDMETHOD.\n\n  FORM swap USING p_i TYPE i\n                    p_j TYPE i.\n    DATA(lr_temp) = lr_itab[ p_i ].\n    lr_itab[ p_i ] = lr_itab[ p_j ].\n    lr_itab[ p_j ] = lr_temp.\n  ENDFORM.\nENDCLASS.\n\nDATA: my_list TYPE STANDARD TABLE OF i,\n      rs_tab TYPE STANDARD TABLE OF i,\n      li TYPE i.\n\n\" Initialize the list\nDO 10 TIMES.\n  APPEND sy-index TO my_list.\nENDDO.\n\nSORT_LIST( IMPORTING itab = my_list\n          EXPORTING rs_tab = rs_tab ).\n\ncl_demo_output=>display(\n  `Sorted List: { rs_tab }` ).\n"
    },
    {
        "instruction": "Analyze the given Java code and identify the errors.",
        "input": "public class TestClass {\n   public static void main (String[] args) {\n      int x = 10;\n      int y = 20\n      int z = x + y;\n      system.out.println(\"The sum is: \" + z);\n   }\n}",
        "output": "The errors are:\n1. The semicolon at the end of line 2 is missing.\n2. The line 4 should be `System.out.println(\"The sum is: \" + z);` (the capital S is missing).\n3. The line 5 is an extra line which should be removed.",
        "abap": "public class HelloWorld {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 10;\n        int z = x + y; \n        System.out.println(\"The sum is: \" + z);\n"
    },
    {
        "instruction": "Name the components of a typical machine learning pipeline.",
        "input": "",
        "output": "A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.",
        "abap": "REPORT zml_pipline.\n\nCLASS lcl_data_preprocessing DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      clean_and_format\n        IMPORTING\n          iv_data TYPE string\n        EXPORTING\n          ev_cleaned TYPE string,\n      transform\n        IMPORTING\n          iv_data TYPE string\n        EXPORTING\n          ev_transformed TYPE string.\nENDCLASS.\n\nCLASS lcl_data_preprocessing IMPLEMENTATION.\n  METHOD clean_and_format.\n    \" remove leading and trailing whitespaces\n    ev_cleaned = to_upper( val = iv_data ).\n  ENDMETHOD.\n\n  METHOD transform.\n    \" apply transformations (e.g. date formatting)\n    DATA: lv_date TYPE dats.\n    CALL FUNCTION 'STRING_TO_DATE'\n      EXPORTING\n        im_string         = iv_data\n        im_format         = 'YYYYMMDDHHMMSS'\n      IMPORTING\n        ev_date           = lv_date.\n\n    ev_transformed = CONV #( lv_date ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Convert the following code from Swift to Java.",
        "input": "let age = 25",
        "output": "int age = 25;",
        "abap": "DATA: lv_age TYPE i VALUE '25'."
    },
    {
        "instruction": "Create a MySQL table and insert data into it.",
        "input": "",
        "output": "CREATE TABLE persons (\n    firstname TEXT NOT NULL,\n    lastname TEXT NOT NULL\n);\n\nINSERT INTO persons (firstname, lastname)\nVALUES ('John', 'Doe'), ('Jane', 'Doe');",
        "abap": "DATA: BEGIN OF ty_person OCCURS 0.\n  firstname TYPE string.\n  lastname   TYPE string.\nDATA: END OF ty_person.\n\nTYPES: BEGIN OF ty_table_data,\n         firstname TYPE string,\n         lastname   TYPE string,\n       END OF ty_table_data.\n\nDATA: lt_table TYPE STANDARD TABLE OF ty_table_data.\n\n\" Create a work area for the internal table\nDATA: ls_person LIKE LINE OF lt_table.\n\n\" Insert data into the internal table\nAPPEND VALUE #( firstname = 'John' lastname = 'Doe' ) TO lt_table.\nAPPEND VALUE #( firstname = 'Jane' lastname = 'Doe' ) TO lt_table.\n\n\" Create a database view or table using the internal table data\nSELECT FROM lt_table INTO CORRESPONDING FIELDS OF TABLE @DATA(lt_persons).\n\n\" Display the results (optional)\nLOOP AT lt_persons INTO ls_person.\n  WRITE: / ls_person-firstname, ls_person-lastname.\nENDLOOP.\n"
    },
    {
        "instruction": "Using the existing code as guidance, add a 2nd player and 2nd input field to the game.",
        "input": "playername1=input(\"What is your name? \")\nplayer_score1=0\n\nif turn==1:\n\tplayer_score1+=1\n\nprint(\"It is now \" + playername1 + \" turn. You have \" + str(player_score1) + \" points\")",
        "output": "playername1=input(\"What is your name? \")\nplayername2=input(\"What is your opponent's name? \")\nplayer_score1=0\nplayer_score2=0\n\nif turn==1:\n\tplayer_score1+=1\n\nif turn==2:\n\tplayer_score2+=1\n\nprint(\"It is now \" + playername1 + \"'s turn. You have \" + str(player_score1) + \" points\")\nprint(\"It is now \" + playername2 + \"'s turn. You have \" + str(player_score2) + \" points\")",
        "abap": "REPORT zplayer_game.\n\nDATA: lv_playername1 TYPE string,\n      lv_playername2 TYPE string,\n      lv_turn        TYPE i,\n      lv_player_score1 TYPE i,\n      lv_player_score2 TYPE i.\n\nPARAMETERS: p_playername1 LIKE sy-unixname OBLIGATORY,\n            p_playername2 LIKE sy-unixname OBLIGATORY.\n\n\" Get player names from input fields\nlv_playername1 = p_playername1.\nlv_playername2 = p_playername2.\n\n\" Initialize scores\nlv_player_score1 = 0.\nlv_player_score2 = 0.\n\n\" Determine whose turn it is (in this case, we're assuming the first player goes first)\nlv_turn = 1.\n\nIF lv_turn = 1.\n  \" Increment score for first player\n  lv_player_score1 += 1.\nENDIF.\n\nIF lv_turn = 2.\n  \" Increment score for second player\n  lv_player_score2 += 1.\nENDIF.\n\n\" Output scores to the screen\nWRITE: / 'It is now ', lv_playername1, \"'s turn. You have \", lv_player_score1, \" points\".\nWRITE: / 'It is now ', lv_playername2, \"'s turn. You have \", lv_player_score2, \" points\".\n"
    },
    {
        "instruction": "Create a program to generate the sum of all the elements in a given list",
        "input": "[1, 2, 3, 4, 5]",
        "output": "\"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))",
        "abap": "REPORT zsum_list.\n\nCLASS lcl_sum_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sum_list\n        IMPORTING\n          iv_num_tab TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_total) TYPE i.\nENDCLASS.\n\nCLASS lcl_sum_list IMPLEMENTATION.\n  METHOD sum_list.\n    DATA: lv_total TYPE i.\n\n    LOOP AT iv_num_tab INTO DATA(ls_num).\n      lv_total += ls_num.\n    ENDLOOP.\n\n    rv_total = lv_total.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_numbers TYPE STANDARD TABLE OF i,\n        lv_sum     TYPE i.\n\n  \" Fill the internal table with numbers\n  APPEND 1 TO lt_numbers.\n  APPEND 2 TO lt_numbers.\n  APPEND 3 TO lt_numbers.\n  APPEND 4 TO lt_numbers.\n  APPEND 5 TO lt_numbers.\n\n  \" Calculate and print the sum\n  lv_sum = lcl_sum_list=>sum_list( lt_numbers ).\n  WRITE: / 'The sum of the list is:', lv_sum.\n"
    },
    {
        "instruction": "Create a loop to iterate over characters in a given string.",
        "input": "Sample string s = \"Hello World\"",
        "output": "for char in s:\n    print(char)",
        "abap": "LOOP AT string INTO DATA(lv_char).\n  WRITE: lv_char.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a method to reverse a linked list.",
        "input": "",
        "output": "def reverse_list(head): \n  \n    prev = None\n    current = head \n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head",
        "abap": "CLASS lcl_reverse_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse\n        IMPORTING\n          iv_head TYPE REF TO data\n        RETURNING\n          VALUE(rv_reversed) TYPE REF TO data.\nENDCLASS.\n\nCLASS lcl_reverse_list IMPLEMENTATION.\n  METHOD reverse.\n    DATA: lr_prev TYPE REF TO data,\n          lr_current TYPE REF TO data,\n          lr_next TYPE REF TO data.\n\n    \" Set initial values for prev and current\n    CREATE OBJECT lr_prev TYPE REF TO data.\n    create object lr_current TYPE REF TO data ASSIGNING iv_head.\n    \n    WHILE lr_current IS NOT BOUND.\n      MOVE CAST #( iv_head->* ) TO lr_next.\n      ASSIGN lr_current->* TO DATA(lr_current_val).\n      \" Swap the next pointers\n      lr_current->set_table_value( CAST #( lr_prev->get_table_value() ) ).\n      assign lr_current->* to lr_current_val.\n      move value #( lr_current_val ) to lr_prev->*.\n      \" Move to the next node\n      assign lr_next->* to DATA(lr_next_val).\n    ENDWHILE.\n\n    return iv_head.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create an HTML page to display a table of students",
        "input": "Data of students: First name, LastName and Age",
        "output": "<html>\n  <head> <title>My Student Table </title> </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for firstName, lastName, age in studentsList %}\n          <tr>\n            <td>{{ firstName }}</td>\n            <td>{{ lastName }}</td>\n            <td>{{ age }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html>",
        "abap": "REPORT zmy_student_table.\n\nDATA:\n  lv_students TYPE STANDARD TABLE OF ty_student,\n  BEGIN OF CLASS ty_student OCCURS 0.\n    TYPES: \n      begin OF type ty_student_data OCCURS 0.\n        firstName TYPE string,\n        lastName  TYPE string,\n        age       TYPE i.\n      END OF ty_student_data.\n\n  \" Add some sample data to the table\n  INSERT VALUE #( firstName = 'John'\n                  lastName  = 'Doe'\n                  age       = 25 ) INTO TABLE lv_students.\n\n  INSERT VALUE #( firstName = 'Jane'\n                  lastName  = 'Smith'\n                  age       = 30 ) INTO TABLE lv_students.\nEND OF CLASS ty_student.\n\nDATA: lr_table TYPE REF TO cl_salv_table,\n      lt_layout TYPE slis_t_layout,\n      lt_col_type TYPE slis_t_coltyp,\n      lt_fieldcat TYPE slis_t_fcat,\n      lv_window_title TYPE string.\n\n\" Set the title of the window\nlv_window_title = 'My Student Table'.\n\n\" Create a layout for the table\nlt_layout = VALUE #( default = abap_true ).\n\n\" Define column types\nlt_col_type = VALUE #(\n  ( fieldname   = 'FIRSTNAME'\n    coltype     = cl_salv_cb_column=>column_type_alphanumeric )\n  ( fieldname   = 'LASTNAME'\n    coltype     = cl_salv_cb_column=>column_type_alphanumeric )\n  ( fieldname   = 'AGE'\n    coltype     = cl_salv_cb_column=>column_type_numeric ) ).\n\n\" Define the fields for the table\nlt_fieldcat = VALUE #(  #(\n    fieldname       = 'FIRSTNAME'\n    category        = 'C'\n    key              = abap_true\n    output_length    = 10 )\n   #(\n     fieldname       = 'LASTNAME'\n     category        = 'C'\n     key              = abap_false\n     output_length    = 15 )\n   #(\n      fieldname       = 'AGE'\n      category        = 'N'\n      key             = abap_false ) ).\n\n\" Create the table control and set up the layout\nCALL FUNCTION 'SALV_SET_LIST_DISPLAY'\n\n  EXPORTING\n    i_callback_user_command          = ''\n    i_list_display                     =\n    i_title                           = lv_window_title\n    i_default                         = abap_true\n  IMPORTING\n    e_salv_table                       = lr_table\n  CHANGING\n    it_fieldcat                        = lt_fieldcat\n    it_layout                          = lt_layout.\n\n\" Display the table with sample data\nlr_table->display( ).\n\n\" Example function to get student list (like your studentsList in HTML)\nCLASS zmy_student DEFINITION.\n  CLASS-METHODS:\n    get_students_list\n      IMPORTING\n        VALUE(iv_count) TYPE i\n      RETURNING\n        VALUE(rv_students_list) TYPE string,\nENDCLASS.\n\nCLASS zmy_student IMPLEMENTATION.\nMETHOD get_students_list.\nDATA: lt_table TYPE STANDARD TABLE OF ty_student.\n\n\" Select sample data from database or local table (this is just an example)\nSELECT * FROM zstudent INTO CORRESPONDING FIELDS OF TABLE lt_table UP TO 2 ROWS.\n\nrv_students_list = REDUCE string( INIT lv_empty_string\n                            FOR ls_student IN lt_table\n                            NEXT |{ ls_student-firstName } { ls_student-lastName } { ls_student-age }| ).\n\nENDMETHOD.\n"
    },
    {
        "instruction": "Write a function in Python to calculate the value of \"e\" to 4 decimal places.",
        "input": "",
        "output": "from math import e\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)",
        "abap": "REPORT zcalc_e.\n\nDATA: lv_e TYPE f DECIMALS 4.\nTYPES: BEGIN OF ty_result,\n         result TYPE f,\n       END OF ty_result.\n\nDATA: ls_result TYPE ty_result.\n\nls_result-result = e(1).\nMOVE-CORRESPONDING ls_result TO lv_e.\nWRITE: / 'The value of e is:', lv_e.\n"
    },
    {
        "instruction": "How can you count the frequency of each word in a given string?",
        "input": "This is a string",
        "output": "str = \"This is a string\" \nwords = str.split()\ncount = {} \n  \nfor word in words: \n    if word in count: \n        count[word] += 1\n    else: \n        count[word] = 1\n        \nprint(count)\n\n# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}",
        "abap": "TYPES: BEGIN OF ty_word,\n         word TYPE string,\n       END OF ty_word.\n\nDATA: lv_string TYPE string VALUE 'This is a string',\n      lt_words  TYPE STANDARD TABLE OF ty_word.\n\n\" Split the string into words\nSPLIT lv_string AT space INTO TABLE lt_words.\n\n\" Create an internal table to store the word counts\nDATA: lt_count TYPE STANDARD TABLE OF ty_word WITH DEFAULT KEY.\n\n\" Loop through each word and increment its count in the table\nLOOP AT lt_words INTO DATA(ls_word).\n  READ TABLE lt_count WITH KEY word = ls_word-word BINARY SEARCH ASSIGNING FIELD-SYMBOL(<ls_count>).\n  IF sy-subrc <> 0.\n    INSERT ls_word INTO TABLE lt_count.\n  ELSE.\n    <ls_count>-word = ls_word-word.\n    <ls_count>-word += 1.\n  ENDIF.\nENDLOOP.\n\n\" Print the word counts\nLOOP AT lt_count INTO DATA(ls_count).\n  WRITE: ( / ls_count-word ).\n  WRITE: ( / ls_count-word ).\nENDLOOP.\n"
    },
    {
        "instruction": "Create an HTML page where the main content area has a random background color when the page is loaded.",
        "input": "",
        "output": "<!DOCTYPE html>\n<html>\n   <head>\n      <title>RandomBackground</title>\n      <script>\n         window.addEventListener(\"load\",function(){\n            var randomColor = \"#\"+((1<<24)*Math.random()|0).toString(16);\n            document.querySelector(\"body\").style.background = randomColor;\n         });\n      </script>\n   </head>\n   <body>\n   </body>\n</html>",
        "abap": "REPORT zrandom_background.\n\nTYPES: BEGIN OF ty_color,\n          red TYPE i,\n          green TYPE i,\n          blue TYPE i,\n       END OF ty_color.\nDATA: ls_color TYPE ty_color.\n\nPARAMETERS: p_random TYPE abap_bool DEFAULT 'X'.\n\nIF p_random EQ abap_true.\n  \" Generate random color\n  MOVE-CORRESPONDING value #( val1 = RAND_INT4(255) val2 = RAND_INT4(255) val3 = RAND_INT4(255) ) TO ls_color.\n\n  \" Convert to hexadecimal string\n  DATA: lv_hex_string TYPE x LENGTH 6.\n  CONCATENATE '00' INTO lv_hex_string.\n  DO 6 TIMES.\n    WRITE ls_color-red TO lv_hex_string LEFT-JUSTIFIED.\n  ENDDO.\n\n  \" Set background color of the output device (in this case, a new window)\n  CALL FUNCTION 'UI_SET_COLOR'\n    EXPORTING\n      red   = ls_color-red\n      green = ls_color-green\n      blue  = ls_color-blue.\nENDIF.\n\n\" Create a new window with the random background color\nCALL FUNCTION 'POPUP_WITH_TEMPLATE'\n  EXPORTING\n    template_name              = 'HTML_TEMPLATE'\n    parent_id                   = sy-dynnr\n    title                       = 'Random Background'\n    width                       = 200\n    height                      = 100\n  IMPORTING\n    popup_return                 =\n    pop_window_handle            =\n  EXCEPTIONS\n    template_not_found          = 1\n    OTHERS                      = 2.\n\nIF sy-subrc <> 0.\n  MESSAGE id 'W' type 'I' number '123'.\nENDIF.\n"
    },
    {
        "instruction": "Implement a method in JavaScript that checks if a String is a palindrome.",
        "input": "String = \"racecar\"",
        "output": "function checkPalindrome(str){\n    let revStr = str.split('').reverse().join(''); \n    return (str == revStr);\n}\n\ncheckPalindrome(\"racecar\"); // returns true",
        "abap": "FUNCTION z_check_palindrome.\n*\"----------------------------------------------------------------------\n*\"*\"Local Interface:\n*\"  IMPORTING\n*\"     VALUE(INPUT_STR) TYPE  STRING\n*\"----------------------------------------------------------------------\n\n  DATA: lv_reversed_str TYPE string.\n\n  lv_reversed_str = input_str.\n  DO strlen( input_str ) TIMES.\n    MOVE-CORRESPONDING input_str+0(1) TO lv_reversed_str+strlen(lv_reversed_str)(1).\n    TRANSPOSE lv_reversed_str.\n  ENDDO.\n\n  IF input_str CAESER-LOWERCASE = lv_reversed_str CAESER-LOWERCASE.\n    WRITE: / 'True'.\n  ELSE.\n    WRITE: / 'False'.\n  ENDIF.\n\nENDFUNCTION.\n"
    },
    {
        "instruction": "Create a program to classify whether the given number is even or odd",
        "input": "5",
        "output": "\"\"\"\nCreate a program to classify whether the given number is even or odd\n\"\"\"\n\ndef even_or_odd(number: int) -> str:\n    if number % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\nif __name__ == '__main__':\n    print(even_or_odd(5))",
        "abap": "CLASS lcl_even_odd DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_even IMPORTING\n                 iv_number TYPE i\n                EXPORTING\n                 ev_result TYPE string.\nENDCLASS.\n\nCLASS lcl_even_odd IMPLEMENTATION.\n  METHOD is_even.\n    IF iv_number MOD 2 = 0.\n      ev_result = 'even'.\n    ELSE.\n      ev_result = 'odd'.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_result TYPE string.\n  lcl_even_odd=>is_even( EXPORTING\n                             iv_number = 5\n                       IMPORTING\n                             ev_result = lv_result ).\n  WRITE: / lv_result.\n"
    },
    {
        "instruction": "Create a program to convert the input sentence to Pig Latin.",
        "input": "I am a computer programmer",
        "output": "\"\"\"\nCreate a program to convert the input sentence to Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            new_words.append(word[1:] + word[0] + 'ay')\n    return ' '.join(new_words)\n\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))",
        "abap": "REPORT zpig_latin.\n\nCLASS lcl_pig_latin DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      pig_latin\n        IMPORTING\n          VALUE(iv_sentence) TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_pig_latin IMPLEMENTATION.\n  METHOD pig_latin.\n    DATA: lv_words TYPE STANDARD TABLE OF string,\n          lv_new_word TYPE string,\n          lv_word TYPE string.\n\n    SPLIT iv_sentence AT space INTO TABLE lv_words.\n\n    LOOP AT lv_words ASSIGNING FIELD-SYMBOL(<lv_word>).\n      IF <lv_word>[] IN so 'aeiou'.\n        lv_new_word = <lv_word> && 'ay'.\n      ELSE.\n        lv_new_word = <lv_word>[] && <lv_word>[1] && 'ay'.\n      ENDIF.\n\n      APPEND lv_new_word TO DATA(lv_result_words).\n    ENDLOOP.\n\n    JOIN lvc lvc  \" to concatenate the words with a space in between\n    rv_result = string_to_upper( val=lv_result_words ).\n\n  ENDMETHOD.\nENDCLASS.\n\nINITIALIZATION.\n  PERFORM pig_latin USING 'I am a computer programmer' CHANGING result = 'result'.\n\nSTART-OF-SELECTION.\n  WRITE: / 'Result:', result.\n"
    },
    {
        "instruction": "Implement a linked list in Python.",
        "input": "",
        "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next",
        "abap": "CLASS lcl_node DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_sopot_linklist_node.\n    METHODS: new\n      IMPORTING\n        data TYPE string,\n      get_data  RETURNING\n        VALUE(data) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD new.\n    DATA: lr_node TYPE REF TO lcl_node.\n\n    CREATE OBJECT lr_node\n      EXPORTING\n        data = data.\n    me->data = data.\n  ENDMETHOD.\n\n  METHOD if_sopot_linklist_node~get_data.\n    result = data.\n  ENDMETHOD.\n\nENDCLASS.\n\nCLASS lcl_linked_list DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_sopot_linklist.\n    METHODS: insert_at_head\n      IMPORTING\n        value TYPE string,\n      append\n        IMPORTING\n          value TYPE string,\n      delete_by_value\n        IMPORTING\n          data TYPE string.\nENDCLASS.\n\nCLASS lcl_linked_list IMPLEMENTATION.\n  METHOD if_sopot_linklist~insert_at_head.\n    DATA: lr_node TYPE REF TO lcl_node.\n\n    CREATE OBJECT lr_node\n      EXPORTING\n        data = value.\n\n    lr_node->next = head.\n    head = lr_node.\n  ENDMETHOD.\n\n  METHOD append.\n    DATA: lr_node TYPE REF TO lcl_node,\n          lr_current TYPE REF TO lcl_node,\n          lr_previous TYPE REF TO lcl_node.\n\n    CREATE OBJECT lr_node\n      EXPORTING\n        data = value.\n\n    IF head IS INITIAL.\n      head = lr_node.\n      RETURN.\n    ENDIF.\n\n    lr_current = head.\n    WHILE lr_current->next IS BOUND.\n      lr_previous = lr_current.\n      lr_current = lr_current->next.\n    ENDDO.\n\n    lr_previous->next = lr_node.\n  ENDMETHOD.\n\n  METHOD delete_by_value.\n    DATA: lr_node TYPE REF TO lcl_node,\n          lr_current TYPE REF TO lcl_node,\n          lr_previous TYPE REF TO lcl_node.\n\n    IF head IS INITIAL.\n      RETURN.\n    ENDIF.\n\n    lr_current = head.\n    IF lr_current->data EQ data.\n      head = lr_current->next.\n      RETURN.\n    ENDIF.\n\n    WHILE lr_current IS BOUND.\n      IF lr_current->data EQ data.\n        lr_previous->next = lr_current->next.\n        RETURN.\n      ENDIF.\n      lr_previous = lr_current.\n      lr_current = lr_current->next.\n    ENDDO.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a SQL query to select the top 3 highest salaries in a employees table.",
        "input": "",
        "output": "SELECT TOP 3 salary FROM employees ORDER BY salary DESC;",
        "abap": "DATA: ls_output TYPE STANDARD TABLE OF ty_employee,\n      wa_output LIKE LINE OF ls_output.\n\nTYPES:\n  BEGIN TYPE-BUILDING.\n    TYPES: begin of type1,\n             salary TYPE f,\n           end of type1.\n  END OF TYPE-BUILDING.\n\nSELECT salary INTO CORRESPONDING FIELDS OF TABLE @ls_output FROM zemployees\n  ORDER BY salary DESC\n  LIMIT 3.\n\nLOOP AT ls_output INTO wa_output.\n WRITE: / wa_output-salary.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a function that takes a string and returns a dictionary counting each character in the string.",
        "input": "",
        "output": "def character_count(str): \n    res = {} \n  \n    for keys in str: \n        res[keys] = res.get(keys, 0)+1\n        \n    return res",
        "abap": "CLASS lcl_character_count DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      character_count\n        IMPORTING\n          iv_str   TYPE string\n        EXPORTING\n          et_result TYPE STANDARD TABLE OF ty_result.\n\n  TYPES: BEGIN OF ty_result,\n           key     TYPE string,\n           value   TYPE i,\n         END OF ty_result.\n\nCLASS lcl_character_count IMPLEMENTATION.\n  METHOD character_count.\n    DATA: lt_result TYPE STANDARD TABLE OF ty_result.\n\n    LOOP AT iv_str INTO DATA(lv_char).\n      lv_char = to_upper( val = lv_char ).\n      READ TABLE et_result WITH KEY key = lv_char INTO DATA(ls_result).\n      IF sy-subrc <> 0.\n        INSERT VALUE #( key = lv_char value = 1 ) INTO TABLE et_result.\n      ELSE.\n        ls_result-value = ls_result-value + 1.\n        UPDATE TABLE et_result FROM ls_result.\n      ENDIF.\n    ENDLOOP.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Convert a string to all lowercase using the built-in string method.",
        "input": "string = \"This Is A String\"",
        "output": "lowercase_string = string.lower()\nprint(lowercase_string)",
        "abap": "DATA: lv_string TYPE string.\nlv_string = 'Your String'.\nWRITE: lv_string TO LOWER CASE.\nWRITE: / lv_string.\n"
    },
    {
        "instruction": "Output the top 3 strings from the given array that have the greatest length",
        "input": "let arr = [\"Pineapple\", \"Apple\",\"Banana\", \"Strawberry\", \"Grape\"]",
        "output": "let top3 = arr.sort((a, b) => b.length - a.length).slice(0, 3);\nconsole.log(top3); // Output: [\"Pineapple\", \"Strawberry\", \"Banana\"]",
        "abap": "DATA: lt_arr TYPE STANDARD TABLE OF string,\n      top3    TYPE STANDARD TABLE OF string.\n\nlt_arr = VALUE #( ( 'Apple' ) ( 'Pineapple' ) ( 'Strawberry' ) ( 'Banana' ) ).\n\nSORT lt_arr BY LENGTH DESCENDING.\nMOVE FIRST 3 ROWS OF lt_arr TO top3.\n\nWRITE: / top3.\n"
    },
    {
        "instruction": "Print out the 5th number of the Fibonacci sequence.",
        "input": "",
        "output": "5",
        "abap": "A simple number!\n\nIn ABAP (Advanced Business Application Programming), this could be represented as a literal value:\n\n`DATA: lv_number TYPE i VALUE 5.`"
    },
    {
        "instruction": "Write a for loop in Java to print all the numbers in a given list.",
        "input": "int[] list = {21, 34, 54, 77, 92};",
        "output": "for (int i = 0; i < list.length; i++) {\n System.out.println(list[i]);\n}",
        "abap": "DATA: lv_index TYPE i.\n\nDO.\n  lv_index = lv_index + 1.\n  IF lv_index <= lines( it_list ).\n    WRITE: / it_list[ lv_index - 1 ].\n  ELSE.\n    EXIT.\n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Write a Python program to generate the first n Fibonacci numbers.",
        "input": "",
        "output": "def generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list",
        "abap": "REPORT zgenerate_fibonacci_numbers.\n\nCLASS lcl_generate_fibonacci_numbers DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_fibonacci_numbers IMPORTING\n        i_n     TYPE i\n      EXPORTING\n        et_result TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_generate_fibonacci_numbers IMPLEMENTATION.\n  METHOD generate_fibonacci_numbers.\n    DATA: lv_i TYPE i,\n          lt_fib_list TYPE STANDARD TABLE OF i.\n\n    IF i_n = 1.\n      APPEND 0 TO it_result.\n    ELSEIF i_n = 2.\n      APPEND 0 TO it_result.\n      APPEND 1 TO it_result.\n    ELSE.\n      it_result = VALUE #( ( 0 ) ( 1 ) ).\n      DO i_n - 2 TIMES.\n        lv_i = lines( it_result ) - 1.\n        APPEND it_result[ lv_i ] + it_result[ lv_i - 1 ]\n          TO it_result.\n      ENDDO.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM generate_fibonacci_numbers USING 10 CHANGING result = lt_fib_list.\n  LOOP AT lt_fib_list INTO DATA(lv_value).\n    WRITE: lv_value.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Edit the Python code so that it prints out the total number of elements in the list.",
        "input": "list = [1, 2, 3, 4, 5]",
        "output": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))",
        "abap": "DATA: lv_list TYPE standard table OF i WITH DEFAULT KEY.\n\nAPPEND 1 TO lv_list.\nAPPEND 2 TO lv_list.\nAPPEND 3 TO lv_list.\nAPPEND 4 TO lv_list.\nAPPEND 5 TO lv_list.\n\nWRITE: / |Total number of elements in the list: { sy-dbcnt }|.\n"
    },
    {
        "instruction": "Reverse a given string.",
        "input": "\"Hello World!\"",
        "output": "# Initialize the input string\nstring = \"Hello World!\"\n \n# Get the string length\nstringLength = len(string)\n \n# Create an empty string for storing the reversed string\nreversedString = \"\"\n \n# Iterate over the input string in reverse order\nfor i in range(stringLength -1, -1, -1):\n    reversedString += string[i]\n \n# Print the reversed string\nprint(reversedString) # Prints !dlroW olleH",
        "abap": "REPORT zstring_reverser.\n\nDATA: lv_string TYPE string,\n      lv_length TYPE i,\n      lv_reverse TYPE string.\n\nlv_string = 'Hello World!'.\nlv_length = strlen( val = lv_string ).\n\nDO.\n  lv_length = lv_length - 1.\n  lv_reverse += lv_string(lv_length).\nENDDO.\n\nWRITE: / lv_reverse. \"#LC\n"
    },
    {
        "instruction": "Create a function in Python that returns all permutations of a string.",
        "input": "",
        "output": "def get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n\n  return permutations",
        "abap": "CLASS zcl_get_permutations DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_all_permutations\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          et_permutations TYPE STANDARD TABLE OF string.\n\nENDCLASS.\n\nCLASS zcl_get_permutations IMPLEMENTATION.\n  METHOD get_all_permutations.\n    DATA: lt_permutations TYPE STANDARD TABLE OF string,\n          lv_char         TYPE c,\n          lv_slice_string TYPE string.\n\n    IF strlen( iv_string ) = 1.\n      APPEND iv_string TO et_permutations.\n      RETURN.\n    ENDIF.\n\n    DO strlen( iv_string ) TIMES.\n      lv_char = iv_string+sy-index(1).\n      lv_slice_string = iv_string+0(sy-index-1) + iv_string+sy-index+1.\n\n      get_all_permutations(\n        EXPORTING\n          iv_string  = lv_slice_string\n        IMPORTING\n          et_permutations = lt_permutations ).\n\n      LOOP AT lt_permutations INTO DATA(lv_permutation).\n        APPEND lv_char && lv_permutation TO et_permutations.\n      ENDLOOP.\n    ENDDO.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Deploy a Docker container to Heroku.",
        "input": "Heroku account details",
        "output": "Log in to Heroku using the account details provided.\nUse the command \"heroku container:push web -a [app-name]\" to deploy the container to Heroku. This command will build and push the Docker container to your Heroku app. You can monitor the progress of the deployment in the \u2018Activity\u2019 tab.",
        "abap": "\" Log in to Heroku using the account details provided.\nDATA: lv_username TYPE string,\n       lv_password TYPE string.\n\nlv_username = 'your_username'.\nlv_password = 'your_password'.\n\nCALL FUNCTION 'LOGON_TO_SYSTEM'\n  EXPORTING\n    system      = lv_username\n    user        = lv_password\n  EXCEPTIONS\n    OTHERS       = 4.\n\nIF sy-subrc <> 0.\n  WRITE: / 'Login failed'.\nENDIF.\n\n\" Use the command \"heroku container:push web -a [app-name]\" to deploy the container to Heroku.\nDATA: ls_command TYPE string.\n\nls_command = 'heroku container:push web -a ' && 'your_app_name'.\n\nCALL FUNCTION 'EXECUTE_COMMAND'\n  EXPORTING\n    command         = ls_command\n  EXCEPTIONS\n    OTHERS           = 4.\n\nIF sy-subrc <> 0.\n  WRITE: / 'Deployment failed'.\nENDIF.\n\n\" Monitor the progress of the deployment in the \u2018Activity\u2019 tab.\nDATA: ls_url TYPE string.\n\nls_url = 'https://dashboard.heroku.com/apps/your_app_name/activity'.\n\nCALL FUNCTION 'OPEN_URL_IN_DEFAULT_BROWSER'\n  EXPORTING\n    url         = ls_url\n  EXCEPTIONS\n    OTHERS       = 4.\n\nIF sy-subrc <> 0.\n  WRITE: / 'Browser start failed'.\nENDIF.\n"
    },
    {
        "instruction": "Create a feature for predicting a customer's subscription plan based off their purchase history.",
        "input": "The customer has purchased 2 shirts, 1 hat, and 3 pairs of jeans in the past month.",
        "output": "The prediction feature should calculate the customer's current subscription plan by taking into account the items they have purchased. It could use factors such as item types, quantity of items purchased, time since purchase, cost of items, sale promotions, combinations of items, and so forth. The feature should use a combination of analyzed data and established weights for each factor to accurately predict the customer's most likely subscription plan.",
        "abap": "REPORT zpredict_subscription_plan.\n\nCLASS zcl_customer_predictor DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_predicted_plan IMPORTING\n        iv_customer_id TYPE string\n        iv_items_purchased TYPE STANDARD TABLE OF zcl_item=>ty_item\n      RETURNING\n        VALUE(rv_plan) TYPE string.\n\n  PRIVATE SECTION.\n    DATA: lv_data_analyzed TYPE i,\n          lt_factors       TYPE STANDARD TABLE OF zcl_factor=>ty_factor,\n          ls_weights      TYPE zcl_weight=>ty_weight.\n\nENDCLASS.\n\nCLASS zcl_customer_predictor IMPLEMENTATION.\n\nMETHOD get_predicted_plan.\n  DATA: lo_item TYPE REF TO zcl_item,\n        lo_factor TYPE REF TO zcl_factor,\n        lv_total_value TYPE f.\n\n  \" Get customer data\n  SELECT SINGLE *\n    FROM zcustomer\n   WHERE kunnr = iv_customer_id\n   INTO CORRESPONDING FIELDS OF lo_customer.\n\n  IF sy-subrc <> 0.\n    RAISE EXCEPTION TYPE cx_static_check MESSAGE 'Customer not found'.\n  ENDIF.\n\n  \" Initialize factors and weights\n  lt_factors = VALUE #( (\n      mandt = lo_customer->mandt\n      item_type = abap_true\n      factor_name = 'item-type'\n    )\n    (\n      mandt = lo_customer->mandt\n      quantity_purchased = abap_true\n      factor_name = 'quantity-purchased'\n    )\n    (\n      mandt = lo_customer->mandt\n      time_since_purchase = abap_true\n      factor_name = 'time-since-purchase'\n    )\n  ).\n\n  \" Analyze data and assign weights to factors\n  FIELD-SYMBOLS <fs_item> LIKE LINE OF iv_items_purchased.\n  LOOP AT iv_items_purchased INTO <fs_item>.\n    DATA: ls_factor TYPE zcl_factor=>ty_factor,\n          ls_weight TYPE zcl_weight=>ty_weight.\n\n    \" Calculate total value of each factor for this item\n    lv_total_value = lv_total_value + <fs_item>-item_cost * <fs_item>-quantity.\n\n    \" Determine weight for each factor based on their impact on the customer's plan\n    CASE <fs_item>-item_type.\n      WHEN 'A'.\n        ls_factor-item_type = 0.5.\n      WHEN 'B'.\n        ls_factor-quantity_purchased = 0.3.\n      WHEN 'C'.\n        ls_factor-time_since_purchase = 0.2.\n      WHEN OTHERS.\n        CONTINUE.\n    ENDCASE.\n\n    \" Assign weight to factor based on its impact\n    READ TABLE lt_factors INTO ls_factor WITH KEY mandt = lo_customer->mandt item_type = abap_true.\n    IF sy-subrc <> 0.\n      ls_weight-factor_name = ls_factor-factor_name.\n      ls_weight-weight = ls_factor-weight.\n      APPEND ls_weight TO ls_weights.\n    ENDIF.\n\n    \" Update customer's data\n    lo_customer-item_total_value += lv_total_value.\n    lo_customer-item_count += <fs_item>-quantity.\n  ENDLOOP.\n\n  \" Determine predicted plan using a weighted average of factors\n  DATA: lv_plan TYPE string,\n        lv_factor_type TYPE string,\n        lv_factor_weight TYPE f,\n        lv_score TYPE f.\n\n  LOOP AT lt_factors INTO ls_factor.\n    CASE ls_factor-factor_name.\n      WHEN 'item-type'.\n        lv_factor_type = 'A'.\n        lv_factor_weight = ls_weights-item_type.\n      WHEN 'quantity-purchased'.\n        lv_factor_type = 'B'.\n        lv_factor_weight = ls_weights-quantity_purchased.\n      WHEN 'time-since-purchase'.\n        lv_factor_type = 'C'.\n        lv_factor_weight = ls_weights-time_since_purchase.\n    ENDCASE.\n\n    \" Calculate weighted score for each factor\n    IF lo_customer-item_total_value > 0.\n      lv_score = ( lo_customer-item_count / lo_customer-item_total_value ) * lv_factor_weight.\n    ELSE.\n      lv_score = 0.\n    ENDIF.\n\n    \" Determine predicted plan based on weighted scores\n    CASE lv_factor_type.\n      WHEN 'A'.\n        IF lv_score >= 0.5.\n          rv_plan = 'Premium'.\n        ELSE.\n          rv_plan = 'Standard'.\n        ENDIF.\n      WHEN 'B'.\n        IF lv_score >= 0.3.\n          rv_plan = 'Business'.\n        ELSE.\n          rv_plan = 'Individual'.\n        ENDIF.\n      WHEN 'C'.\n        IF lv_score >= 0.2.\n          rv_plan = 'Corporate'.\n        ELSE.\n          rv_plan = 'Partner'.\n        ENDIF.\n    ENDCASE.\n\n    \" Calculate final predicted plan\n    IF lo_customer-item_count > <fs_item>-quantity.\n      rv_plan = 'Enterprise'.\n    ELSE.\n      rv_plan = 'Express'.\n    ENDIF.\n  ENDLOOP.\n\n  \" Return predicted plan\n  rv_plan = |{ rv_plan }|.\nENDMETHOD.\n\nINITIALIZER.\nlv_data_analyzed = 0.\nlt_factors = VALUE #( ).\n\nENDCLASS.\n\nCLASS zcl_item DEFINITION.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF ty_item,\n             item_id TYPE string,\n             item_type TYPE c LENGTH 1,\n             quantity TYPE i,\n             time_since_purchase TYPE d,\n             cost TYPE f,\n           END OF ty_item.\n\n    CLASS-METHODS:\n      get_item IMPORTING\n        iv_item_id TYPE string\n      RETURNING\n        VALUE(ro_item) TYPE REF TO zcl_item.\n\nENDCLASS.\n\nCLASS zcl_item IMPLEMENTATION.\n\nMETHOD get_item.\n  DATA: lo_customer_data TYPE REF TO zcustomer,\n        lv_total_value    TYPE f,\n        lt_factors       TYPE STANDARD TABLE OF zcl_factor=>ty_factor.\n\n  ro_item = NEW #( ).\n\n  \" Get customer data\n  SELECT SINGLE *\n    FROM zcustomer\n   WHERE kunnr = iv_item_id\n   INTO CORRESPONDING FIELDS OF lo_customer_data.\n  IF sy-subrc <> 0.\n    RAISE EXCEPTION TYPE cx_static_check MESSAGE 'Customer not found'.\n  ENDIF.\n\n  \" Get item data\n  SELECT SINGLE *\n    FROM zitems\n   WHERE item_id = iv_item_id\n   INTO CORRESPONDING FIELDS OF DATA(ls_item).\n  IF sy-subrc <> 0.\n    RAISE EXCEPTION TYPE cx_static_check MESSAGE 'Item not found'.\n  ENDIF.\n\n  \" Calculate total value of this item\n  lv_total_value = ls_item->item_cost * ls_item-quantity.\n\n  \" Assign weights to factors based on their impact on the customer's plan\n  FIELD-SYMBOLS <fs_factor> LIKE LINE OF lt_factors.\n  LOOP AT DATA:lt_factors INTO <fs_factor>.\n    CASE <fs_factor>-factor_name.\n      WHEN 'item-type'.\n        IF ls_item->item_type = abap_true.\n          ro_item-item_type = 0.5.\n        ELSE.\n          ro_item-item_type = 0.\n        ENDIF.\n      WHEN 'quantity-purchased'.\n        IF ls_item->quantity > 1.\n          ro_item-quantity_purchased = 0.3.\n        ELSE.\n          ro_item-quantity_purchased = 0.\n        ENDIF.\n      WHEN 'time-since-purchase'.\n        IF sy-datum - ls_item-time_since_purchase < 30.\n          ro_item-time_since_purchase = 0.2.\n        ELSE.\n          ro_item-time_since_purchase = 0.\n        ENDIF.\n    ENDCASE.\n  ENDLOOP.\n\nENDMETHOD.\n\nENDCLASS.\n\nCLASS zcl_factor DEFINITION.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF ty_factor,\n             mandt TYPE string,\n             factor_name TYPE c LENGTH 20,\n             weight   TYPE f,\n           END OF ty_factor.\n\n  CLASS-METHODS:\n    get_factor IMPORTING\n      iv_mandt        TYPE string\n      iv_factor_name  TYPE string\n    RETURNING\n      VALUE(ro_factor) TYPE REF TO zcl_factor.\n\nENDCLASS.\n\nCLASS zcl_factor IMPLEMENTATION.\n\nMETHOD get_factor.\n  ro_factor = NEW #( ).\n  ro_factor-mandt = iv_mandt.\n  ro_factor-factor_name = iv_factor_name.\n\n  CASE iv_factor_name.\n    WHEN 'item-type'.\n      ro_factor-weight = 0.5.\n    WHEN 'quantity-purchased'.\n      ro_factor-weight = 0.3.\n    WHEN 'time-since-purchase'.\n      ro_factor-weight = 0.2.\n    WHEN OTHERS.\n      CONTINUE.\n  ENDCASE.\n\nENDMETHOD.\n\nENDCLASS.\n\nCLASS zcl_weight DEFINITION.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF ty_weight,\n             factor_name TYPE c LENGTH 20,\n             weight     TYPE f,\n           END OF ty_weight.\n\n  CLASS-METHODS:\n    get_weight IMPORTING\n      iv_factor_name  TYPE string\n    RETURNING\n      VALUE(ro_weight) TYPE REF TO zcl_weight.\n\nENDCLASS.\n\nCLASS zcl_weight IMPLEMENTATION.\n\nMETHOD get_weight.\n  ro_weight = NEW #( ).\n  ro_weight-factor_name = iv_factor_name.\n\n  CASE iv_factor_name.\n    WHEN 'item-type'.\n      ro_weight-weight = 0.5.\n    WHEN 'quantity-purchased'.\n      ro_weight-weight = 0.3.\n    WHEN 'time-since-purchase'.\n      ro_weight-weight = 0.2.\n    WHEN OTHERS.\n      CONTINUE.\n  ENDCASE.\n\nENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Use JavaScript to filter an array of numbers such that only even numbers are returned.",
        "input": "[1, 4, 6, 7, 8, 3, 10]",
        "output": "const arr = [1, 4, 6, 7, 8, 3, 10];\n\nconst evenArr = arr.filter(num => num % 2 == 0);\n\nconsole.log(evenArr); // Output: [4, 6, 8, 10]",
        "abap": "TYPES: ty_array TYPE STANDARD TABLE OF i.\n\nDATA: lt_arr TYPE ty_array,\n      lt_even TYPE ty_array.\n\nlt_arr = VALUE #( 1 4 6 7 8 3 10 ).\n\nLOOP AT lt_arr INTO DATA(ls_num) .\n  IF ls_num MOD 2 EQ 0.\n    APPEND ls_num TO lt_even.\n  ENDIF.\nENDLOOP.\n\nWRITE: / lt_even. \" Output: [4, 6, 8, 10]\n"
    },
    {
        "instruction": "Write a Python program to concatenate all elements in a list into a string separated by a given separator.",
        "input": "input_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nseparator = \"-\"",
        "output": "def list_to_string(input_list, separator):\n    return separator.join(input_list)",
        "abap": "FUNCTION Z_LIST_TO_STRING\n  IMPORTING\n    VALUE( IV_INPUT_LIST ) TYPE TABLE OF string\n    VALUE( IV_SEPARATOR ) TYPE string\n  EXPORTING\n    VALUE( EV_RESULT ) TYPE string.\n\n  DATA: lv_string TYPE string.\n\n  LOOP AT iv_input_list INTO DATA(lv_item).\n    IF lv_string IS INITIAL.\n      lv_string = lv_item.\n    ELSE.\n      lv_string = lv_string && iv_separator && lv_item.\n    ENDIF.\n  ENDLOOP.\n\n  ev_result = lv_string.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Create a function to reverse a string.",
        "input": "s = \"hello world\"",
        "output": "\"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))",
        "abap": "REPORT zreverse_string.\n\nCLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          iv_string TYPE string\n        EXPORTING\n          ev_reversed_string TYPE string.\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_reversed_string TYPE string.\n\n    DO strlen( iv_string ) TIMES.\n      APPEND iv_string+sy-index(1) TO lv_reversed_string.\n    ENDDO.\n\n    ev_reversed_string = lv_reversed_string.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_string TYPE string VALUE 'hello world'.\n  PERFORM reverse_string EXPORTING iv_string = lv_string\n                           IMPORTING ev_reversed_string = lv_string.\n\n  WRITE: / lv_string.\n"
    },
    {
        "instruction": "Given a list of numbers, print the difference between the largest and the smallest number.",
        "input": "list_of_numbers = [10, 7, 5, 12, 4]",
        "output": "difference = max(list_of_numbers) - min(list_of_numbers)\nprint(difference)",
        "abap": "DATA: \n  lv_difference TYPE i.\n\n\" find maximum and minimum values in internal table\nSORT itab_of_numbers.\nREAD TABLE itab_of_numbers INTO DATA(lv_max) INDEX sy-tfill.\nREAD TABLE itab_of_numbers INTO lv_min INDEX sy-delta.\n\n\" calculate difference\nlv_difference = lv_max - lv_min.\n\nWRITE: / lv_difference.\n"
    },
    {
        "instruction": "Create a MongoDB query for finding a record in the collection that contains a specific value for a given field.",
        "input": "The collection is named 'books' and contains the fields 'title', 'author', and 'pub_date'. We would like to find a record where the title is \"Harry Potter and The Sorcerer's Stone\".",
        "output": "db.books.find({\"title\" : \"Harry Potter and The Sorcerer's Stone\"});",
        "abap": "DATA: lr_books TYPE REF TO cl_document_query.\nlr_books = cl_document_query=>if_saw_document_query~create( ).\n\nCALL METHOD lr_books->add_term( name = 'TITLE' value = 'Harry Potter and The Sorcerer''s Stone' ).\nCALL METHOD lr_books->execute(\n  IMPORTING\n    et_result        = DATA(lt_results)\n    ex_error_message = DATA(lv_err_msg) ).\n\nLOOP AT lt_results INTO DATA(ls_result).\n  WRITE: ls_result-title.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a function that outputs the minimum and maximum ofa list of numbers.",
        "input": "list = [1, 3, 7, -2, 4]",
        "output": "def minmax(list)\n    min = list[0]\n    max = list[0]\n    for num in list[1:]:\n        if num < min:\n            min = num\n        if num > max:\n            max = num\n\n    return min, max",
        "abap": "REPORT ztest.\n\nCLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      minmax\n        IMPORTING\n          value(iv_list) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD minmax.\n    DATA: lv_min TYPE i,\n          lv_max TYPE i.\n\n    IF iv_list IS NOT BOUND.\n      MESSAGE 'List must not be empty' TYPE 'E'.\n      RETURN.\n    ENDIF.\n\n    SORT iv_list IN TABLES.\n\n    READ TABLE iv_list INTO lv_min INDEX 1.\n    IF sy-subrc <> 0.\n      lv_min = iv_list[ 1 ].\n    ENDIF.\n\n    DO.\n      IF lv_min > iv_list[ sy-tabix ].\n        lv_min = iv_list[ sy-tabix ].\n      ENDIF.\n      IF lv_max < iv_list[ sy-tabix ].\n        lv_max = iv_list[ sy-tabix ].\n      ENDIF.\n      IF sy-tabix = lines( iv_list ).\n        EXIT.\n      ELSE.\n        CONTINUE.\n      ENDIF.\n    ENDDO.\n\n    rv_result = |{ lv_min } { lv_max }|.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a SQL query to find the names of all employees working at a given department",
        "input": "",
        "output": "SELECT e.name \nFROM employee e \nJOIN department d ON e.departmentid = d.id \nWHERE d.name = 'given department'",
        "abap": "DATA: lv_department_name TYPE string.\n\nlv_department_name = 'Given Department'.\n\nSELECT e.name\n  INTO TABLE @DATA(lt_employee_names)\n  FROM zemployee AS e\n  JOIN zdepartment AS d ON e.departmentid = d.id\n  WHERE d.name = @lv_department_name.\n"
    },
    {
        "instruction": "Write a script in JavaScript to parse an XML document.",
        "input": "",
        "output": "// To parse an XML document in JavaScript:\n// 1. Use the DOMParser to load the XML document into an XML Document object\n// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document\n// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document\n// 4. Use the getAttribute method to obtain the attribute values of the desired elements\n// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  \n// 6. Parse the elements and create a custom object according to the returned XML.",
        "abap": "DATA: lx_xml TYPE string.\n\n\" Read the XML from a file or generate it dynamically\nlx_xml = '<root><person><name>John</name><age>30</age></person></root>'.\n\nDATA: lo_document TYPE REF TO if_ixml.\nDATA: lo_reader  TYPE REF TO if_ixml_dom_parser_reader.\nDATA: lv_success TYPE abap_bool.\n\n\" Load the XML into an iXML document\nlo_document = cl_ixml=>create( ).\nlo_reader = lo_document->domparser->create_reader(\n  val   = lx_xml\n  level = if_ixml_dom_constants=>xml_istream ).\n\nlv_success = lo_reader->read( ).\nIF lv_success <> abap_true.\n  MESSAGE 'Error reading XML' TYPE 'E'.\nENDIF.\n\nDATA: lr_root TYPE REF TO if_ixml_element.\nlr_root = lo_document->domparser->get_document( )->create domestictree(\n  val   = lx_xml\n  level = if_ixml_dom_constants=>xml_istream ).\n\n\" Access elements by tag name\nDATA: lv_person TYPE i,\n      lv_name  TYPE string,\n      lv_age   TYPE i.\n\nDO.\n  lr_root->append_child( IMPORTING element = DATA(lr_element) ).\n  IF lr_element IS BOUND.\n    IF lr_element->get_tagname( ) = 'person'.\n      lv_person = lr_element->get_index( ).\n      EXIT.\n    ENDIF.\n  ELSE.\n    \" No more child elements\n    EXIT.\n  ENDIF.\nENDDO.\n\n\" Get the name and age of the first person element\nDO.\n  lr_root->append_child( IMPORTING element = DATA(lr_child) ).\n  IF lr_child IS BOUND.\n    IF lv_person = lr_child->get_index( ) AND lr_child->get_tagname( ) = 'name'.\n      lv_name = lr_child->get_text( ).\n      EXIT.\n    ENDIF.\n\n    IF lv_person = lr_child->get_index( ) AND lr_child->get_tagname( ) = 'age'.\n      lv_age = lr_child->get_int_value( ).\n      EXIT.\n    ENDIF.\n  ELSE.\n    \" No more child elements\n    EXIT.\n  ENDIF.\nENDDO.\n\n\" Print the name and age of the first person element\nWRITE: / lv_name, lv_age.\n"
    },
    {
        "instruction": "Edit the following code to print out all even numbers from 1 to 10.",
        "input": "for i in range(1,11):\n    print(i)",
        "output": "for i in range(1,11):\n    if i % 2 == 0:\n        print(i)",
        "abap": "DATA: lv_index TYPE i.\n\nDO.\n  lv_index = 1.\n  WHILE lv_index <= 10.\n    IF sy-index MOD 2 = 0.\n      WRITE: / lv_index.\n    ENDIF.\n    ADD 1 TO lv_index.\nENDWHILE.\n"
    },
    {
        "instruction": "Write a function in Python to check if two strings are an anagram or not.",
        "input": "",
        "output": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n  \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n  \n    if s1 == s2: \n        return True\n  \n    return False",
        "abap": "FORM is_anagram\n  USING\n    p_str1 TYPE string\n    p_str2 TYPE string\n  RETURNING\n    VALUE(r_result) TYPE abap_bool.\n\n  IF p_str1 CA '0123456789'. \" Check if strings only contain letters and numbers\n    r_result = abap_false.\n    RETURN.\n  ENDIF.\n\n  IF p_str1 = p_str2. \" Direct comparison is faster for small strings\n    r_result = abap_true.\n    RETURN.\n  ENDIF.\n\n  IF p_str1 LENGTH <> p_str2 LENGTH. \" Check if strings have the same length\n    r_result = abap_false.\n    RETURN.\n  ENDIF.\n\n  DATA: lv_s1 TYPE string,\n        lv_s2 TYPE string.\n\n  \" Sort both strings and compare them\n  lv_s1 = to_upper( val = p_str1 ).\n  lv_s2 = to_upper( val = p_str2 ).\n\n  DO.\n    IF lv_s1 CA '<' AND lv_s2 CA '<'.\n      r_result = abap_false.\n      EXIT.\n    ELSEIF lv_s1 CA '>' AND lv_s2 CA '>'.\n      r_result = abap_false.\n      EXIT.\n    ELSE.\n      MOVE-CORRESPONDING lv_s1 TO lv_s1+1.\n      MOVE-CORRESPONDING lv_s2 TO lv_s2+1.\n    ENDIF.\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create a C++ code to find the average of n numbers.",
        "input": "",
        "output": "#include <iostream> \nusing namespace std; \n  \nfloat avg(int n, int arr[]) \n{  \n    float sum, avg; \n  \n    for (int i = 0; i < n; i++) \n    {\n        sum = sum + arr[i]; \n    }\n    avg = sum / n; \n    return avg; \n}",
        "abap": "CLASS lcl_calc_avg DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      avg IMPORTING p_n TYPE i val_tab TYPE ti01[] \" type of table to hold integers\n          RETURNING VALUE(p_result) TYPE f.\nENDCLASS.\n\nCLASS lcl_calc_avg IMPLEMENTATION.\nMETHOD avg.\n  DATA: lt_sum TYPE f,\n        lv_count TYPE i.\n  \n  DO n TIMES.\n    ADD val-tab[ sy-index - 1 ] TO lt_sum.\n  ENDDO.\n  \n  p_result = lt_sum / n.\nENDMETHOD.\n"
    },
    {
        "instruction": "Given a string, write a function to remove all the duplicate characters.",
        "input": "string = \"apple\"",
        "output": "def remove_duplicates(string): \n    new_string = \"\" \n    for char in string:\n        if char not in new_string:\n            new_string += char \n    return new_string",
        "abap": "CLASS lcl_remove_duplicates DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_duplicates\n        IMPORTING\n          iv_input     TYPE string\n        RETURNING\n          VALUE(rv_output) TYPE string.\nENDCLASS.\n\nCLASS lcl_remove_duplicates IMPLEMENTATION.\n  METHOD remove_duplicates.\n    DATA: lv_new_string TYPE string,\n          lv_char       TYPE c.\n    CLEAR lv_new_string.\n    DO.\n      WHILE strlen( iv_input ) > 0.\n        READ REPORT INTO lv_char ENDEXC.\n        IF lv_char NOT IN lv_new_string.\n          CONCATENATE lv_new_string lv_char INTO lv_new_string.\n        ENDIF.\n        iv_input = iv_input+1.\n      ENDDO.\n    rv_output = lv_new_string.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: ls_input TYPE string,\n      ls_output TYPE string.\n\nls_input = 'aabbc'.\n\nls_output = lcl_remove_duplicates=>remove_duplicates( ls_input ).\n\nWRITE: / ls_output.\n"
    },
    {
        "instruction": "Using the given list, create a function in Python that classifies each number as odd or even.",
        "input": "lst = [1, 2, 6, 8, 4]",
        "output": "def classifyList(lst):\n    result = []\n    for num in lst: \n        if num % 2 == 0: \n            result.append('even')\n        else:\n            result.append('odd')\n    return result",
        "abap": "CLASSIFY_LIST_DATA TYPE STANDARD TABLE OF i.\n\nCLASSIFY_LIST_METHODS TYPE STANDARD TABLE OF string.\n\nCLASSIFY_LIST USING\n  VALUE(result) TYPE CLASSIFY_LIST_DATA,\n  VALUE(input_list) TYPE STANDARD TABLE OF i.\n\nLOOP AT input_list INTO DATA(num).\n  IF num MOD 2 = 0.\n    APPEND 'even' TO result.\n  ELSE.\n    APPEND 'odd' TO result.\n  ENDIF.\nENDLOOP.\n\nCLASSIFY_LIST_METHODS = VALUE #( ( result ) ).\n"
    },
    {
        "instruction": "Create an array of length 5 which contains all even numbers between 1 and 10.",
        "input": "",
        "output": "arr = [2, 4, 6, 8, 10]",
        "abap": "DATA: arr TYPE STANDARD TABLE OF i.\narr = VALUE #( ( 2 ) ( 4 ) ( 6 ) ( 8 ) ( 10 ) ).\n"
    },
    {
        "instruction": "Write a JavaScript code to eliminate any symbols from a given string.",
        "input": "",
        "output": "const eliminateSymbols = str => str.replace(/[^\\w\\s]/gi, \"\");",
        "abap": "REPORT ztest.\n\nCLASS lcl_test DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      eliminate_symbols\n        IMPORTING\n          iv_str TYPE string\n        RETURNING\n          VALUE(rv_str) TYPE string.\nENDCLASS.\n\nCLASS lcl_test IMPLEMENTATION.\n  METHOD eliminate_symbols.\n    rv_str = |{ iv_str }|.\n    REPLACE ALL OCCURRENCES OF REGEX '[^\\w\\s]' IN rv_str WITH '' INTO rv_str.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-PROGRAM.\n  DATA: lr_obj TYPE REF TO lcl_test,\n        lv_str TYPE string VALUE 'Hello, World!'.\n\n  CREATE OBJECT lr_obj.\n  WRITE: / lr_obj->eliminate_symbols( lv_str ).\n"
    },
    {
        "instruction": "Write a MongoDB query that returns all the records that have a \u201cname\u201d field set to \u201cJohn\u201d",
        "input": "",
        "output": "db.collection. find({\"name\": \"John\"})",
        "abap": "DATA: ls_document TYPE zdocu,\n       lt_documents TYPE STANDARD TABLE OF zdocu.\n\nSELECT SINGLE *\n  FROM zdocu\n  INTO ls_document\n  WHERE name = 'John'.\n\nIF sy-subrc <> 0.\n  \" No document found, handle accordingly\nENDIF.\n"
    },
    {
        "instruction": "Identify the most efficient data structure to store a list of strings.",
        "input": "",
        "output": "A linked list is the most efficient data structure for storing a list of strings, as it offers constant-time insertions and deletions.",
        "abap": "TYPES: BEGIN OF ty_node,\n  data TYPE string,\n  next TYPE REF TO data_structure_linked_list,\nEND OF ty_node.\n\nDATA: lv_head TYPE REF TO data_structure_linked_list.\n\nCLASS data_structure_linked_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      new RETURN VALUE(data_structure_linked_list) TYPE REF TO data_structure_linked_list,\n      append TYPE REF TO data_structure_linked_list,\n      delete_first TYPE REF TO data_structure_linked_list,\n      print TYPE REF TO data_structure_linked_list.\nENDCLASS.\n\nCLASS data_structure_linked_list IMPLEMENTATION.\n  METHOD new.\n    NEW lcl_node( '' ).\n  ENDMETHOD.\n\n  METHOD append.\n    DATA: lr_current TYPE REF TO data_structure_linked_list,\n          lr_new     TYPE REF TO data_structure_linked_list.\n\n    IF lv_head IS INITIAL.\n      lv_head = new( ).\n    ENDIF.\n\n    lr_current = lv_head.\n    WHILE lr_current->next IS BOUND.\n      lr_current = lr_current->next.\n    ENDWHILE.\n\n    lr_new = NEW lcl_node( p_data ).\n\n    lr_current->next = lr_new.\n\n  ENDMETHOD.\n\n  METHOD delete_first.\n    DATA: lr_current TYPE REF TO data_structure_linked_list,\n          lr_next   TYPE REF TO data_structure_linked_list.\n\n    IF lv_head IS INITIAL.\n      MESSAGE 'List is empty' TYPE 'E'.\n      RETURN.\n    ENDIF.\n\n    lr_current = lv_head.\n    lv_head = lr_current->next.\n  ENDMETHOD.\n\n  METHOD print.\n    DATA: lr_current TYPE REF TO data_structure_linked_list.\n\n    WRITE: / 'Linked List:'.\n    LOOP AT lr_current INTO DATA(lr_node) WHILE lr_node IS BOUND.\n      WRITE: lr_node-data.\n      lr_node = lr_node-next.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_node DEFINITION INHERITING FROM cl_abap_objectdescr.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor IMPORTING data TYPE string,\n  PRIVATE SECTION.\n    DATA: mv_data TYPE string,\n          mv_next TYPE REF TO data_structure_linked_list.\n  ENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD constructor.\n    mv_data = p_data.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lr_string TYPE REF TO data_structure_linked_list.\n\n\" Create a new linked list and append strings\nlr_string = NEW #( ).\nDO 5 TIMES.\n  lr_string->append( 'String' && sy-index ).\nENDDO.\n\n\" Print the linked list\nlr_string->print( ).\n\n\" Delete first string from the linked list\nlr_string->delete_first( ).\n\n\" Print the linked list again to see that the first string is removed\nlr_string->print( ).\n\n\" Append a new string at the end of the linked list\nlr_string->append( 'Another String' ).\n\n\" Print the linked list one last time\nlr_string->print( ).\n"
    },
    {
        "instruction": "Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.",
        "input": "mylist = [1, 2, 3, 4, 5, 6, 7]\ntarget = 4",
        "output": "def linear_search(mylist, target):\n for i in range(len(mylist)):\n if mylist[i] == target:\n return i\n return -1",
        "abap": "REPORT zlinear_search.\n\nPARAMETERS: p_target TYPE i.\n\nDATA: lv_index TYPE i,\n      lt_list  TYPE STANDARD TABLE OF i.\n\n\" Initialize list with some values for example\nlt_list = VALUE #( ( 10 ) ( 20 ) ( 30 ) ( 40 ) ).\n\nDO.\n  IF sy-index > lines( lt_list ).\n    \" Target not found, return -1\n    lv_index = -1.\n    EXIT.\n  ENDIF.\n\n  IF lt_list[ sy-index ] EQ p_target.\n    \" Target found, return index\n    lv_index = sy-index.\n    EXIT.\n  ENDIF.\nENDDO.\n\nWRITE: / lv_index.\n"
    },
    {
        "instruction": "Write a JavaScript code to check if a string is a valid email address.",
        "input": "",
        "output": "function validateEmail(email) \n{\n\tvar re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\treturn re.test(String(email).toLowerCase());\n}",
        "abap": "CLASS lcl_email_validator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      validate_email\n        IMPORTING\n          value(iv_email) TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_email_validator IMPLEMENTATION.\n  METHOD validate_email.\n    DATA: lv_regex TYPE string,\n          lx_match TYPE i.\n\n    lv_regex = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.\n\n    CALL FUNCTION 'RegExp_Match'\n      EXPORTING\n        pattern       = lv_regex\n        text          = iv_email\n      IMPORTING\n        matches_found = lx_match.\n\n    IF lx_match <> sy-fdpos.\n      rv_result = abap_true.\n    ELSE.\n      rv_result = abap_false.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a program that prints the first 10 Fibonacci numbers.",
        "input": "",
        "output": "\"\"\"\nPrint the first ten Fibonacci numbers\n\"\"\"\n\ndef print_first_ten_fibonacci_numbers():\n    \"\"\"Print the first ten Fibonacci numbers.\"\"\"\n\n    n1, n2 = 0, 1\n    num = 0\n    while num < 10:\n        print(n1)\n        nth= n1 + n2\n        n1 = n2\n        n2 = nth\n        num += 1\n        \nif __name__ == '__main__':\n    print_first_ten_fibonacci_numbers()",
        "abap": "REPORT zfibonacci.\n\nDATA: lv_n1 TYPE i VALUE 0,\n      lv_n2 TYPE i VALUE 1,\n      lv_num TYPE i VALUE 0,\n      lv_nth TYPE i.\n\n\" Print the first ten Fibonacci numbers\nDO 10 TIMES.\n    WRITE: / lv_n1.\n    lv_nth = lv_n1 + lv_n2.\n    lv_n1 = lv_n2.\n    lv_n2 = lv_nth.\n    lv_num = lv_num + 1.\nENDDO.\n"
    },
    {
        "instruction": "Write a C# method that takes an array of integers and shuffles it.",
        "input": "array = [1, 2, 3, 4, 5, 6]",
        "output": "public static void shuffle(int[] array) \n{ \n    // Random variable \n    Random rand = new Random(); \n\n    for (int i = 0; i < array.Length; i++) \n    { \n        // Choose a random index \n        int index = rand.Next(i, array.Length); \n\n        // Swap \n        int temp = array[i]; \n        array[i] = array[index]; \n        array[index] = temp; \n    } \n}\n\n// Output\n// [3, 4, 5, 6, 1, 2]",
        "abap": "CLASS lcl_shuffle DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHOD: method shuffle IMPORTING\n      VALUE(ri_array) TYPE int4_t.\nENDCLASS.\n\nCLASS lcl_shuffle IMPLEMENTATION.\n  METHOD shuffle.\n    DATA: lv_random TYPE i,\n          lt_array TYPE int4_t,\n          ls_index TYPE i.\n\n    \" Convert internal table to ABAP array and get the size\n    MOVE-CORRESPONDING ri_array TO lt_array.\n\n    \" Create a random number generator\n    lv_random = cl_abap_random=>create( ).\n\n    DO.\n      \" Generate a random index\n      PERFORM rand_index CHANGING ls_index.\n\n      \" Swap the elements at the current index with the one at the generated index\n      PERFORM swap_elements USING lt_array\n                               ls_index\n                               ri_array.\n\n      \" Decrement the loop counter\n      AT EXIT-POINT.\n        EXIT.\n      ENDDO.\n  ENDMETHOD.\n\n  METHOD perform_rand_index CHANGING cv_random_index TYPE i.\n    DATA: lv_max TYPE i,\n          lv_min TYPE i.\n\n    \" Get the size of the array\n    lv_max = lines( ri_array ).\n\n    \" Generate a random index between 0 and the length of the array - 1\n    cl_abap_random=>create( )->value_range(\n      EXPORTING\n        min     = 0\n        max     = lv_max - 1\n        size    = 1\n      IMPORTING\n        value   = cv_random_index ).\n\n  ENDMETHOD.\n\n  METHOD perform_swap_elements.\n    DATA: ls_element TYPE i,\n          ls_temp TYPE i.\n\n    \" Get the elements at the current index and the generated index\n    MOVE-CORRESPONDING ri_array[ ls_index ] TO ls_element.\n    MOVE-CORRESPONDING ri_array[ cv_random_index ] TO ls_temp.\n\n    \" Swap the elements\n    ri_array[ ls_index ] = ls_temp.\n    ri_array[ cv_random_index ] = ls_element.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Generate pseudocode for a matrix multiplication algorithm.",
        "input": "",
        "output": "\"\"\"\nGenerate pseudocode for a matrix multiplication algorithm.\n\"\"\"\n\n# Create an NxN matrix result, initialized to 0\nresult = zeros(NxN)\n\n# loop through matrix A and B\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            # multiply the elements of A and B\n            result[i][j] += A[i][k] * B[k][j]\n\n# return the result matrix\nreturn result",
        "abap": "\" Create an NxN matrix result, initialized to 0 \"\nDATA: lr_matrix TYPE i2,\n      lt_result LIKE TABLE OF lr_matrix.\n\n\" Allocate memory for the result matrix and initialize it with zeros \"\nCALL FUNCTION 'FILL_MEMORY'\n  EXPORTING\n    I_SIZE             = N\n    I_DATA_TYPE        = 'I'\n    I_CLEAR            = abap_true\n    I_FILL             =\n  CHANGING\n    IT_TABLE           = lt_result.\n\n\" Loop through matrix A and B \"\nLOOP AT ls_matrix INTO DATA(ls_a) FROM 1 TO n.\n  LOOP AT lr_matrix INTO DATA(lr_b) FROM 1 TO n.\n    \" Multiply the elements of A and B \"\n    DATA(lv_sum) = ls_a-column_index * lr_b-row_index.\n    ADD lv_sum TO lt_result-row_index - column_index + (n-1).\n  ENDLOOP.\nENDLOOP.\n\n\" Return the result matrix \"\nDATA: lo_matrix TYPE REF TO cl_sapui5_int_matrix.\nCREATE OBJECT lo_matrix.\nlo_matrix->set_row_count( n ).\nlo_matrix->set_col_count( n ).\nloop at lt_result into data(lv_value) from 1 to n.\n  lo_matrix->set_cell_value( row_index - column_index + (n-1), lv_value ).\nendloop.\nRETURN lo_matrix.\n"
    },
    {
        "instruction": "Classify the following transaction as valid or invalid using Python.",
        "input": "Transaction ID: 101\nTransaction Amount: -200",
        "output": "\"invalid\"",
        "abap": "An invalid statement!\n\nCan you give me more context or the specific line of code that's causing the issue? I'll do my best to help you out.\n\nWhat programming language is it in, and what does the \"invalid\" statement look like?"
    },
    {
        "instruction": "Construct a query in PostgreSQL to delete all the rows from a table.",
        "input": "",
        "output": "DELETE FROM table_name;",
        "abap": "Here is the equivalent ABAP statement:\n\n`DELETE table_name.`"
    },
    {
        "instruction": "Create a program that can calculate the distance between two points in three-dimensional space.",
        "input": "point1 = (1, 5, 9)\npoint2 = (4, 2, 8)",
        "output": "def dist_points_3d(point1, point2):\n    \"\"\"Calculate the distance between two points in three-dimensional space.\"\"\"\n    distance = ((point1[0] - point2[0]) ** 2 + \n                (point1[1] - point2[1]) ** 2 + \n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance",
        "abap": "CLASS lcl_distance_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_distance\n        IMPORTING\n          VALUE(iv_point1_x) TYPE i \" x-coordinate of point 1\n          VALUE(iv_point1_y) TYPE i \" y-coordinate of point 1\n          VALUE(iv_point1_z) TYPE i \" z-coordinate of point 1\n          VALUE(iv_point2_x) TYPE i \" x-coordinate of point 2\n          VALUE(iv_point2_y) TYPE i \" y-coordinate of point 2\n          VALUE(iv_point2_z) TYPE i \" z-coordinate of point 2\n        RETURNING\n          VALUE(rv_distance) TYPE f. \" distance between the two points\n\nENDCLASS.\n\nCLASS lcl_distance_calculator IMPLEMENTATION.\n  METHOD calculate_distance.\n    DATA: lv_squared_distance TYPE f,\n          lv_distance TYPE f.\n\n    lv_squared_distance = ( iv_point1_x - iv_point2_x ) ** 2 + \n                          ( iv_point1_y - iv_point2_y ) ** 2 + \n                          ( iv_point1_z - iv_point2_z ) ** 2.\n    lv_distance = sqrt( lv_squared_distance ).\n\n    rv_distance = lv_distance.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a class in Python to represent a Person.",
        "input": "",
        "output": "class Person:\n    # Constructor \n    def __init__(self, name, age): \n         \n        # instance attributes \n        self.name = name \n        self.age = age \n  \n    # instance method \n    def greeting(self): \n        print(\"My name is\", self.name) \n  \n# construct an object \nperson1 = Person(\"John\", 36) \n  \n# call a method of the object \nperson1.greeting()",
        "abap": "CLASS lcl_person DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_osinterface.\n    METHODS:\n      constructor\n        IMPORTING\n          iv_name TYPE string\n          iv_age   TYPE i\n      greeting REDEFINABLE raising cx_static_check.\nENDCLASS.\n\nCLASS lcl_person IMPLEMENTATION.\n  METHOD constructor.\n    me->name = iv_name.\n    me->age = iv_age.\n  ENDMETHOD.\n\n  METHOD greeting.\n    WRITE: / 'My name is', me->name.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: person1 TYPE REF TO lcl_person.\n\nCREATE OBJECT person1\n  EXPORTING\n    name     = 'John'\n    age      = 36.\n\nCALL METHOD person1->greeting( ).\n"
    },
    {
        "instruction": "Edit the given HTML so that it renders as a centered, level-two heading.",
        "input": "<h1>Heading Text</h1>",
        "output": "<h2 style=\"text-align: center;\">Heading Text</h2>",
        "abap": "The equivalent in ABAP would be:\n\n`WRITE: / '<H2>'.\n  WRITE: / 'Heading Text'.\n  SKIP.`\nor\n`SET PARAMETER ID 'STYLE'. SET STYLE 'H1'.\n  WRITE: / 'Heading Text.\n  SKIP.`"
    },
    {
        "instruction": "Convert the given string to uppercase.",
        "input": "Hello World",
        "output": "HELLO WORLD",
        "abap": "REPORT zhello_world.\n\nSTART-OF-SECTION.\n  WRITE: / 'Hello, World!'.\nSTOP-OF-SECTION.\n"
    },
    {
        "instruction": "Generate a random 5-character string using the letters a-z.",
        "input": "",
        "output": "import random\n\ncharacters = \"abcdefghijklmnopqrstuvwxyz\"\n\nrandom_string = \"\"\nfor i in range(5):\n    random_string += random.choice(characters)\n\nprint(random_string)",
        "abap": "REPORT z_random_string.\n\nTYPES: BEGIN OF ty_random_char,\n         character TYPE c LENGTH 1,\n       END OF ty_random_char.\n\nDATA: lv_characters TYPE string VALUE 'abcdefghijklmnopqrstuvwxyz',\n      lt_random_chars TYPE STANDARD TABLE OF ty_random_char,\n      lv_random_string TYPE string.\n\nLOOP AT i FROM 0 TO 4.\n  APPEND VALUE #( character = |{ sy-datum(2) }| ) TO lt_random_chars.\nENDLOOP.\n\nlv_random_string = |{ cl_abap_char_utilities=>newline }|.\nLOOP AT lt_random_chars INTO DATA(ls_random_char).\n  lv_random_string = |{ lv_random_string }{ ls_random_char-character }|.\nENDLOOP.\n\nWRITE: / lv_random_string.\n"
    },
    {
        "instruction": "Describe how to debug a C++ program using GDB.",
        "input": "",
        "output": "Debugging a C++ program using GDB involves running the program with the \u2018gdb\u2019 command and then setting breakpoints and examining variables. This can be done by typing in \u2018break\u2019 followed by the line number, or \u2018b\u2019 followed by the function name, where the program should halt. Once the program is halted, variables and registers can be inspected to determine what is causing the program to fail. Finally, the \u2018continue\u2019 or \u2018c\u2019 command can be used to resume normal execution.",
        "abap": "#include <iostream>\n\nvoid function_to_break_at() {\n    int x = 5;\n    std::cout << \"Function executed.\" << std::endl;\n}\n\nint main() {\n    function_to_break_at();\n    return 0;\n}\n"
    },
    {
        "instruction": "Modify the following for loop to loop backwards.",
        "input": "for(var i=0; i<nums.length; i++){\n   console.log(nums[i]);\n}",
        "output": "for(var i=nums.length-1; i>=0; i--){\n   console.log(nums[i]);\n}",
        "abap": "DATA: lv_index TYPE i,\n      lt_nums  TYPE STANDARD TABLE OF i.\n\n\" Initialize the table with some values (assuming nums is already declared)\nDO.\n  ADD 1 TO lv_index.\n  IF lv_index > SIZE( nums ).\n    EXIT.\n  ENDIF.\n  WRITE: / nums[ lv_index ].\nENDDO.\n"
    },
    {
        "instruction": "Write a SQL query to retrieve all the rows from a table called \"customers\".",
        "input": "",
        "output": "SELECT * FROM customers;",
        "abap": "DATA: lt_customers TYPE STANDARD TABLE OF ty_customer.\n\nSELECT *\n  INTO CORRESPONDING FIELDS OF TABLE lt_customers\n  FROM customers.\n"
    },
    {
        "instruction": "Describe the steps for implementing a convolutional neural network.",
        "input": "",
        "output": "The steps for implementing a convolutional neural network involve selecting the network architecture, preparing the dataset, defining the features, creating the layers and connections, training the network using an optimizer, and evaluating the model\u2019s performance.",
        "abap": "CLASS lcl_convolutional_neural_network DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      \"Selecting the network architecture\"\n      select_network_architecture IMPORTING iv_number_of_layers TYPE i\n                                      RETURNING VALUE(ro_network) TYPE REF TO lcl_network.\n\n      \"Preparing the dataset\"\n      prepare_dataset IMPORTING it_data TYPE ti_t_data\n                       RETURNING VALUE(ro_dataset) TYPE REF TO lcl_dataset.\n\n      \"Defining the features\"\n      define_features IMPORTING iv_number_of_features TYPE i\n                      RETURNING VALUE(ro_features) TYPE REF TO lco_feature_set.\n\n      \"Creating the layers and connections\"\n      create_layers_and_connections IMPORTING io_network TYPE REF TO lcl_network\n                                    ii_features TYPE REF TO lco_feature_set\n                                    io_dataset TYPE REF TO lcl_dataset\n                                    iv_number_of_neurons_per_layer TYPE i\n                                    RETURNING VALUE(ro_model) TYPE REF TO lcl_model.\n\n      \"Training the network using an optimizer\"\n      train_network IMPORTING io_model TYPE REF TO lcl_model\n                    iv_learning_rate TYPE f\n                    iv_number_of_epochs TYPE i\n                    ii_optimizer TYPE REF TO lco_optimizer\n                    RETURNING VALUE(ro_trained_model) TYPE REF TO lcl_model.\n\n      \"Evaluating the model's performance\"\n      evaluate_model IMPORTING io_model TYPE REF TO lcl_model\n                     io_dataset TYPE REF TO lcl_dataset\n                     RETURNING VALUE(rv_performance_metric) TYPE f.\nENDCLASS.\n\nCLASS lcl_network DEFINITION.\n  PUBLIC SECTION.\n    DATA:\n      mv_number_of_layers TYPE i,\n      mv_features TYPE lco_feature_set,\n      mv_dataset TYPE lcl_dataset,\n      mt_layers TYPE ti_t_layer.\n\n    METHODS:\n      constructor IMPORTING iv_number_of_layers TYPE i,\n      add_layer IMPORTING iv_type TYPE string,\n      train IMPORTING io_optimizer TYPE REF TO lco_optimizer,\n      evaluate_importing io_dataset TYPE REF TO lcl_dataset\n                         RETURNING VALUE(rv_performance_metric) TYPE f.\nENDCLASS.\n\nCLASS lcl_model DEFINITION.\n  PUBLIC SECTION.\n    DATA:\n      mv_model TYPE lcl_network,\n      mt_layers TYPE ti_t_layer.\n\n    METHODS:\n      constructor IMPORTING io_network TYPE REF TO lcl_network,\n      add_layer IMPORTING iv_type TYPE string,\n      train IMPORTING io_optimizer TYPE REF TO lco_optimizer\n                         ii_dataset TYPE REF TO lcl_dataset\n                         iv_learning_rate TYPE f\n                         iv_number_of_epochs TYPE i,\n      evaluate_importing io_dataset TYPE REF TO lcl_dataset\n                         RETURNING VALUE(rv_performance_metric) TYPE f.\nENDCLASS.\n\nCLASS lcl_dataset DEFINITION.\n  PUBLIC SECTION.\n    DATA:\n      mv_data TYPE ti_t_data.\n\n    METHODS:\n      constructor IMPORTING it_data TYPE ti_t_data,\n      add_data IMPORTING iv_value TYPE string.\nENDCLASS.\n\nCLASS lco_feature_set DEFINITION.\n  PUBLIC SECTION.\n    DATA:\n      mv_features TYPE ti_t_text.\n\n    METHODS:\n      add_feature IMPORTING iv_name TYPE string\n                  iv_value TYPE i,\n      get_feature_count IMPORTING RETURNING VALUE(rv_feature_count) TYPE i.\nENDCLASS.\n\nCLASS lco_optimizer DEFINITION.\n  PUBLIC SECTION.\n    DATA:\n      mv_learning_rate TYPE f.\n\n    METHODS:\n      constructor IMPORTING iv_learning_rate TYPE f,\n      update_model IMPORTING io_model TYPE REF TO lcl_model\n                     ii_dataset TYPE REF TO lcl_dataset\n                     iv_number_of_epochs TYPE i.\nENDCLASS.\n"
    },
    {
        "instruction": "Reorder a given array in specialized order",
        "input": "",
        "output": "def reorder_array(arr):\n    \"\"\"\n    Reorder a given array in specialized order\n    :param arr: the input array to reorder\n    :return: the reordered array\n    \"\"\"\n    # determine the size of the array\n    n = len(arr)\n    \n    # create a new array to store the reordered results\n    reordered = [0] * n\n    \n    # loop through the array \n    for i in range(n):\n        # calculate the position of the current element\n        pos = 2 * (arr[i] % (1 + n // 2))\n        # find the first vacant position in the new array\n        while reordered[pos] != 0:\n            pos += 1\n        # assign the current element to the vacant position\n        reordered[pos] = arr[i]\n    \n    return reordered",
        "abap": "CLASS lcl_reorder_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reorder_array\n        IMPORTING\n          iv_arr TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_reordered) TYPE STANDARD TABLE OF i\n        RAISING\n          cx_static_check.\n\nENDCLASS.\n\nCLASS lcl_reorder_array IMPLEMENTATION.\n  METHOD reorder_array.\n    DATA: lv_n TYPE i,\n          lt_reordered TYPE STANDARD TABLE OF i.\n\n    \" determine the size of the array\n    MOVE-LINES lv_n = lines( iv_arr ).\n\n    \" create a new internal table to store the reordered results\n    FIELD-SYMBOLS:\n      <ls_reordered> LIKE LINE OF lt_reordered.\n\n    \" loop through the array \n    LOOP AT iv_arr INTO DATA(ls_current).\n      \" calculate the position of the current element\n      DATA: lv_pos TYPE i.\n      lv_pos = 2 * ( ls_current MOD ( 1 + ( lv_n / 2 ) ) ).\n\n      \" find the first vacant position in the new internal table\n      LOOP AT lt_reordered ASSIGNING <ls_reordered> FROM lv_pos MOD lv_n TIMES.\n        IF <ls_reordered> IS INITIAL.\n          EXIT.\n        ENDIF.\n      ENDLOOP.\n\n      \" assign the current element to the vacant position\n      INSERT ls_current INTO TABLE lt_reordered INDEX lv_pos.\n\n    ENDLOOP.\n\n    rv_reordered = lt_reordered.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python function to check if a given string is an anagram of another or not.",
        "input": "word1 = \"cat\"\nword2 = \"tac\"",
        "output": "def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)",
        "abap": "CLASS lcl_anagram DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_anagram IMPORTING\n        iv_word1 TYPE string\n        iv_word2 TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_anagram IMPLEMENTATION.\n  METHOD is_anagram.\n    DATA: lv_sorted_word1 TYPE string,\n          lv_sorted_word2 TYPE string.\n\n    \" Sort both words and compare them\n    SORT iv_word1 INTO lv_sorted_word1.\n    SORT iv_word2 INTO lv_sorted_word2.\n    rv_result = lv_sorted_word1 CA bol lv_sorted_word2.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Construct a for loop to show the multiplication table of 3.",
        "input": "",
        "output": "for(i=1;i<=10;i++) {\n  console.log(3 + \" x \" + i + \" = \" + (3 * i));\n}",
        "abap": "DO.\n  lv_counter = 1.\n  WHILE lv_counter LE 10.\n    WRITE: / | { lv_counter } x = { 3 * lv_counter } |.\n    ADD 1 TO lv_counter.\nENDWHILE.\n"
    },
    {
        "instruction": "Write code to find the most frequent item in an array",
        "input": "arr = [1, 4, 6, 8, 9, 1, 4, 6]",
        "output": "def most_frequent_item(arr):\n    \"\"\"\n    Finds the most frequent item in an array.\n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n\n    max_count = 0\n    max_item = 0\n\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item",
        "abap": "REPORT zmost_frequent_item.\n\nCLASS lcl_most_frequent_item DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      most_frequent_item IMPORTING\n        VALUE( it_arr   TYPE STANDARD TABLE OF i )\n      RETURNING\n        VALUE( ro_result ) TYPE i.\nENDCLASS.\n\nCLASS lcl_most_frequent_item IMPLEMENTATION.\n  METHOD most_frequent_item.\n    DATA: lt_dict TYPE STANDARD TABLE OF ty_item,\n          lv_max_count TYPE i,\n          lv_max_item TYPE i.\n\n    \" Create a dictionary from the input array\n    LOOP AT it_arr INTO DATA(lv_item).\n      READ TABLE lt_dict WITH KEY item = lv_item ASSIGNING FIELD-SYMBOL(<ls_item>).\n      IF sy-subrc <> 0.\n        APPEND VALUE #( item = lv_item count = 1 ) TO lt_dict.\n      ELSE.\n        <ls_item>-count = <ls_item>-count + 1.\n      ENDIF.\n    ENDLOOP.\n\n    \" Find the most frequent item\n    SORT lt_dict BY count DESCENDING.\n    LOOP AT lt_dict INTO DATA(ls_item).\n      IF ls_item-count > lv_max_count.\n        lv_max_count = ls_item-count.\n        ro_result = ls_item-item.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n\nCLASS lcl_most_frequent_item DEFINITION INHERITING FROM cl_alv_table_download DEFINITION.\nENDCLASS.\n\nCLASS lcl_most_frequent_item IMPLEMENTATION INHERITING FROM cl_alv_table_download IMPLEMENTATION.\nENDCLASS.\n\nDATA: lt_arr TYPE STANDARD TABLE OF i,\n      ro_result TYPE i.\n\nlt_arr = VALUE #( 1 2 2 3 3 3 4 4 4 4 ).\n\nro_result = lcl_most_frequent_item=>most_frequent_item( it_arr = lt_arr ).\nWRITE: / 'The most frequent item is:', ro_result.\n"
    },
    {
        "instruction": "Calculate the square root of the given number.",
        "input": "25",
        "output": "sqrt(25) = 5",
        "abap": "DATA: lv_result TYPE f.\n\nlv_result = sqrt( 25 ).\nWRITE: / lv_result.\n"
    },
    {
        "instruction": "Remove the boilerplate code from the program for printing 10 random numbers.",
        "input": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    # TODO",
        "output": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    print(random.randrange(1, 101))",
        "abap": "DATA: lv_random_num TYPE i.\n\nDO 10 TIMES.\n  lv_random_num = |{ sy-datum }|.\n  WRITE: lv_random_num.\nENDDO.\n"
    },
    {
        "instruction": "Create a tree data structure for the following information:",
        "input": "a) Naruto\nb) Sasuke\nc) Boruto\nd) Sarada",
        "output": "Naruto\n    /    \\\n  Sasuke  Boruto\n            \\\n             Sarada",
        "abap": "DATA: naruto TYPE string VALUE 'Naruto'.\n\nDATA: sasuke TYPE string VALUE 'Sasuke'.\nDATA: boruto TYPE string VALUE 'Boruto'.\nDATA: sarada TYPE string VALUE 'Sarada'.\n\nPARAMETERS: p_tree TYPE string.\n\ncl_abap_char_utilities=>crLf( CHANGING cv_string = p_tree ).\n\np_tree = naruto. \" Root node\n\nINSERT p_tree INTO p_tree SEPARATED BY '-'.\nINSERT boruto INTO p_tree SEPARATED BY '-'.\nINSERT sarada INTO p_tree SEPARATED BY '-'.\n\nINSERT sasuke INTO p_tree SEPARATED BY '- '.\n\n\nWRITE: / p_tree.\n"
    },
    {
        "instruction": "Rewrite the following Python code using a for-loop.",
        "input": "i = 0\nwhile i <= 10:\n    print(i)\n    i += 1",
        "output": "for i in range(11):\n    print(i)",
        "abap": "DATA: lv_index TYPE i.\n\nDO 10 TIMES.\n  WRITE: / lv_index.\n  ADD 1 TO lv_index.\nENDDO.\n"
    },
    {
        "instruction": "Create a function in Java that takes a string and prints the reversed version.",
        "input": "",
        "output": "public static void reverseString(String str) { \n    StringBuilder sb = new StringBuilder(); \n  \n    for (int i = str.length() - 1; i >= 0; i--) { \n        sb.append(str.charAt(i)); \n    } \n  \n    System.out.print(sb.toString()); \n}",
        "abap": "REPORT zreverse_string.\n\nCLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          value(iv_str) TYPE string\n        EXPORTING\n          ev_reversed TYPE string .\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_sb TYPE string. \" equivalent to StringBuilder\n\n    DO strlen( iv_str ) TIMES.\n      lv_sb = iv_str+strlen( iv_str ) - sy-index sy-index + 1 TO strlen( iv_str ).\n      APPEND lv_sb TO lv_sb.\n    ENDDO.\n\n    ev_reversed = lv_sb.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  PERFORM reverse_string USING 'Hello World' CHANGING DATA(lv_output) TYPE string.\n  WRITE: / lv_output.\n"
    },
    {
        "instruction": "Write an R function to calculate the mean of a numerical vector.",
        "input": "",
        "output": "calc_mean <- function(x) {\n    mean(x)\n}",
        "abap": "CLASS lcl_calculate_mean DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_mean\n        IMPORTING\n          value TYPE f VALUE(0), \" Input array\n        EXPORTING\n          result  TYPE f. \" Mean of input array\nENDCLASS.\n\nCLASS lcl_calculate_mean IMPLEMENTATION.\n  METHOD calculate_mean.\n    DATA: lv_sum TYPE f, lv_count TYPE i.\n\n    lv_sum = 0.\n    DO.\n      IF value IS INITIAL OR lv_count >= lines( value ).\n        EXIT.\n      ENDIF.\n      ADD value+lv_count TO lv_sum.\n      lv_count = lv_count + 1.\n    ENDDO.\n\n    result = lv_sum / lv_count.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Given a list of numbers, write a function to find the largest value in the list.",
        "input": "lst = [1, 5, 9, 12, 8]",
        "output": "def get_largest_value(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\n\nprint(get_largest_value(lst))",
        "abap": "CLASS z_largest_value DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_largest_value IMPORTING value_tab TYPE STANDARD TABLE OF i\n                         RETURNING VALUE(largest) TYPE i.\nENDCLASS.\n\nCLASS z_largest_value IMPLEMENTATION.\n  METHOD get_largest_value.\n    DATA: max_value TYPE f VALUE '0'.\n\n    \" Check if the table is not empty to avoid an internal table exception\n    IF value_tab IS NOT INITIAL.\n\n      \" Get the first element as a starting point for the maximum value\n      max_value = value_tab[ 1 ].\n\n      LOOP AT value_tab INTO DATA(num).\n        IF num > max_value.\n          max_value = num.\n        ENDIF.\n      ENDLOOP.\n\n      largest = max_value.\n\n    ELSE.\n      MESSAGE 'Input table is empty' TYPE 'E'.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "In a given string, create a function that returns the longest consecutive sequence of characters.",
        "input": "my_string = \u201cabccdeefghj\"",
        "output": "def longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            continue\n        else:\n            character_list.append(char)\n            current_length = 1\n            for i in range(1, len(string)):\n                if string[i-1] == char and string[i] == char:\n                    current_length += 1\n            if current_length>max_length:\n                max_length = current_length\n                max_sequence = char*max_length\n    return max_sequence",
        "abap": "FORM longest_consecutive USING\n  string TYPE string\nRETURNING\n  value(result) TYPE string.\n\nDATA: lt_chars TYPE STANDARD TABLE OF string,\n      lv_max_length TYPE i,\n      lv_max_sequence TYPE string.\n\nSORT string IN NATURAL ORDER.\n\nlt_chars = VALUE #( FOR char_in_string IN string ( char_in_string ) ).\n\nLOOP AT lt_chars INTO DATA(char) USING KEY key.\n  IF sy-tabix = 1 OR char <> lt_chars[sy-tabix - 1].\n    ADD 1 TO lv_max_length.\n    APPEND char || REPEAT val = lv_max_length - 1 TIMES txt = char TO lv_max_sequence.\n    EXIT.\n  ENDIF.\n\n  IF lv_max_length > sy-tabix - 1.\n    result = lv_max_sequence.\n  ELSE.\n    CLEAR: lv_max_length, lv_max_sequence.\n  ENDIF.\nENDLOOP.\n\nresult = lv_max_sequence.\n"
    },
    {
        "instruction": "Modify the code to perform the mathematical expression \u201cx to the power of y\u201d.",
        "input": "# Calculate x to the power of y\n# TODO",
        "output": "# Calculate x to the power of y\nx_pow_y = x**y",
        "abap": "DATA: lv_x TYPE i,\n       lv_y TYPE i,\n       lv_result TYPE f.\n\nlv_x = ... 'input value for x' .. '. \" Assign a value to x.\nlv_y = ... 'input value for y' .. '. \" Assign a value to y\n\nlv_result = power( val = lv_x exponent = lv_y ).\n\nWRITE: / lv_result. \" Output the result\n"
    },
    {
        "instruction": "Create a python class called \"Employee\" that contains 3 instance variables.",
        "input": "",
        "output": "class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary",
        "abap": "TYPES: BEGIN OF ty_employee,\n         name TYPE string,\n         age  TYPE i,\n         salary TYPE f,\n       END OF ty_employee.\n\nDATA: ls_employee TYPE ty_employee.\n\nCLASS lcl_employee DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create\n        IMPORTING\n          iv_name   TYPE string\n          iv_age    TYPE i\n          iv_salary TYPE p DECIMALS 2\n        EXPORTING\n          eo_employee REFERENCE TO data(ls_employee) .\nENDCLASS.\n\nCLASS lcl_employee IMPLEMENTATION.\n  METHOD create.\n    ls_employee-name = iv_name.\n    ls_employee-age  = iv_age.\n    ls_employee-salary = iv_salary.\n    eo_employee = ls_employee.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a basic neural network model to distinguish between cats and dogs.",
        "input": "",
        "output": "Model Building Code:\nmodel = Sequential([\n    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    MaxPooling2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])",
        "abap": "CLASS lcl_model DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ooad_globalcontext.\n    METHODS:\n      create_model IMPORTING value( im_input_shape ) TYPE string\n                                 iv_num_filters TYPE i\n                                 iv_pool_size TYPE i\n                                 iv_dense_neurons TYPE i\n                                 iv_output_neuron TYPE i\n                               CHANGING cv_model TYPE string.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_model IMPLEMENTATION.\n  METHOD create_model.\n    \" Convolutional Neural Network Layers\n    DATA: lr_convolutional_layer TYPE cl_cnn_image_process=>sc_convolutional_layer,\n          lv_filter_size TYPE i,\n          lv_pool_size TYPE i,\n          lv_num_filters TYPE i,\n          lv_neuron TYPE i.\n\n    lv_num_filters = iv_num_filters.\n    lv_pool_size   = iv_pool_size.\n    lv_neuron     = iv_dense_neurons.\n\n    DO.\n      lr_convolutional_layer = NEW #( FILTER_SIZE = CONV( iv_filter_size = lv_filter_size  ) \n                                      NUMBER_OF_FILTERS = lv_num_filters \n                                      ACTIVATION_FUNCTION_NAME = 'RELU' ).\n\n      cv_model = |{ cv_model }Conv2D({ lv_num_filters }, (3,3), activation='relu', input_shape=({ im_input_shape }))|.\n      DO.\n        lr_convolutional_layer = NEW #( FILTER_SIZE = CONV( iv_filter_size = lv_pool_size ) \n                                        NUMBER_OF_FILTERS = lv_num_filters ).\n        cv_model = |{ cv_model }MaxPooling2D({ lv_pool_size }, { lv_pool_size })|.\n      ENDDO.\n\n    ENDDO.\n  ENDMETHOD.\n\nCLASS lcl_dense_layer DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ooad_globalcontext.\n    METHODS:\n      create_layer IMPORTING value( im_input_shape ) TYPE string\n                              iv_num_neurons TYPE i\n                            CHANGING cv_layer TYPE string.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_dense_layer IMPLEMENTATION.\n  METHOD create_layer.\n    \" Dense Layer\n    DATA: lr_dense_layer TYPE cl_cnn_image_process=>sc_dense_layer,\n          lv_neuron TYPE i.\n\n    lv_neuron = iv_num_neurons.\n    DO.\n      lr_dense_layer = NEW #( NUMBER_OF_NEURONS = lv_neuron \n                              ACTIVATION_FUNCTION_NAME = 'RELU' ).\n\n      cv_layer = |{ cv_layer }Dense({ lv_neuron }, activation='relu')|.\n      lv_neuron += lv_neuron.\n    ENDDO.\n  ENDMETHOD.\n\nCLASS lcl_cnn_model DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_ooad_globalcontext.\n    METHODS:\n      create_model IMPORTING value( im_input_shape ) TYPE string\n                             iv_num_filters TYPE i\n                             iv_pool_size TYPE i\n                             iv_dense_neurons TYPE i\n                             iv_output_neuron TYPE i\n                           CHANGING cv_model TYPE string.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_cnn_model IMPLEMENTATION.\n  METHOD create_model.\n    DATA: lr_model        TYPE REF TO cl_cnn_image_process,\n          lr_convolutional_layer TYPE REF TO cl_cnn_image_process=>sc_convolutional_layer,\n          lv_filter_size TYPE i,\n          lv_pool_size TYPE i,\n          lv_num_filters TYPE i.\n\n    \" Define model structure\n    cv_model = |Model =\n\n      Conv2D({ lv_num_filters }, (3,3), activation='relu', input_shape=({ im_input_shape }))\n\n      MaxPooling2D({ lv_pool_size }, { lv_pool_size })\n      \n      Dense({ iv_dense_neurons }, activation='relu')\n      \n      Dense(1, activation='sigmoid')\n\n    |.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Design a function to remove duplicates from an array",
        "input": "",
        "output": "def remove_duplicates(arr):\n    # Stores the unique elements\n    unique = []\n\n    # Iterate through the array\n    for elem in arr:\n        # If the element is not already in the unique list\n        if elem not in unique:\n            # Add it to the unique list\n            unique.append(elem)\n\n    # Return the array without duplicates\n    return unique",
        "abap": "CLASS lcl_remove_duplicates DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_duplicates\n        IMPORTING\n          !arr TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_result) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_remove_duplicates IMPLEMENTATION.\n  METHOD remove_duplicates.\n    DATA: lt_unique TYPE TABLE OF i.\n\n    LOOP AT arr INTO DATA(ls_elem).\n      IF ls_elem NOT IN SICHLE( val = lt_unique ).\n        APPEND ls_elem TO lt_unique.\n      ENDIF.\n    ENDLOOP.\n\n    rv_result = lt_unique.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a HTML page with a heading 2 of \"Operating System\".",
        "input": "",
        "output": "<html>\n<head>\n    <title>Operating System</title>\n</head>\n<body>\n    <h2>Operating System</h2>\n\n</body>\n</html>",
        "abap": "REPORT zoperatingsystem.\n\nCLASS lcl_operatingsystem DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      display_os\n        IMPORTING\n          VALUE(iv_text) TYPE string\n        EXPORTING\n          VALUE(ev_result) TYPE string .\nENDCLASS.\n\nCLASS lcl_operating_system IMPLEMENTATION.\n  METHOD display_os.\n    ev_result = iv_text.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_result TYPE string.\n  lv_result = 'Welcome to the Operating System'.\n  CALL METHOD cl_abap_behavior_descr=>display\n    EXPORTING\n      iv_text     = lv_result\n    IMPORTING\n      ev_result   = DATA(lv_result).\n  WRITE: / lv_result.\n\nCLASS zoperatingsystem DEFINITION DEFERRED.\n"
    },
    {
        "instruction": "Create a Python program to find the maximum value in the given array.",
        "input": "[2, 4, 5, 7, 8]",
        "output": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)",
        "abap": "REPORT zmax_value.\n\nDATA: lt_numbers TYPE STANDARD TABLE OF i,\n      lv_max    TYPE i.\n\n\" Assign initial values to the array and variable\nlt_numbers = VALUE #( ( 2 ) ( 4 ) ( 5 ) ( 7 ) ( 8 ) ).\nlv_max = lt_numbers[ 1 ].\n\n\" Loop through the table to find the maximum value\nDO.\n  IF lv_max > lt_numbers[ sy-index - 1 ].\n    CONTINUE.\n  ELSEIF lv_max < lt_numbers[ sy-index - 1 ].\n    lv_max = lt_numbers[ sy-index - 1 ].\n  ENDIF.\n  \" No need to continue as we have found the max value\n  EXIT.\nENDDO.\n\n\" Output the result\nWRITE: / lv_max.\n"
    },
    {
        "instruction": "Change the variable names in the following Python code.",
        "input": "x1 = 10\ny1 = 20",
        "output": "a = 10\nb = 20",
        "abap": "DATA: l_a TYPE i VALUE 10,\n      l_b TYPE i VALUE 20.\n"
    },
    {
        "instruction": "Design a program to flatten a given list.",
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "def flatten_list(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    return res",
        "abap": "REPORT zflattend_list.\n\nCLASS zcl_flatten_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: flatten_list\n      IMPORTING\n        !iv_lst TYPE ty_lst\n      RETURNING\n        VALUE(rv_result) TYPE ty_result\n      RAISING\n        cx_sy_itab_init_error.\nENDCLASS.\n\nCLASS zcl_flatten_list IMPLEMENTATION.\n  METHOD flatten_list.\n    DATA: lt_result TYPE TABLE OF i.\n\n    LOOP AT iv_lst INTO DATA(ls_inner_tab).\n      LOOP AT ls_inner_tab INTO DATA(ls_element).\n        APPEND ls_element TO lt_result.\n      ENDLOOP.\n    ENDLOOP.\n\n    rv_result = lt_result.\n  ENDMETHOD.\n\nTYPES: BEGIN OF ty_lst,\n         inner_table TYPE TABLE OF i\n       END OF ty_lst.\n\nDATA: BEGIN OF ty_result.\n         component TYPE i\n       END OF ty_result.\n\nCLASS data: go_cls TYPE REF TO zcl_flatten_list.\n\nSTART-OF-SELECTION.\n  DATA: lt_inner_table TYPE ty_lst VALUE (\n    ( inner_table = value #( ( 1, 2 ), ( 3, 4 ) ) )\n  ).\n\n  CREATE OBJECT go_cls.\n  rv_result = go_cls->flatten_list( iv_lst = lt_inner_table ).\n  WRITE: / lv_result.\n"
    },
    {
        "instruction": "Create a parameterized SQL query to get all records from a table where the given field has a value greater than the given input.",
        "input": "Fields: age\nInput: 20",
        "output": "SELECT * FROM table_name WHERE age > 20;",
        "abap": "DATA: lv_age TYPE i.\n\nLOOP AT itab ASSIGNING <fs_table>.\n  IF <fs_table>-age > 20.\n    WRITE:/ <fs_table>-field1, <fs_table>-field2. \" print fields you are interested in\n  ENDIF.\nENDLOOP.\n"
    },
    {
        "instruction": "Generate a random string of length 8 that only contains alphabets.",
        "input": "",
        "output": "// Initialize an array containing all the letters of the alphabet\nString[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \n                     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n \nString randomString = \"\";\nRandom random = new Random();\n \nfor (int i=0; i<8; i++) {\n    int index = random.nextInt(alphabet.length);\n    randomString += alphabet[index];\n}\nSystem.out.println(randomString); // Prints a random 8-character string consisting of alphabets",
        "abap": "TYPES: ty_alphabet TYPE STANDARD TABLE OF string.\n\nDATA: ls_alphabet TYPE ty_alphabet,\n      lv_random_string TYPE string.\n\n\" Initialize an internal table containing all the letters of the alphabet\nls_alphabet = VALUE #( FOR i IN 0 .. 'z' DO i ).\n\nCREATE OBJECT lo_random USING cl_abap_random=>create( ).\n\nLOOP AT i FROM 1 LE 8 INTO DATA(lv_i).\n  \" Generate a random index within the bounds of the alphabet table\n  DATA(lv_index) = lo_random->value( lv_alphabet[ sy-index - 1 ] ).\n\n  \" Concatenate the random character to the result string\n  CONCATENATE lv_random_string ls_alphabet[ lv_index + 1 ] INTO lv_random_string.\n\nENDLOOP.\n\n\" Display the random string\nWRITE: / lv_random_string.\n"
    },
    {
        "instruction": "Compute the result of the following mathematical expression in Python.",
        "input": "(4 + 5 * 7 - 9) / 2",
        "output": "result = 17",
        "abap": "DATA: result TYPE i VALUE 17."
    },
    {
        "instruction": "Write a SQL query to add a new column \"age\" in the employees table.",
        "input": "",
        "output": "ALTER TABLE Employees\nADD COLUMN age INT;",
        "abap": "DATA: ls_table TYPE ty employees.\nls_table-age = '1'.\n\nALTER TABLE employees ADD COLUMN age TYPE i.\n"
    },
    {
        "instruction": "Change the following code so that it prints the list elements in reverse order.",
        "input": "arr = [1, 2, 3, 4, 5]\n\nfor x in arr:\n    print(x)",
        "output": "arr = [1, 2, 3, 4, 5]\n\nfor x in arr[::-1]:\n    print(x)",
        "abap": "DATA: ls_arr TYPE STANDARD TABLE OF i VALUE '1' '2' '3' '4' '5'.\n\nLOOP AT ls_arr INTO DATA(ls_x) FROM SIELENT TO 0 BY -1.\n  WRITE: / ls_x.\nENDLOOP.\n"
    },
    {
        "instruction": "Edit the following code so it outputs the odd numbers between 1 and 50.",
        "input": "for i in range(1,51):\n    print(i)",
        "output": "for i in range(1,51):\n    if i % 2 != 0:\n        print(i)",
        "abap": "DO.\n  lv_counter = 1.\n  DO.\n    IF sy-index MOD 2 <> 0.\n      WRITE: / lv_counter.\n    ENDIF.\n    ADD 1 TO lv_counter.\n    WHEN OTHERS. LEAVE TO DATABASE CONTAINER.\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Given a string, create a function that takes out all the duplicated characters in the string.",
        "input": "string = 'Keeep Learning'",
        "output": "def remove_duplicates(s):\n  seen = []\n  res = \"\"\n  for char in s:\n    if(char in seen):\n      continue\n    else:\n      seen.append(char)\n      res += char\n  return res\n\nstring = 'Keeep Learning'\nprint(remove_duplicates(string)) # Keep Larning",
        "abap": "REPORT zdemo.\n\nCLASS lcl_demo DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_duplicates\n        IMPORTING\n          iv_string TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE string.\nENDCLASS.\n\nCLASS lcl_demo IMPLEMENTATION.\n  METHOD remove_duplicates.\n    DATA: lv_seen TYPE STANDARD TABLE OF char1,\n          lv_result TYPE string.\n\n    CLEAR: lv_seen,\n           lv_result.\n\n    LOOP AT iv_string INTO DATA(lv_char).\n      IF line_exists( lv_seen[ table_line = lv_char ] ).\n        CONTINUE.\n      ELSE.\n        APPEND lv_char TO lv_seen.\n        CONCATENATE lv_result lv_char INTO lv_result.\n      ENDIF.\n    ENDLOOP.\n\n    rv_result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lr_demo TYPE REF TO lcl_demo,\n        lv_string TYPE string.\n\n  lv_string = 'Keeep Learning'.\n  CREATE OBJECT lr_demo.\n  rv_result = lr_demo->remove_duplicates( iv_string = lv_string ).\n  WRITE: / rv_result.  \" Keep Larning\n"
    },
    {
        "instruction": "Create a function in JavaScript to find the number of occurrences of a letter in a word.",
        "input": "word: hello\nletter: l",
        "output": "function findOccurrences(word, letter) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (word.charAt(i) === letter) {\n            count++;\n        }\n    }\n    return count;\n}",
        "abap": "CLASS lcl_word_occurrences DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      findOccurrences\n        IMPORTING\n          iv_word     TYPE string\n          iv_letter   TYPE c\n        EXPORTING\n          ev_count    TYPE i.\nENDCLASS.\n\nCLASS lcl_word_occurrences IMPLEMENTATION.\n  METHOD findOccurrences.\n    DATA: lv_length TYPE i,\n          lv_index  TYPE i.\n\n    \" Get the length of the word\n    lv_length = strlen( iv_word ).\n\n    \" Initialize count to 0\n    ev_count = 0.\n\n    \" Iterate over each character in the word\n    DO.\n      lv_index = sy-index - 1. \" Adjust for ABAP's 0-based index\n\n      \" If the current character is equal to the letter, increment the count\n      IF iv_letter EQ iv_word+lvc_length(lv_index).\n        ev_count = ev_count + 1.\n      ENDIF.\n\n      \" Exit loop if we've reached the end of the word\n      IF lv_index GE lv_length.\n        EXIT.\n      ENDIF.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Classify whether the following is an imperative or functional programming language.",
        "input": "Java",
        "output": "Imperative Programming",
        "abap": "REPORT z_imperative_programming_example.\n\nDATA: lv_counter TYPE i VALUE 0.\n\nDO.\n  lv_counter = lv_counter + 1.\n  WRITE: / lv_counter.\n  IF lv_counter > 5.\n    EXIT.\n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Create a list of two-word phrases using each of the four words ('apple', 'bear', 'cat', 'dog').",
        "input": "",
        "output": "[('apple', 'bear'), ('apple', 'cat'), ('apple', 'dog'), ('bear', 'cat'), ('bear', 'dog'), ('cat', 'dog')]",
        "abap": "DATA: lt_animals TYPE TABLE OF ty_animal.\n\nTYPES: BEGIN OF type_animal.\n  name1 TYPE string,\n  name2 TYPE string.\nTYPES: END OF type_animal.\n\nlt_animals = VALUE #( ( 'apple' 'bear' )\n                      ( 'apple' 'cat'   )\n                      ( 'apple' 'dog'   )\n                      ( 'bear' 'cat'   )\n                      ( 'bear' 'dog'   )\n                      ( 'cat'  'dog' ) ).\n\nLOOP AT lt_animals INTO DATA(ls_animal).\n  WRITE: / ls_animal-name1, ls_animal-name2.\nENDLOOP.\n"
    },
    {
        "instruction": "Using the given function, create a loop that counts from 0 to 9.",
        "input": "function printNum(num){\n  console.log(num)\n}",
        "output": "for (let i = 0; i < 10; i++){\n    printNum(i);\n}",
        "abap": "DO.\n  LV_COUNTER = sy-index - 1.\n  IF lv_counter LT 10.\n    WRITE: / lv_counter.\n  ENDDO.\n"
    },
    {
        "instruction": "Write a code to convert a given list of strings to uppercase.",
        "input": "mylist = [\"hello\",\"world\"]",
        "output": "\"\"\"\nWrite a code to convert a given list of strings to uppercase\n\"\"\"\n\n# List containing the strings\nmylist = [\"hello\",\"world\"]\n\n# Converting the list of strings to uppercase\nupper_list = [string.upper() for string in mylist]\n \n# Printing the new list\nprint(\"List with strings in uppercase is\", upper_list)",
        "abap": "REPORT zconvert_strings_to_uppercase.\n\nDATA: lv_list TYPE STANDARD TABLE OF string,\n      lt_upper_list TYPE STANDARD TABLE OF string.\n\n\" Define a local type to hold the list of strings\nTYPES: BEGIN OF ty_string,\n         text  TYPE string,\n       END OF ty_string.\n\n\" Initialize the list with the input values\nlv_list = VALUE #( ( 'hello' )\n                     ( 'world' ) ).\n\n\" Create an upper case copy of the original list\nlt_upper_list = value #( FOR lv_str IN lv_list\n                            ( lv_str- text CASET toupper ) ).\n\n\" Print the new list\nLOOP AT lt_upper_list INTO DATA(lv_string).\n  WRITE:/ lv_string.\nENDLOOP.\n"
    },
    {
        "instruction": "Fix the Python code below to make the script work.",
        "input": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile)",
        "output": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)",
        "abap": "DATA: lv_json TYPE string.\n\n\" Define data structure\nTYPES: BEGIN OF ty_data,\n         name  TYPE string,\n         age   TYPE i,\n       END OF ty_data.\n\ndata_type TYPE ty_data.\ndata_type-name = 'John Doe'.\ndata_type-age = 20.\n\n\" Convert internal table to json format\nDATA: lv_json TYPE string.\n\nlv_json = cl_abap_json=>to_json(\n  value = data_type ).\n\n\" Write JSON to file\nOPEN DATASET \"data.txt\" FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.\nIF sy-subrc <> 0.\n  MESSAGE id 'SYS' type 'E' number sy-subrc\n    initial LINE message.\nENDIF.\n\nWRITE lv_json TO data.txt.\nCLOSE DATASET data.txt.\n"
    },
    {
        "instruction": "Create a Linked List in C++.",
        "input": "",
        "output": "// create a struct to represent a node\nstruct node \n{ \n    int data; \n    struct node* next; \n}; \n  \n// function to insert an element in the Linked List \nvoid push(struct node** head_ref, int newdata) \n{ \n    // allocate memory for the node \n    struct node* newnode = (struct node*) malloc(sizeof(struct node)); \n  \n    // adding data to the node \n    newnode->data = newdata; \n  \n    // make next point to the previous head \n    newnode->next = (*head_ref); \n  \n    // move the head point to the new node \n    (*head_ref) = newnode; \n}",
        "abap": "TYPES: BEGIN OF ty_node,\n          data TYPE i,\n          next  TYPE REF TO ty_node,\n        END OF ty_node.\n\nDATA: lr_head TYPE REF TO ty_node.\n\nCLASS lcl_node DEFINITION.\n  PUBLIC SECTION.\n    METHODS:\n      constructor IMPORTING iv_data TYPE i,\n      set_next IMPORTING io_next TYPE REF TO lcl_node,\n      get_next EXPORTING io_next TYPE REF TO lcl_node,\n      push IMPORTING iv_newdata TYPE i.\nENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD constructor.\n    me->data = iv_data.\n  ENDMETHOD.\n\n  METHOD set_next.\n    me->next = io_next.\n  ENDMETHOD.\n\n  METHOD get_next.\n    rv_next = me->next.\n  ENDMETHOD.\n\n  METHOD push.\n    DATA: lr_newnode TYPE REF TO lcl_node.\n\n    \" Allocate memory for the node\n    CREATE OBJECT lr_newnode\n      EXPORTING\n        iv_data = iv_newdata.\n\n    \" Set next pointer of new node to current head\n    lr_newnode->set_next( lr_head ).\n\n    \" Update head to point to the new node\n    lr_head = lr_newnode.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Develop a code in Java to calculate the BMI given the height and weight of a person.",
        "input": "",
        "output": "public double calculateBMI(double height, double weight){\n   double bmi;\n   height = height/100;\n   bmi = weight / Math.pow(height, 2);\n   return bmi;\n}",
        "abap": "CLASS lcl_bmi_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_bmi\n        IMPORTING\n          iv_height         TYPE f\n          iv_weight         TYPE f\n        EXPORTING\n          ev_bmi            TYPE f.\n\nENDCLASS.\n\nCLASS lcl_bmi_calculator IMPLEMENTATION.\n  METHOD calculate_bmi.\n    DATA: lv_height TYPE f.\n\n    lv_height = iv_height / 100.\n    ev_bmi = iv_weight / ( lv_height ** 2 ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a table to store customer information.",
        "input": "",
        "output": "CREATE TABLE customers (\n   id int NOT NULL AUTO_INCREMENT,\n   name varchar(100) NOT NULL,\n   email varchar(100) NOT NULL,\n   phone varchar(20) NOT NULL,\n   address varchar(200) NOT NULL,\n   PRIMARY KEY (id)\n);",
        "abap": "TYPES: BEGIN OF ty_customer,\n          id         TYPE i,\n          name       TYPE string,\n          email      TYPE string,\n          phone      TYPE string,\n          address    TYPE string.\nTYPES: END OF ty_customer.\n\nDATA: lt_customers TYPE STANDARD TABLE OF ty_customer.\n\n\" Create internal table and fill it with data\nDATA(lo_table_builder) = cl_db_bldr=>create( 'CUSTOMERS' ).\nlo_table_builder->add_column( name  = 'ID'\n                              type  = 'I'\n                              key   = abap_true\n                              value = abap_false ).\nlo_table_builder->add_column( name  = 'NAME'\n                              type  = 'S'\n                              key   = abap_false\n                              value = abap_false ).\nlo_table_builder->add_column( name  = 'EMAIL'\n                              type  = 'S'\n                              key   = abap_false\n                              value = abap_false ).\nlo_table_builder->add_column( name  = 'PHONE'\n                              type  = 'C'\n                              key   = abap_false\n                              value = abap_false ).\nlo_table_builder->add_column( name  = 'ADDRESS'\n                              type  = 'S'\n                              key   = abap_false\n                              value = abap_false ).\n\nDATA(lt_structure) = lo_table_builder->build( ).\nlt_customers[] = VALUE #( lt_structure[ table_name = 'CUSTOMERS' ] ).\n"
    },
    {
        "instruction": "Create an HTML form with radio buttons for selecting gender.",
        "input": "",
        "output": "<form>\n  <label>Gender:</label><br>\n  <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n  <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br> \n</form>",
        "abap": "DATA: lv_gender TYPE i.\n\nFORM display_data.\n  \" Create a radio button group for gender\n  cl_gui_frontend_services=>set_radio_button( 'GENDER', [ VALUE 'M' ] ).\n  cl_gui_frontend_services=>set_radio_button( 'GENDER', [ VALUE 'F' ] ).\n\n  IF lv_gender = 1. \" if male is selected\n    WRITE: / 'You are Male'.\n  ELSEIF lv_gender = 2. \" if female is selected\n    WRITE: / 'You are Female'.\n  ENDIF.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a function to find the maximum difference between two numbers in a given array.",
        "input": "arr = [5, 3, 17, 11, 9]",
        "output": "def max_difference(arr):\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "abap": "REPORT zmax_difference.\n\nCLASS lcl_max_difference DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      max_difference\n        IMPORTING\n          VALUE(iv_array) TYPE STANDARD TABLE OF i\n        RETURNING\n          VALUE(rv_diff) TYPE i.\nENDCLASS.\n\nCLASS lcl_max_difference IMPLEMENTATION.\n  METHOD max_difference.\n    DATA: lv_max_diff TYPE i,\n          ls_arr     LIKE LINE OF iv_array.\n\n    SORT iv_array ASCENDING BY table_line.\n    DO.\n      READ TABLE iv_array INTO ls_arr INDEX sy-index - 1.\n      IF sy-subrc <> 0.\n        EXIT.\n      ENDIF.\n      IF sy-index > 1.\n        DIFFERENCES: lv_max_diff = ls_arr-table_line - (iv_array[ sy-index - 2 ] ).\n        IF lv_max_diff > max_difference-max_diff.\n          max_difference-max_diff = lv_max_diff.\n        ENDIF.\n      ENDIF.\n    ENDDO.\n\n    rv_diff = max_difference-max_diff.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lt_array TYPE STANDARD TABLE OF i,\n      li       TYPE i.\n\nAPPEND 1 TO lt_array. \" append some numbers to the array\nAPPEND 2 TO lt_array.\nAPPEND 3 TO lt_array.\nAPPEND 4 TO lt_array.\n\nli = lcl_max_difference=>max_difference( lt_array ).\nWRITE: / 'Max difference is:', li.\n"
    },
    {
        "instruction": "Explain the concept of Big O notation in one sentence.",
        "input": "",
        "output": "Big O notation is a way to measure the efficiency of algorithms and to compare them based on how their running time or space complexity grows relative to the size of the input.",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\n\n\" Initialize array\nDO 10 TIMES.\n  APPEND val TO lv_array.\nENDDO.\n\n\" Find an element in the array using linear search\nPERFORM linear_search USING lv_array \" Array to search \"\n                            5         \" Target value to find \".\n"
    },
    {
        "instruction": "Find the index of the number 23 in the given array.",
        "input": "[78, 82, 6, 23, 77, 57, 88]",
        "output": "3",
        "abap": "DATA: lv_number TYPE i.\n\nlv_number = 3.\nWRITE: / lv_number.\n"
    },
    {
        "instruction": "Write a function that sorts the given list of numbers in descending order",
        "input": "[1, 2, 3, 5, 8, 10]",
        "output": "\"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))",
        "abap": "CLASS lcl_sort_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_list_descending\n        IMPORTING\n          VALUE( it_numbers ) TYPE STANDARD TABLE OF i\n        EXPORTING\n          VALUE( ev_sorted_list ) TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS lcl_sort_list IMPLEMENTATION.\n  METHOD sort_list_descending.\n    SORT it_numbers IN DESCENDING ORDER.\n    ev_sorted_list = it_numbers.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lt_numbers TYPE STANDARD TABLE OF i.\n\nlt_numbers = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 5 ) ( 8 ) ( 10 ) ).\n\nDATA: lo_sort_list TYPE REF TO lcl_sort_list,\n      lt_sorted_list TYPE STANDARD TABLE OF i.\n\nCREATE OBJECT lo_sort_list.\nlo_sort_list->sort_list_descending(\n  EXPORTING\n    it_numbers            = lt_numbers\n  IMPORTING\n    ev_sorted_list        = lt_sorted_list\n).\n\nLOOP AT lt_sorted_list INTO DATA(ls_item).\n  WRITE: ls_item.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a program to count the total characters in a string.",
        "input": "",
        "output": "def count_string_characters(string):\n    return len(string)",
        "abap": "REPORT zcount_string_characters.\n\nCLASS lcl_count_string_characters DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      count_string_characters IMPORTING\n        string     TYPE string\n      RETURNING\n        value(result) TYPE i.\nENDCLASS.\n\nCLASS lcl_count_string_characters IMPLEMENTATION.\n  METHOD count_string_characters.\n    result = strlen( string ).\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_result TYPE i.\n\nlv_result = lcl_count_string_characters=>count_string_characters(\n          string = 'Hello World' ).\n\nWRITE: / lv_result. \" Output the length of the input string\n"
    },
    {
        "instruction": "Write a script to delete an element from an array given its index.",
        "input": "Given array: [1, 2, 3, 4]\nIndex of element to delete: 1",
        "output": "def delete_element(lst, index):\n    del lst[index]\n    return lst",
        "abap": "CLASS lcl_example DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      delete_element\n        CHANGING\n          cs_list TYPE ti_t_ytyp.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_example IMPLEMENTATION.\n  METHOD delete_element BY OBJECT.\n    DELETE cs_list INDEX index.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an SQL statement to select the name, city and country of all stores.",
        "input": "",
        "output": "SELECT name, city, country\nFROM stores;",
        "abap": "TYPES: BEGIN OF ty_stores,\n          name  TYPE string,\n          city  TYPE string,\n          country TYPE string,\n        END OF ty_stores.\n\nDATA: lt_stores TYPE STANDARD TABLE OF ty_stores.\n\nSELECT name, city, country FROM stores INTO CORRESPONDING FIELDS OF TABLE lt_stores.\n"
    },
    {
        "instruction": "Write code in Java to sort an array of integers in ascending order.",
        "input": "[5, 2, 8, 10, 4, 9]",
        "output": "public static void sortAscending(int[] arr) {\n    for(int i = 0; i < arr.length - 1; i++) {\n        int min = i;\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        int tmp = arr[i];\n        arr[i] = arr[min];\n        arr[min] = tmp;\n    }\n}",
        "abap": "FORM sort_ascending USING itab TYPE STANDARD TABLE OF i.\n\n  DATA: min TYPE i,\n         tmp TYPE i.\n\n  LOOP AT itab INTO DATA(line) FROM 1 LEAST sy-tfill.\n    READ TABLE itab WITH KEY table_line = line - 1 INTO min.\n    IF sy-subrc <> 0.\n      min = 1.\n    ENDIF.\n\n    WHILE line <= itab-top AND min <> line.\n      IF itab-line = < itab-min.\n        min = line.\n      ENDIF.\n      ADD 1 TO line.\n    ENDWHILE.\n\n    IF min <> line.\n      tmp = itab-line.\n      itab-line = itab-min.\n      itab-min = tmp.\n    ENDIF.\n  ENDLOOP.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create an algorithm to sort a list of numbers in ascending order.",
        "input": "lst = [2, 5, 1, 7, 4]",
        "output": "def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))",
        "abap": "REPORT zsort_list.\n\nCLASS zsort_list DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      sort_list_ascending IMPORTING\n        VALUE(iv_list) TYPE stdntable\n        RETURNING\n          VALUE(rv_sorted_list) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS zsort_list IMPLEMENTATION.\n  METHOD sort_list_ascending.\n    DATA: lv_length TYPE i,\n          lt_temp   TYPE STANDARD TABLE OF i.\n\n    \" Copy the input list to a temporary table\n    DO.\n      lv_length = lines( iv_list ).\n      IF lv_length = 0.\n        EXIT.\n      ENDIF.\n\n      APPEND VALUE #( val = iv_list[ 1 ] ) TO lt_temp.\n      DELETE iv_list INDEX 1.\n\n      DO.\n        \" Traverse through all array elements \n        WHILE sy-tabix < lv_length.\n\n          \" Find the minimum element in remaining unsorted list\n          READ TABLE iv_list ASSIGNING FIELD-SYMBOL(<ls_min>) FROM sy-tabix.\n          DATA(lv_min_idx) = sy-tabix.\n\n          LOOP AT iv_list FROM sy-tabix + 1 TRANSPORTING NO FIELDS.\n            IF <ls_min>-val > iv_list[ sy-index ]-val.\n              lv_min_idx = sy-index - 1.\n            ENDIF.\n          ENDLOOP.\n\n          \" Swap the found minimum element with the first element\n          DATA(lv_tmp) = iv_list[ lv_min_idx ].\n          DELETE iv_list INDEX lv_min_idx.\n          INSERT VALUE #( val = iv_list[ sy-tabix ] ) INTO TABLE iv_list INDEX lv_min_idx.\n          APPEND VALUE #( val = lv_tmp ) TO lt_temp.\n\n          ENDDO.\n\n        \" If the last element is already smaller than the previous one, exit\n        IF sy-tabix < 2 OR lt_temp[ sy-tabix - 1 ] <= lt_temp[ sy-tabix ].\n          EXIT.\n        ENDIF.\n\n      UNTIL sy-tabix >= lv_length.\n\n    rv_sorted_list = lt_temp.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lv_list TYPE STANDARD TABLE OF i.\n\nlv_list = VALUE #( ( 2 ) ( 5 ) ( 1 ) ( 7 ) ( 4 ) ).\n\nrv_sorted_list = zsort_list=>sort_list_ascending( iv_list = lv_list ).\nDO.\n  WRITE: / sy-index, rv_sorted_list[ sy-index ].\n  IF sy-index >= lines( rv_sorted_list ).\n    EXIT.\n  ENDIF.\nENDDO.\n"
    },
    {
        "instruction": "Create a function to find if a given input is a prime number or not.",
        "input": "",
        "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True",
        "abap": "CLASS lcl_prime DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_prime IMPORTING\n                 VALUE( iv_number ) TYPE i\n               EXPORTING\n                 VALUE( ev_is_prime ) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_prime IMPLEMENTATION.\n  METHOD is_prime.\n    IF iv_number < 2.\n      ev_is_prime = abap_false.\n    ELSEIF iv_number > 0 AND iv_number MOD 2 <> 0.\n      \" Only need to check odd numbers up to the square root of n\n      DATA: lv_limit TYPE i VALUE sqrt( iv_number ).\n      DO.\n        IF iv_number MOD lv_limit < lv_limit.\n          ev_is_prime = abap_true.\n          EXIT.\n        ENDIF.\n        lv_limit = lv_limit - 1.\n        IF lv_limit <= 0.\n          ev_is_prime = abap_false.\n          EXIT.\n        ENDIF.\n      ENDDO.\n    ELSE.\n      ev_is_prime = abap_false.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a script using Bash that replaces all vowels with a number.",
        "input": "",
        "output": "#!/bin/bash\n\nstring=\"Hello World!\"\nvowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n\nfor i in \"${vowels[@]}\"\ndo\n    string=\"${string//$i/0}\"\ndone\n\necho $string #H0ll0 W0rld!",
        "abap": "REPORT zhello_world.\n\nDATA: lv_string TYPE string VALUE 'Hello World!'.\n\n\nDATA: lt_vowels TYPE STANDARD TABLE OF string,\n      lv_vowel  TYPE string.\nTYPES: BEGIN OF ty_vowel, value TYPE string, END OF ty_vowel.\n\nlt_vowels = VALUE #( ( 'a' ) \"A\n                     ( 'e' ) \"E\n                     ( 'i' ) \"I\n                     ( 'o' ) \"O\n                     ( 'u' 'U' ) ).\n\nLOOP AT lt_vowels INTO lv_vowel.\n  TRANSLATE lv_string REPLACE ALL OCCURRENCES OF lv_vowel WITH '0'.\nENDLOOP.\n\nWRITE: / lv_string. \"H0ll0 W0rld!\n"
    },
    {
        "instruction": "Write a JavaScript code snippet to remove the last element from an array.",
        "input": "Array: [1, 2, 3, 4, 5]",
        "output": "let array = [1, 2, 3, 4, 5];\narray.pop(); // remove the last element\nconsole.log(array); // [1, 2, 3, 4]",
        "abap": "DATA: lt_array TYPE STANDARD TABLE OF i.\n\nlt_array = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\n\nDELETE lt_array FROM sy-tabix.\nWRITE: / lt_array. \" [1, 2, 3, 4]\n"
    },
    {
        "instruction": "Create an HTML page displaying a table of 3 rows and 3 columns.",
        "input": "",
        "output": "<table>\n  <tr>\n    <td>Column 1</td>\n    <td>Column 2</td>\n    <td>Column 3</td>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n</table>",
        "abap": "DATA: lv_table TYPE string.\n\nlv_table = '<table>'.\n\" Header row\nlv_table = lv_table && '<tr>'.\nDO 3 TIMES.\n  lv_table = lv_table && '<td>Column 1</td>'.\n  lv_table = lv_table && '<td>Column 2</td>'.\n  lv_table = lv_table && '<td>Column 3</td>'.\nENDDO.\nlv_table = lv_table && '</tr>'.\n\n\" Data rows\nDO 3 TIMES.\n  lv_table = lv_table && '<tr>'.\n  DO 3 TIMES.\n    lv_table = lv_table && '<td>Row ' && sy-index || '</td>'.\n  ENDDO.\n  lv_table = lv_table && '</tr>'.\nENDDO.\n\nlv_table = lv_table && '</table>'.\n\nWRITE: / lv_table.\n"
    },
    {
        "instruction": "Explain the purpose of this function.",
        "input": "def mean(list):\n    total = 0\n    for item in list:\n        total += item\n    return total / len(list)",
        "output": "This function takes a list of numbers as an argument and returns the mean value, which is the sum of all the values divided by the number of values in the list.",
        "abap": "FUNCTION z_mean_value.\n\n*\"----------------------------------------------------------------------\n*\"*\"Local Interface:\n*\"  IMPORTING\n*\"     VALUE(INPUT_LIST) TYPE  STANDARD TABLE OF float4\n*\"  EXPORTING\n*\"     VALUE(MEAN_VALUE) TYPE F\n*\"----------------------------------------------------------------------\n\n  DATA: lv_total    TYPE f,\n        lv_count    TYPE i.\n\n  FIELD-SYMBOL <>lv_iterator TYPE any.\n\n  IF input_list IS INITIAL.\n    RAISE EXCEPTION type cx_no_checkable_type_message message 'Input list is empty'.\n  ENDIF.\n\n  CLEAR: total, count.\n\n  DO.\n    ASSIGN COMPONENT 'value' OF STRUCTURE LINE( itab = input_list ) TO FIELD-SYMBOL <>lv_iterator.\n\n    IF sy-subrc <> 0.\n      EXIT.\n    ENDIF.\n\n    lv_total = lv_total + lv_iterator.\n    lv_count = lv_count + 1.\n  ENDDO.\n\n  mean_value = lv_total / lv_count.\n\nENDFUNCTION.  \n"
    },
    {
        "instruction": "Create a Linked List Node with the data of type integer.",
        "input": "",
        "output": "class Node: \n  \n  # Function to initializaee the node object \n  def __init__(self, data): \n    self.data = data # Assign data \n    self.next = None # Initialize next as null",
        "abap": "CLASS lcl_node DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      constructor\n        IMPORTING\n          iv_data TYPE any.\n\n    DATA: data TYPE ANY,\n          next  TYPE REF TO lcl_node.\nENDCLASS.\n\nCLASS lcl_node IMPLEMENTATION.\n  METHOD constructor.\n    me->data = iv_data.\n    me->next = NEW #( ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "You should write a MySQL command to count how many records in the table \"users\".",
        "input": "",
        "output": "SELECT COUNT(*) FROM users;",
        "abap": "REPORT zcount_users.\n\nDATA: lv_count TYPE i.\nSELECT COUNT(*) INTO lv_count\n  FROM users.\nWRITE: / lv_count.\n"
    },
    {
        "instruction": "Manipulate a given list to get a single string.",
        "input": "[\"Hello\", \"World\", \"!\"]",
        "output": "def create_string(arr):\n  string = ''\n  for elem in arr:\n    string += elem\n  return string\n\nprint(create_string(['Hello', 'World', '!']))",
        "abap": "CLASS lcl_string_generator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      create_string\n        IMPORTING\n          value( it_string )\n        RETURNING\n          VALUE( result ) TYPE string.\nENDCLASS.\n\nCLASS lcl_string_generator IMPLEMENTATION.\n  METHOD create_string.\n    DATA: lv_string TYPE string.\n    DO SIZE = lines( it_string ) OF it_string INTO TABLE DATA(it_string_table).\n      LOOP AT it_string_table INTO DATA(line).\n        CONCATENATE lv_string line INTO lv_string.\n      ENDLOOP.\n    ENDDO.\n    result = lv_string.\n  ENDMETHOD.\n\nSTART-OF-SELECTION.\n  PERFORM create_string USING VALUE #( ( 'Hello' ) ( 'World' ) ( '!' ) ). \" pass an internal table\n  WRITE: / 'Result:', cl_abap_char_utilities=>newline || result. \" print the result\n\nEND-OF-SELECTON.\n\n\" or using a different approach with LOOP AT it_string INTO DATA(line) and appending to lv_string\n"
    },
    {
        "instruction": "Use the function to debug the given program and prevent the segmentation fault.",
        "input": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // TODO\n    for (i = 0; i <= n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // Limit loop size to the length of the array\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i,\n      lv_index TYPE i.\n\nlv_array = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\nDO.\n  lv_index = sy-index - 1.\n  WRITE: lv_index INTO write-to-string.\n  ENDEXECUTE.\nENDDO.\n"
    },
    {
        "instruction": "Write a query to display the average age of the students.",
        "input": "Table Name: Students",
        "output": "SELECT AVG(Age) FROM Students;",
        "abap": "REPORT zavg_age.\n\nTYPES: BEGIN OF ty_student,\n         Age TYPE i,\n       END OF ty_student.\nDATA: it_students TYPE STANDARD TABLE OF ty_student.\n\n\" Sample data, replace with your own data source\nAPPEND VALUE #( age = 20 ) TO it_students.\nAPPEND VALUE #( age = 30 ) TO it_students.\nAPPEND VALUE #( age = 25 ) TO it_students.\n\nDATA: lv_avg_age TYPE i.\n\nSELECT AVG( age )\n  INTO lv_avg_age\n  FROM it_students.\n\nWRITE: / 'Average Age:', lv_avg_age.\n"
    },
    {
        "instruction": "Create a function to generate the nth term in the Fibonacci sequence.",
        "input": "n = 3",
        "output": "def get_fib_term(n): \n    if n <= 1: \n        return n \n    else: \n        return get_fib_term(n-1) + get_fib_term(n-2)\n  \nprint(get_fib_term(3))",
        "abap": "REPORT zfibonacci.\n\nCLASS lcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_fib_term IMPORTING p_n TYPE i RETURNING r_value TYPE i.\nENDCLASS.\n\nCLASS lcl_fibonacci IMPLEMENTATION.\n  METHOD get_fib_term.\n    IF p_n <= 1.\n      r_value = p_n.\n    ELSE.\n      r_value = get_fib_term( p_n - 1 ) + get_fib_term( p_n - 2 ).\n    ENDIF.\n  ENDMETHOD.\n\nSTART-OF-SELECTION.\n  WRITE: / get_fib_term( 3 ).\n"
    },
    {
        "instruction": "Implement a reverse method to reverse the content of an array.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "def reverse(arr): \n    n =len(arr) \n    for i in range(n // 2): \n        temp = arr[i] \n        arr[i] = arr[n - i - 1] \n        arr[n - i - 1] = temp\n  \n    return arr",
        "abap": "CLASS lcl_array_reverser DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse USING\n        VALUE(ri_arr) TYPE STANDARD TABLE OF i\n      RETURNING\n        VALUE(ro_result) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_array_reverser IMPLEMENTATION.\n  METHOD reverse.\n    DATA: lv_n TYPE i,\n          li_i TYPE i.\n    \n    lv_n = lines( ri_arr ).\n    DO lv_n / 2 TIMES.\n      li_i = sy-index - 1.\n      DATA(lv_temp) = ri_arr[ sy-index - 1 ].\n      ri_arr[ sy-index - 1 ] = ri_arr[ li_i ].\n      ri_arr[ li_i ] = lv_temp.\n    ENDDO.\n    \n    ro_result = ri_arr.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Create a C++ program to calculate the sum of numbers in an array.",
        "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};",
        "output": "#include <iostream>\n#include <vector>\n \nint sumArray(std::vector<int> &nums)\n{\n    int sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum;\n}\n \nint main()\n{\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    std::cout << \"Sum: \" << sumArray(nums);\n    return 0;\n}",
        "abap": "DATA: lv_sum TYPE i,\n      lt_nums TYPE STANDARD TABLE OF i.\n\nINITIALIZATION.\n  lv_nums = VALUE #( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\n\nAT EXIT.\n  WRITE: / 'Sum: ', sum_array( lv_nums ).\nEND-OF-EXECUTION.\nFORM sum_array\n  USING\n    p_nums TYPE STANDARD TABLE OF i.\n\n  DATA: ls_num LIKE LINE OF p_nums,\n        lv_sum TYPE i.\n\n  DO.\n    READ TABLE p_nums INTO ls_num INDEX sy-index.\n    IF sy-subrc <> 0.\n      EXIT.\n    ENDIF.\n    lv_sum = lv_sum + ls_num.\n  ENDDO.\nENDFORM.\n"
    },
    {
        "instruction": "Write a Python function to find the intersection between two lists.",
        "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]",
        "output": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result",
        "abap": "CLASS lcl_intersection DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      intersection\n        IMPORTING\n          list1 TYPE STANDARD TABLE OF string\n          list2 TYPE STANDARD TABLE OF string\n        RETURNING\n          VALUE(result) TYPE STANDARD TABLE OF string .\nENDCLASS.\n\nCLASS lcl_intersection IMPLEMENTATION.\n  METHOD intersection.\n    DATA: itab_result TYPE STANDARD TABLE OF string.\n\n    LOOP AT list1 INTO DATA(ls_i).\n      LOOP AT list2 INTO DATA(ls_j).\n        IF ls_i = ls_j.\n          APPEND ls_i TO itab_result.\n        ENDIF.\n      ENDLOOP.\n    ENDLOOP.\n\n    result = itab_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "In Python, write code to identify whether a given string contains only numeric values.",
        "input": "",
        "output": "# To identify whether a given string contains only numeric values in Python:\n# 1. Use the isdigit method of the str object\n# 2. Pass the given string as an argument to the isdigit method\n# 3. The method will return True if the given string contains only numeric values,\n#    and False otherwise\n\n# Example\ngiven_string = \"1234\"\n\nif given_string.isdigit():\n    print(\"The given string contains only numeric values\")  \nelse:\n    print(\"The given string does not contain only numeric values\")",
        "abap": "REPORT ztest.\n\nDATA: lv_string TYPE string.\n\nlv_string = '1234'.\n\nIF lv_string CA '0123456789'.\n  WRITE: / 'The given string contains only numeric values'.\nELSE.\n  WRITE: / 'The given string does not contain only numeric values'.\nENDIF.\n"
    },
    {
        "instruction": "Create a Python program to generate the Fibonacci series between 0 and 10.",
        "input": "",
        "output": "def FibonacciSequence():\n  a, b = 0, 1\n  for _ in range(10):\n    yield a\n    a, b = b, a + b\n\nfor num in FibonacciSequence():\n  print(num)",
        "abap": "REPORT zfibonacci.\n\nCLASS lcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_sequence IMPORTING\n                            p_length TYPE i\n        EXPORTING\n        VALUE(fib_sequence) TYPE STANDARD TABLE OF i .\nENDCLASS.\n\nCLASS lcl_fibonacci IMPLEMENTATION.\n  METHOD generate_sequence.\n    DATA: a TYPE i VALUE 0,\n          b TYPE i VALUE 1,\n          fib_table TYPE STANDARD TABLE OF i,\n          counter TYPE i VALUE 0.\n\n    DO p_length TIMES.\n      APPEND a TO fib_table.\n      DATA(temp) = a.\n      a = b.\n      b = temp + b.\n      counter = counter + 1.\n    ENDDO.\n\n    fib_sequence[] = fib_table[ 0: p_length ].\n  ENDMETHOD.\nENDCLASS.\n\nDATA(lv_fib_sequence) TYPE STANDARD TABLE OF i.\n\nCALL METHOD cl_lcl_fibonacci=>generate_sequence\n  EXPORTING\n    p_length          = 10\n  IMPORTING\n    VALUE(fib_sequence) = lv_fib_sequence.\n\nLOOP AT lv_fib_sequence INTO DATA(ls_number).\n  WRITE: / ls_number.\nENDLOOP.\n"
    },
    {
        "instruction": "Describe the general syntax of an if statement in Java.",
        "input": "",
        "output": "In Java, the syntax of an if statement is as follows:\n\nif (condition) {\n    // Code to execute if condition is true\n}",
        "abap": "IF <condition> .\n  \" Code to execute if condition is true\nENDIF.\n"
    },
    {
        "instruction": "What is the purpose of the \"if-else\" statement in JavaScript?",
        "input": "",
        "output": "The if-else statement is a control statement in JavaScript that is used to execute a block of code if a certain condition is true, and a different block of code if the condition is false. It is a type of decision-making statement which allows a program to execute a certain code depending on a certain condition.",
        "abap": "DATA: lv_condition TYPE abap_bool.\n\nlv_condition = 'true'. \" or 'false'\n\nIF lv_condition = abap_true.\n  WRITE: / 'Condition is true'.\nELSE.\n  WRITE: / 'Condition is false'.\nENDIF.\n"
    },
    {
        "instruction": "Concatenate the two strings below, with a space inserted between them.",
        "input": "A = \"Hello\"\nB = \"World!\"",
        "output": "A + ' ' + B",
        "abap": "DATA: lv_a TYPE c,\n      lv_b TYPE c.\n\nlv_a = 'Hello'.\nlv_b = 'World'.\n\nWRITE: |{ lv_a } { lv_b }|.\n"
    },
    {
        "instruction": "Implement an algorithm to reverse a string in Java.",
        "input": "",
        "output": "public static String reverseString(String s) {\n  char[] arr = s.toCharArray();\n  int n = arr.length;\n\n  for (int i = 0; i < n/2; i++) {\n    char temp = arr[i];\n    arr[i] = arr[n-i-1];\n    arr[n-i-1] = temp;\n  }\n  return new String(arr);\n}",
        "abap": "CLASS lcl_reverse_string DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      reverse_string\n        IMPORTING\n          iv_string TYPE string\n        RETURNING\n          VALUE(rv_reversed) TYPE string.\nENDCLASS.\n\nCLASS lcl_reverse_string IMPLEMENTATION.\n  METHOD reverse_string.\n    DATA: lv_temp  TYPE c,\n          lt_chars TYPE std_01.\n\n    \" Convert input string to internal table of characters\n    SPLIT iv_string AT space INTO TABLE lt_chars.\n\n    DO.\n      IF sy-index > lines( lt_chars ).\n        EXIT.\n      ENDIF.\n      \" Swap characters at the beginning and end of the array\n      lv_temp = lt_chars[ sy-index ].\n      lt_chars[ sy-index ] = lt_chars[ lines( lt_chars ) - sy-index + 1 ].\n      lt_chars[ lines( lt_chars ) - sy-index + 1 ] = lv_temp.\n    ENDDO.\n\n    \" Convert internal table back to string\n    rv_reversed = join( val = lt_chars sep = '' ).\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.",
        "input": "",
        "output": "import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)",
        "abap": "REPORT zbirds_classification.\n\nTYPES: BEGIN OF ty_bird,\n         wing_shape TYPE string,\n         size       TYPE string,\n         tails_length TYPE string,\n         color_pattern TYPE string,\n         species    TYPE string,\n       END OF ty_bird.\n\nDATA: it_birds TYPE STANDARD TABLE OF ty_bird,\n      ls_bird  TYPE ty_bird.\n\nTYPES: BEGIN OF ty_features,\n         wing_shape TYPE string,\n         size       TYPE string,\n         tails_length TYPE string,\n         color_pattern TYPE string,\n       END OF ty_features.\n\nDATA: lt_features TYPE STANDARD TABLE OF ty_features.\n\n\" Load the data from a CSV file\nSELECT *\n  INTO CORRESPONDING FIELDS OF TABLE it_birds\n  FROM \" birds.csv \". - Not implemented in ABAP, would need to be done using FM or API\n\n\" Define features\nlt_features = VALUE #( ( wing_shape )\n                      ( size )\n                      ( tails_length )\n                      ( color_pattern ) ).\n\nDATA: lt_data TYPE STANDARD TABLE OF ty_bird,\n      ls_data LIKE LINE OF it_birds.\n\nLOOP AT it_birds INTO ls_data.\n  APPEND LINES OF VALUE #( (\n        species = ls_data-species\n     ) ) TO DATA(lt_species).\nENDLOOP.\n\n\" Preprocess the data to generate feature vectors\nDATA: lt_feature_vectors TYPE STANDARD TABLE OF ty_features,\n      ls_feature_vector LIKE LINE OF lt_feature_vectors.\n\nLOOP AT it_birds INTO ls_data.\n  APPEND LINES OF VALUE #( (\n        wing_shape = ls_data-wing_shape\n        size       = ls_data-size\n        tails_length = ls_data-tails_length\n        color_pattern = ls_data-color_pattern\n     ) ) TO DATA(lt_feature_vectors).\nENDLOOP.\n\n\" Divide the data into training and test sets\nDATA: lt_train TYPE STANDARD TABLE OF ty_features,\n      lt_test  TYPE STANDARD TABLE OF ty_features.\nDATA: lt_y_train TYPE STANDARD TABLE OF string,\n      lt_y_test  TYPE STANDARD TABLE OF string.\n\nDO 10 TIMES.\n  READ TABLE it_birds INDEX sy-index INTO DATA(ls_data).\n  IF ls_data-species NE 'Sparrow'.\n    APPEND LINES OF VALUE #( (\n          wing_shape = ls_data-wing_shape\n        size       = ls_data-size\n        tails_length = ls_data-tails_length\n        color_pattern = ls_data-color_pattern\n     ) ) TO DATA(lt_train).\n    APPEND ls_data-species TO lt_y_train.\n  ELSE.\n    APPEND LINES OF VALUE #( (\n          wing_shape = ls_data-wing_shape\n        size       = ls_data-size\n        tails_length = ls_data-tails_length\n        color_pattern = ls_data-color_pattern\n     ) ) TO DATA(lt_test).\n    APPEND ls_data-species TO lt_y_test.\n  ENDIF.\nENDDO.\n\n\" Train a classification model\nDATA: lv_accuracy TYPE f.\n\nDATA: lo_decision_tree TYPE REF TO cl_abap_classificationtree,\n      lo_data_modeler TYPE REF TO cl_abap_datamodeler.\n\nlo_data_modeler = NEW #( ).\n\nlo_data_modeler->add_features(\n  IMPORTING\n    ip_data         = lt_train\n    ip_target       = it_birds\n    ip_classification_tree = DATA(lt_class_tree) ).\n\nDATA: lo_classifier TYPE REF TO if_booClassifier,\n      lv_confusion_matrix TYPE string.\n\nlo_classifier = CAST #( \" cl_abap_classificationtree( lt_class_tree ).\n\n\" Make predictions\nDATA: lt_predicted TYPE STANDARD TABLE OF string.\n\nDO 10 TIMES.\n  READ TABLE lt_test INDEX sy-index INTO DATA(ls_feature_vector).\n  IF ls_feature_vector-species IS NOT INITIAL.\n    APPEND ls_feature_vector TO lt_predicted.\n  ENDIF.\nENDDO.\n\nDATA: lt_classifications TYPE STANDARD TABLE OF string,\n      ls_classification LIKE LINE OF lt_classifications.\n\nDO 10 TIMES.\n  READ TABLE lt_test INDEX sy-index INTO DATA(ls_feature_vector).\n  IF ls_feature_vector-species IS NOT INITIAL.\n    lt_classifications = VALUE #( ( cl_abap_tstmodeling=>classify( lo_classifier->classfy( ls_feature_vector ) ) ) ).\n  ENDIF.\nENDDO.\n\n\" Generate evaluation metrics\nDATA: lv_accuracy TYPE f,\n      lv_precision TYPE f,\n      lv_recall    TYPE f,\n      lv_f1        TYPE f.\n\nDO 10 TIMES.\n  READ TABLE lt_test INDEX sy-index INTO DATA(ls_feature_vector).\n  IF ls_feature_vector-species IS NOT INITIAL.\n    DATA(lv_classified) = cl_abap_tstmodeling=>classify( lo_classifier->classfy( ls_feature_vector ) ).\n    lv_accuracy = lv_accuracy + ( if sy-subrc eq 0 AND ls_feature_vector-species EQ lv_classified THEN 1 ELSE 0 ).\n  ENDIF.\nENDDO.\n\nlv_accuracy = lv_accuracy / sy-dbcnt.\nWIRE(lv_accuracy).\n"
    },
    {
        "instruction": "Write a function in Python that takes in two strings and concatenates them together with a space in between.",
        "input": "",
        "output": "def my_concat(string1, string2)\n    return string1 + ' ' + string2",
        "abap": "CLASS lcl_my_concat DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      my_concat IMPORTING\n        string1 TYPE string\n        string2 TYPE string\n      RETURNING\n        VALUE(result) TYPE string.\nENDCLASS.\n\nCLASS lcl_my_concat IMPLEMENTATION.\n  METHOD my_concat.\n    result = string1 && ' ' && string2.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "You are given a list of numbers. Create a function that returns a new list with duplicates removed",
        "input": "list_of_numbers = [3, 6, 5, 5, 7, 6, 3]",
        "output": "def remove_duplicates(numbers):\n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list",
        "abap": "REPORT zremove_duplicates.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: remove_duplicates\n      IMPORTING\n        VALUE(iv_numbers) TYPE STANDARD TABLE OF i\n      RETURNING\n        VALUE(rv_result) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD remove_duplicates.\n    DATA: lv_result TYPE STANDARD TABLE OF i.\n\n    LOOP AT iv_numbers INTO DATA(lv_num).\n      IF NOT line_exists( table = rv_result BASE sy-index - 1 WITH KEY table_line = lv_num ).\n        APPEND lv_num TO rv_result.\n      ENDIF.\n    ENDLOOP.\n    rv_result = VALUE #( rv_result ).\n\n  ENDMETHOD.\n\nINITIALIZATION.\n  PERFORM remove_duplicates USING STANDARD TABLE OF i( ( 1, 2, 3, 4, 5, 2 ) )\n                           CHANGING DATA(lv_result) TYPE STANDARD TABLE OF i.\n  WRITE: / 'Result:', lv_result.\n"
    },
    {
        "instruction": "Create a HTML page with 3 sections, using div tags.",
        "input": "",
        "output": "<div>\n  <div id=\"section1\"> Section 1... </div> \n  <div id=\"section2\"> Section 2... </div> \n  <div id=\"section3\"> Section 3... </div>\n</div>",
        "abap": "DATA: ls_section TYPE tihtmldata.\n\nls_section-html = '<div>'.\nAPPEND LS_SECTION TO lt_html.\nLOOP AT itab OF html INTO ls_section.\n  CASE ls_section-id.\n    WHEN 'section1'.\n      ls_section-html = '<div id=\"section1\">Section 1...</div>'.\n    WHEN 'section2'.\n      ls_section-html = '<div id=\"section2\">Section 2...</div>'.\n    WHEN 'section3'.\n      ls_section-html = '<div id=\"section3\">Section 3...</div>'.\n  ENDCASE.\n  APPEND LS_SECTION TO lt_html.\nENDLOOP.\n\nls_section-html = '</div>'.\nAPPEND LS_SECTION TO lt_html.\n\nWRITE: / ( VALUE = string( lv_html ) ).\n"
    },
    {
        "instruction": "Create a nested loop to print every combination of numbers between 0-9",
        "input": "",
        "output": "for i in range(10):\n    for j in range(10):\n        print(i, j)",
        "abap": "DO 10 TIMES.\n  DO 10 TIMES.\n    WRITE: / sy-index1, sy-index2.\n  ENDDO.\nENDDO.\n"
    },
    {
        "instruction": "Create a list containing a given number of random numbers.",
        "input": "",
        "output": "import random\n\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.randint(0,100))\n\treturn rand_list",
        "abap": "TYPES: BEGIN OF ty_random_element,\n  element TYPE i,\nEND OF ty_random_element.\n\nDATA: lv_random_list TYPE STANDARD TABLE OF ty_random_element,\n      lv_length     TYPE i.\n\nPARAMETERS: p_length TYPE i.\n\nlv_length = p_length.\nDO p_length TIMES.\n  APPEND VALUE #( element = random_int( 0, 100 ) ) TO lv_random_list.\nENDDO.\n\nWRITE: / lv_random_list.\n"
    },
    {
        "instruction": "How to delete a particular row in an SQLite database table?",
        "input": "",
        "output": "To delete a particular row in an SQLite database table, you can use the DELETE statement with a WHERE clause to specify the row to be deleted. For example: DELETE FROM table_name WHERE condition;",
        "abap": "DATA: lv_table_name TYPE string,\n      ls_condition  TYPE string.\n\n\" Define the table name and the condition as strings\nlv_table_name = 'table_name'.\nls_condition  = 'condition'.\n\n\" Execute a SQL statement to delete from the table\nCALL FUNCTION 'EXECUTE_FUNCTION_MODULE'\n  EXPORTING\n    funcname   = 'DELETE_FROM_TABLE'\n  CHANGING\n    data        = VALUE #( ( lv_table_name ) )\n    conditions  = VALUE #( ( ls_condition ) ).\n\nFORM delete_from_table USING p_table TYPE string\n                             p_conditions TYPE string.\n\n\" Delete the specified records from the database\nSELECT SQL EXCEPTIONS INTO DATA(lo_exception) FROM *.\nDATA: lo_statement TYPE REF TO if_sql_statement.\n\nCREATE OBJECT lo_statement TYPE sql_statement\n  EXPORTING\n    statement = 'DELETE FROM ' && p_table && ' WHERE ' && p_conditions.\n\nPERFORM execute_statement USING lo_statement.\n\nENDFUNCTION.\n"
    },
    {
        "instruction": "Generate a random number between 1 and 10, inclusive.",
        "input": "",
        "output": "import random\n\nrandom_num = random.randint(1, 10)\nprint(random_num)",
        "abap": "DATA: lv_random_num TYPE i.\n\nlv_random_num = cl_abap_random=>create_unseeded( )->value(\n  lower = 1\n  upper = 10 ).\n\nWRITE: / lv_random_num.\n"
    },
    {
        "instruction": "Improve the following React component to render a link with the text \"Visit us Here\".",
        "input": "",
        "output": "import React from 'react'; \n\nclass Link extends React.Component { \n\trender() { \n\t\treturn ( \n\t\t\t<div> \n\t\t\t\t<a href=\"#\">Visit us Here</a> \n\t\t\t</div> \n\t\t); \n\t} \n} \nexport default Link;",
        "abap": "REPORT zlink.\n\nCLASS lcl_link DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_rap_component_model_i18n.\n    METHODS:\n      render\n        IMPORTING\n          io_controller TYPE REF TO cl_basic_controller OPTIONAL\n        RETURNING\n          VALUE(ri_return) TYPE REF TO if_ooad_component_output.\nENDCLASS.\n\nCLASS lcl_link IMPLEMENTATION.\n  METHOD render.\n    ri_return = new cl_aware_element(\n      \"html:div\" => NEW cl_aware_element(\n        \"html:a\" => NEW cl_aware_attribute(\n          text = 'Visit us Here'\n          href = '#' ) ) ).\n\n    RETURN.\n  ENDMETHOD.\nENDCLASS.\n\nDATA:\n  li_link TYPE REF TO lcl_link.\n\nCREATE OBJECT li_link\n  EXPORTING\n    io_controller = new cl_basic_controller( ).\n\nli_link->render( IMPORTING io_controller = li_link->controller RETURNING ri_return = DATA(lv_html) ).\n"
    },
    {
        "instruction": "Generate a list of 10 random capital letters.",
        "input": "",
        "output": "['X', 'Z', 'J', 'G', 'M', 'B', 'Y', 'Q', 'C', 'T']",
        "abap": "DATA: lt_letters TYPE STANDARD TABLE OF string,\n      lv_letter  TYPE string.\n\nlt_letters = VALUE #(\n  'X' 'Z' 'J' 'G' 'M' 'B' 'Y' 'Q' 'C' 'T'\n).\n\n\" Usage example:\nLOOP AT lt_letters INTO lv_letter.\n  WRITE: / lv_letter.\nENDLOOP.\n"
    },
    {
        "instruction": "Create a Ruby code that prints out the median of a given array of numbers.",
        "input": "nums = [1, 7, 3, 6]",
        "output": "nums = [1, 7, 3, 6]\nsorted_nums = nums.sort\n\n# Calculation of median \nif sorted_nums.length % 2 == 0\n  mid_index = sorted_nums.length/2\n  median = (sorted_nums[mid_index] + sorted_nums[mid_index - 1])/2.to_f\nelse\n  mid_index = sorted_nums.length/2\n  median = sorted_nums[mid_index]\nend\n\nputs median",
        "abap": "DATA: lv_nums TYPE STANDARD TABLE OF i,\n      lv_median TYPE f.\n\n\" Define a table containing the numbers\nlv_nums = VALUE #( ( 1 ) ( 7 ) ( 3 ) ( 6 ) ).\n\n\" Sort the table in ascending order\nSORT lv_nums.\n\n\" Determine if the number of elements is even or odd\nIF sy-tabix MOD 2 <> 0.\n  \" If odd, median is the middle element\n  lv_median = lv_nums[ sy-tabix / 2 ].\nELSE.\n  \" If even, median is the average of the two middle elements\n  lv_median = ( lv_nums[ sy-tabix / 2 - 1 ] + lv_nums[ sy-tabix / 2 ] ) / 2.\nENDIF.\n\n\" Output the median\nWRITE: lv_median.\n"
    },
    {
        "instruction": "Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.",
        "input": "def factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1)",
        "output": "def factorial(n):\n  if n < 0:\n    return \"Invalid input!\"\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)",
        "abap": "CLASS lcl_factorial DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      factorial IMPORTING\n        p_n TYPE i\n        RETURNING\n          VALUE(rv_result) TYPE f.\nENDCLASS.\n\nCLASS lcl_factorial IMPLEMENTATION.\n  METHOD factorial.\n    IF p_n < 0.\n      rv_result = 'Invalid input!'.\n    ELSEIF p_n = 0.\n      rv_result = 1.\n    ELSE.\n      DATA: lv_factor TYPE i,\n            lv_total TYPE f.\n      DO 100 TIMES.\n        lv_factor = p_n MOD 10.\n        lv_total = ( lv_factor * lv_total ).\n        p_n = p_n DIV 10.\n        IF p_n = 0 OR lv_factor < 1.\n          EXIT.\n        ENDIF.\n      ENDDO.\n      rv_result = lv_total.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a JavaScript function to check if an array contains a specific element.",
        "input": "var arr = [1,2,3,4];",
        "output": "function contains(arr, element) {\n  return arr.indexOf(element) > -1;\n}\n\nconsole.log(contains(arr, 2)); //true",
        "abap": "DATA: lv_arr TYPE STANDARD TABLE OF i,\n      lv_element TYPE i.\n\nlv_arr = VALUE #( ( 1 ) ( 2 ) ( 3 ) ).\n\nlv_index = find_all_occurrences( EXPORTING\n                                    it_table     = lv_arr\n                                    iv_value      = 2\n                              CHANGING\n                                    cv_found_count = DATA(lv_found_count)\n                              ).\n\" Check if an occurrence of the value has been found\nIF lv_found_count > 0.\n  WRITE: / 'true'.\nELSE.\n  WRITE: / 'false'.\nENDIF.\n\nFORM find_all_occurrences USING it_table TYPE STANDARD TABLE OF i\n                          iv_value TYPE i\n                        CHANGING cv_found_count TYPE i.\n\n  DO.\n    READ TABLE it_table INTO DATA(lv_line) WITH KEY value = iv_value.\n    IF sy-subrc <> 0.\n      cv_found_count = 0.\n      EXIT.\n    ELSE.\n      cv_found_count = cv_found_count + 1.\n    ENDIF.\n  ENDDO.\n\nENDFORM.\n"
    },
    {
        "instruction": "Augment the following HTML structure to include a link to a CSS document.",
        "input": "<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>",
        "output": "<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>",
        "abap": "REPORT zweb_page.\n\nDATA: lv_html TYPE string.\n\nlv_html = '<html>'.\nlv_html = lv_html && '<meta charset=\"UTF-8\">'.\nlv_html = lv_html && '<title>My Webpage</title>'.\nlv_html = lv_html && '<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">'.\nlv_html = lv_html && '</html>'.\n\nWRITE: / lv_html.\n"
    },
    {
        "instruction": "Convert the following SQL query to MongoDB.",
        "input": "SELECT * FROM Customers WHERE age > 30",
        "output": "db.customers.find({\"age\" : {\"$gt\": 30}})",
        "abap": "DATA: ls_customer TYPE ty_customer.\nDATA: lt_customers TYPE STANDARD TABLE OF ty_customer.\n\nSELECT *\n  FROM customers AS c\n INTO CORRESPONDING FIELDS OF TABLE lt_customers\n WHERE age > 30.\n\n\" or alternatively using a class-based approach with an internal table as output parameter\n\nCLASS lcl_database DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_customers_by_age\n        IMPORTING\n          VALUE(iv_max_age) TYPE i\n        EXPORTING\n          VALUE(ER_CUSTOMERS) TYPE STANDARD TABLE OF ty_customer.\n\nENDCLASS.\n\nCLASS lcl_database IMPLEMENTATION.\n  METHOD find_customers_by_age.\n    SELECT *\n      FROM customers AS c\n      INTO CORRESPONDING FIELDS OF TABLE ER_CUSTOMERS\n      WHERE age > iv_max_age.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lo_db TYPE REF TO lcl_database.\n\nCREATE OBJECT lo_db.\nlo_db->find_customers_by_age(\n  EXPORTING\n    iv_max_age = 30\n  IMPORTING\n    ER_CUSTOMERS = lt_customers ).\n"
    },
    {
        "instruction": "Write pseudocode to find the average of two numbers.",
        "input": "",
        "output": "set total to 0\nset count to 0\n\nwhile numbers left to process\n    add next number to total\n    increment count\nend while\n\ncalculate average by dividing total by count\n\nprint average",
        "abap": "DATA: lv_total TYPE i,\n      lv_count TYPE i.\n\nlv_total = 0.\nlv_count = 0.\n\nWHILE <numbers_left_to_process>.\n  lv_total = lv_total + <next_number>.\n  lv_count = lv_count + 1.\nENDWHILE.\n\nDATA: lv_average TYPE f.\nlv_average = lv_total / lv_count.\n\nWRITE: lv_average.\n"
    },
    {
        "instruction": "Create a HTML page that displays the words \"Hello, World!\" in different colors.",
        "input": "",
        "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World Page</title>\n    <style>\n        h1 {\n            color: red;\n        }\n\n        h2 {\n            color: blue;\n        }\n\n        h3 {\n            color: green;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <h2>Hello, World!</h2>\n    <h3>Hello, World!</h3>\n</body>\n</html>",
        "abap": "REPORT zhello_world.\n\nDATA: lv_html TYPE string.\n\nlv_html = '<html>'.\nlv_html = lv_html && '<head>'.\nlv_html = lv_html && '<title>Hello World Page</title>'.\nlv_html = lv_html && '</head>'.\nlv_html = lv_html && '<body>'.\nlv_html = lv_html && '<h1 style=\"color: red;\">Hello, World!</h1>'.\nlv_html = lv_html && '<h2 style=\"color: blue;\">Hello, World!</h2>'.\nlv_html = lv_html && '<h3 style=\"color: green;\">Hello, World!</h3>'.\nlv_html = lv_html && '</body>'.\nlv_html = lv_html && '</html>'.\n\nWRITE : lv_html.\n"
    },
    {
        "instruction": "Build a deep learning model in Python to predict the stock price of a given company.",
        "input": "",
        "output": "# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import data\ndata = pd.read_csv('stock_data.csv')\n\n# preprocess data\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\n# split into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(units=6, activation='relu', input_dim=4))\nmodel.add(Dense(units=4, activation='sigmoid'))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])\nmodel.fit(X_train, y_train, epochs=20, batch_size=10)\n\n# test the model\ny_pred = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)",
        "abap": "REPORT z_stock_data_analysis.\n\nDATA: lr_dataset TYPE REF TO cl_sql_query_result_set,\n       lt_stock_data TYPE STANDARD TABLE OF i.\n\nSELECT * FROM 'stock_data' INTO CORRESPONDING FIELDS OF TABLE lt_stock_data.\n\nTYPES: BEGIN OF ty_features,\n         feature1 TYPE f DECIMAL,\n         feature2 TYPE f DECIMAL,\n         feature3 TYPE f DECIMAL,\n         feature4 TYPE f DECIMAL,\n       END OF ty_features.\nTYPES: BEGIN OF ty_target,\n          target TYPE f DECIMAL,\n        END OF ty_target.\n\nDATA: lt_X TYPE STANDARD TABLE OF ty_features,\n      lt_y TYPE STANDARD TABLE OF ty_target.\n\nLOOP AT lt_stock_data INTO DATA(ls_stock_data).\n  APPEND ls_stock_data-feature1 TO lt_X.\n  APPEND ls_stock_data-feature2 TO lt_X.\n  APPEND ls_stock_data-feature3 TO lt_X.\n  APPEND ls_stock_data-feature4 TO lt_X.\n  APPEND ls_stock_data-target TO lt_y.\nENDLOOP.\n\n\" Feature scaling\nDATA: lv_mean TYPE f DECIMAL,\n      lv_stddev TYPE f DECIMAL.\n\nLOOP AT lt_X INTO DATA(ls_feature).\n  CLEAR: ls_feature-mean, ls_feature-stddev.\n  ls_feature-mean = ( sy-tcnum / sy-dbcnt ) * 1000000.\n  SELECT mean( feature ) INTO ls_feature-mean FROM ( clsql_select_stmt  \" features\n        FOR ALL ENTRIES IN @lt_stock_data ).\n    IF sy-subrc <> 0.\n      MESSAGE 'Error selecting mean' TYPE 'E'.\n    ENDIF.\n\n  CLEAR: ls_feature-stddev, ls_stddev.\n  ls_feature-stddev = ( sy-tcnum / sy-dbcnt ) * 1000000.\n  SELECT stddev( feature ) INTO ls_feature-stddev FROM ( clsql_select_stmt  \" features\n        FOR ALL ENTRIES IN @lt_stock_data ).\n    IF sy-subrc <> 0.\n      MESSAGE 'Error selecting std' TYPE 'E'.\n    ENDIF.\n\n  MODIFY lt_X INDEX sy-tabix FROM ls_feature.\nENDLOOP.\n\n\" Split into training set and test set\nDATA: lt_train_set TYPE STANDARD TABLE OF ty_features,\n      lt_test_set TYPE STANDARD TABLE OF ty_features,\n      lt_y_train TYPE STANDARD TABLE OF ty_target,\n      lt_y_test TYPE STANDARD TABLE OF ty_target.\n\nlt_train_set[] = lt_X[ 1 : sy-tcnum * ( 20 / 100 ) ].\nlt_test_set[] = lt_X[ sy-tcnum * ( 80 / 100 ) : ].\nlt_y_train[] = lt_y[ 1 : sy-tcnum * ( 20 / 100 ) ].\nlt_y_test[] = lt_y[ sy-tcnum * ( 80 / 100 ) : ].\n\n\" Build the model\nDATA: lo_model TYPE REF TO cl_simple_neural_network,\n      lr_dense_layer_1 TYPE REF TO cl_nnet_density_output_layer,\n      lr_dense_layer_2 TYPE REF TO cl_nnet_density_output_layer,\n      lr_output_layer TYPE REF TO cl_nnet_linear_output_layer.\n\nCREATE OBJECT lo_model.\nSET PROPERTY OF lo_model 'name' WITH 'stock_data'.\n\nCREATE OBJECT: lr_dense_layer_1,\n  lr_dense_layer_2,\n  lr_output_layer.\n\nSET PROPERTY OF lr_dense_layer_1 'input_dim' WITH 4.\nSET PROPERTY OF lr_dense_layer_1 'output_dim' WITH 6.\nSET PROPERTY OF lr_dense_layer_1 'activation_function' WITH 'relu'.\n\nSET PROPERTY OF lr_dense_layer_2 'input_dim' WITH 6.\nSET PROPERTY OF lr_dense_layer_2 'output_dim' WITH 4.\nSET PROPERTY OF lr_dense_layer_2 'activation_function' WITH 'sigmoid'.\n\nSET PROPERTY OF lr_output_layer 'input_dim' WITH 4.\nSET PROPERTY OF lr_output_layer 'output_dim' WITH 1.\nSET PROPERTY OF lr_output_layer 'activation_function' WITH 'linear'.\n\nCALL METHOD of lo_model 'add_layer' EXPORTING layer = lr_dense_layer_1.\nCALL METHOD of lo_model 'add_layer' EXPORTING layer = lr_dense_layer_2.\nCALL METHOD of lo_model 'add_layer' EXPORTING layer = lr_output_layer.\n\nlo_model->set_optimizer( new cl_nnet_adam() ).\nlo_model->compile_model( ).\n\n\" Train the model\nDATA: lt_train_results TYPE STANDARD TABLE OF ty_train_result,\n      lv_loss TYPE f DECIMAL.\n\nCREATE OBJECT lo_model.\nCALL METHOD of lo_model 'train' EXPORTING\n  features        = lt_X\n  targets         = lt_y\n  test_features   = lt_test_set\n  test_targets    = lt_y_test\n  batch_size      = 10\n  max_epochs      = 20\n  evaluation_metric = cl_nnet_mean_squared_error=>create( )\n  training_results = lt_train_results\n  loss             = lv_loss.\n\n\" Test the model\nDATA: lr_simple_neural_network TYPE REF TO cl_simple_neural_network,\n      lt_test_results TYPE STANDARD TABLE OF ty_test_result.\n\nCREATE OBJECT lo_model.\nCALL METHOD of lo_model 'predict' EXPORTING features = lt_test_set IMPORTING result = lt_test_results.\n\n\" Evaluate the model\nDATA: lv_accuracy TYPE f DECIMAL,\n      lv_r2_score TYPE f DECIMAL.\n\nlo_model->calculate_metrics( importing metrics = lt_train_results CHANGING accuracy = lv_accuracy r2_score = lv_r2_score ).\n\nWRITE 'R-squared Score: ', lv_r2_score.\n"
    },
    {
        "instruction": "Write the SQL query to delete all records from the table 'Customer'",
        "input": "",
        "output": "DELETE FROM Customer;",
        "abap": "DATA: lv_sql TYPE string.\n\nlv_sql = 'DELETE FROM Customer'.\n\nCALL FUNCTION 'EXECUTE_FUNCTION_MODULE'\n  EXPORTING\n    function_name     = 'SQLExecDirect'\n  IMPORTING\n    result            =\n  EXCEPTIONS\n    OTHERS            = 1\n  .\n"
    },
    {
        "instruction": "Write a CSS selector to apply a font-size of 16px to every element with a class of \"heading\".",
        "input": "",
        "output": ".heading {\n  font-size: 16px;\n}",
        "abap": "DATA: ls_style TYPE tytyy-typography-styling.\n\nls_style-font_size = 16.\n"
    },
    {
        "instruction": "Write a query in SQL to select all the rows from table Books.",
        "input": "",
        "output": "SELECT * FROM Books;",
        "abap": "REPORT zbooks.\n\nDATA: lv_books TYPE STANDARD TABLE OF ty_books.\n\nTYPES: BEGIN OF TYPE ty_books,\n         title    TYPE string,\n         author   TYPE string,\n         publisher TYPE string,\n       END OF TYPE ty_books.\n\nSELECT * FROM Books INTO CORRESPONDING FIELDS OF lv_books.\n"
    },
    {
        "instruction": "Using the input string, write a code to replace the \"!\" with a \"?\".",
        "input": "string = \"Hello World!\"",
        "output": "string = \"Hello World!\"\nstring = string.replace(\"!\", \"?\")\nprint(string)",
        "abap": "DATA: lv_string TYPE string.\n\nlv_string = 'Hello World!'.\n\nlv_string = lv_string-replace( val1 = '!'. val2 = '?' ).\n\nWRITE: lv_string.\n"
    },
    {
        "instruction": "Create a program that extracts a given pattern from a given string",
        "input": "text = \"Hello world!\", pattern = \"l\"",
        "output": "\"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\n\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))",
        "abap": "CLASS lcl_extract_pattern DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      extract_pattern\n        IMPORTING\n          iv_text TYPE string\n          iv_pattern TYPE string\n        EXPORTING\n          ev_indices TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS lcl_extract_pattern IMPLEMENTATION.\n  METHOD extract_pattern.\n    DATA: lv_length TYPE i,\n          lt_indices TYPE STANDARD TABLE OF i.\n\n    lv_length = xstrlen( iv_text ).\n\n    DO lv_length TIMES.\n      DATA(lv_index) = sy-index - 1.\n      IF iv_text+lv_index(1) CA iv_pattern.\n        INSERT lv_index INTO TABLE lt_indices.\n      ENDIF.\n    ENDDO.\n\n    ev_indices[] = lt_indices.\n  ENDMETHOD.\n\nENDCLASS.\n\nDATA: lt_result TYPE STANDARD TABLE OF i,\n      ls_result LIKE LINE OF lt_result.\n\nlt_result = lcl_extract_pattern=>extract_pattern(\n  iv_text  = 'Hello world!'\n  iv_pattern = 'l' ).\n\nLOOP AT lt_result INTO ls_result.\n  WRITE: / ls_result.\nENDLOOP.\n"
    },
    {
        "instruction": "Write a Python script to find the common elements in two given lists.",
        "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6]",
        "output": "def common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele",
        "abap": "REPORT zcommon_element.\n\nCLASS lcl_common_element DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      common_elements\n        IMPORTING\n          it_list1  TYPE ti_tab  \" List 1\n          it_list2  TYPE ti_tab  \" List 2\n        RETURNING\n          VALUE(rt_result) TYPE STANDARD TABLE OF object.  \" Resulting list of common elements\n\nENDCLASS.\n\nCLASS lcl_common_element IMPLEMENTATION.\n  METHOD common_elements.\n    DATA: lv_key TYPE string, \" Temporary storage for keys\n         lt_result TYPE STANDARD TABLE OF object. \" Resulting list of common elements\n\n    SORT it_list1 BY key ASCENDING.\n    SORT it_list2 BY key ASCENDING.\n\n    LOOP AT it_list1 INTO DATA(ls_item).\n      REFERENCE( lr_current ) = ls_item-key.\n      READ TABLE it_list2 INTO ls_item WITH KEY key = lr_current.\n      IF sy-subrc = 0.\n        APPEND ls_item TO lt_result.\n      ENDIF.\n    ENDLOOP.\n\n    rt_result = lt_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Design a program to find the occurrence of a given character in a given string.",
        "input": "Given string: \"Hello World!\"\nCharacter to find: o",
        "output": "def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count",
        "abap": "FORM occurrence_count\n  USING\n    p_str TYPE string\n    p_char TYPE c.\n\nDATA: l_count TYPE i.\n\nl_count = 0.\nDO.\n  IF p_str IS INITIAL.\n    EXIT.\n  ENDIF.\n  READ TEXT OF p_str INTO DATA(l_char).\n  IF l_char EQ p_char.\n    ADD 1 TO l_count.\n  ENDIF.\nENDDO.\n\nRETURN.\n"
    },
    {
        "instruction": "Create a function in Java to convert a list of strings to a 2D array.",
        "input": "list: [\"aa\", \"bb\", \"cc\"]",
        "output": "public static String[][] convertTo2DArray(List<String> strings) {\n    int n = strings.size();\n    String[][] array = new String[n][1];\n    for (int i = 0; i < n; i++) {\n        array[i][0] = strings.get(i);\n    }\n    return array;\n    \n}",
        "abap": "CLASS lcl_array_converter DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      convert_to_2darray\n        IMPORTING\n          iv_strings TYPE i\n          it_strings TYPE string_table\n        EXPORTING\n          et_result   TYPE STANDARD TABLE OF string\n          eo_exception TYPE REF TO cx_sy_itab_value_invalid.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_array_converter IMPLEMENTATION.\n  METHOD convert_to_2darray.\n    DATA: lv_n TYPE i,\n          lt_result LIKE lines et_result,\n          ls_string TYPE string.\n\n    IF it_strings IS INITIAL OR iv_strings <> lines( it_strings ).\n      RAISE EXCEPTION TYPE cx_sy_itab_value_invalid\n        EXPORTING\n          textid = 'CX_SY_ITAB_VALUE_INVALID'\n          fieldname = 'it_strings' .\n    ENDIF.\n\n    lv_n = lines( it_strings ).\n\n    LOOP AT it_strings INTO ls_string.\n      APPEND ls_string TO lt_result.\n    ENDLOOP.\n\n    et_result = VALUE #( ( lt_result ) ).\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a code snippet for generating a unique identifier for a particular object.",
        "input": "",
        "output": "import uuid\n\ndef generate_id(object): \n  return uuid.uuid4()",
        "abap": "TYPES: ty_id TYPE string.\n\nCLASS-lcl_generator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      generate_id IMPORTING id_object TYPE any\n                   RETURNING VALUE(id) TYPE ty_id.\nENDCLASS.\n\nCLASS-lcl_generator IMPLEMENTATION.\n  METHOD generate_id.\n    DATA: lv_uuid TYPE x length 16.\n    CALL FUNCTION 'UUID_TO_CHAR'\n      EXPORTING\n        i_uuid       = cl_abap_uuid=>if_uuid-static->create( )\n      IMPORTING\n        e_char_uuid  = lv_uuid.\n    id = lv_uuid.\n  ENDMETHOD.\nENDCLASS.\n\n\" Example usage:\nDATA: lv_id TYPE ty_id.\nlv_id = lcl_generator=>generate_id( 'some object' ).\nWRITE: / lv_id.\n"
    },
    {
        "instruction": "Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not.",
        "input": "",
        "output": "def is_palindrome(str):\n    \"\"\"\n    Checks if the given input string is a palindrome or not.\n    \"\"\"\n    return str == str[::-1]",
        "abap": "CLASS lcl_palindrome DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_palindrome\n        IMPORTING\n          iv_string TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_palindrome IMPLEMENTATION.\n  METHOD is_palindrome.\n    DATA: lv_reversed TYPE string,\n          lv_length   TYPE i.\n\n    \" Reverse the input string\n    lv_length = strlen( iv_string ).\n    DO lv_length TIMES.\n      MODIFY iv_string FROM iv_string+lvlv_length(1) TO SPACE.\n      lv_reversed = iv_string+lv_length(lv_length).\n      TRANSPOSE iv_string.\n    ENDDO.\n\n    \" Check if the original string is equal to its reverse\n    rv_result = abap_false.\n    IF strlen( iv_string ) = strlen( lv_reversed ).\n      TRANSLATE lv_reversed TO UPPER CASE.\n      TRANSLATE iv_string TO UPPER CASE.\n      IF iv_string CA lv_reversed.\n        rv_result = abap_true.\n      ENDIF.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Read the given code block and debug it.",
        "input": "def main():\n print(\"Hey I'm here\")\n if n == 0: \n  print(\"Hey I'm there\")\nmain()",
        "output": "Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()",
        "abap": "REPORT ztest.\n\nDATA: lv_n TYPE i VALUE 0.\n\nCLASS lcl_main DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      main IMPORTING\n                  VALUE(iv_params) TYPE string.\nENDCLASS.\n\nCLASS lcl_main IMPLEMENTATION.\n  METHOD main.\n    WRITE:/ 'Hey I''m here'.\n    DATA: lv_n TYPE i VALUE iv_params.\n    IF lv_n EQ 0.\n      WRITE:/ 'Hey I''m there'.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n\nINITIALIZATION.\n  lcl_main=>main( '' ).\n\nSTART-OF-SELECTION.\n  lcl_main=>main( '' ).\n"
    },
    {
        "instruction": "Generate a random string with 10 characters.",
        "input": "",
        "output": "let randomString = Math.random().toString(36).substring(2, 12);",
        "abap": "DATA: lv_random_string TYPE string.\n\nlv_random_string = cl_abap_char_utilities=>random( length = 10 ).\n\n\" Optional: you can trim the leading zeros like this:\n\" lv_random_string = lv_random_string( val = lv_random_string ).\n"
    },
    {
        "instruction": "Create some code that iterates through a list and prints out each element.",
        "input": "my_list = [1, 4, 6, 8]",
        "output": "for item in my_list:\n    print(item)",
        "abap": "DATA: it_list TYPE STANDARD TABLE OF string.\n\n\" Assuming you have a list of strings stored in it_list\nLOOP AT it_list INTO DATA(lv_item).\n  WRITE lv_item.\nENDLOOP.\n"
    },
    {
        "instruction": "Generate a regular expression to match a valid email address.",
        "input": "",
        "output": "/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/",
        "abap": "DATA: lv_email TYPE string.\n\nlv_email = 'your_email@example.com'.\n\nCHECK lv_email MATCHES '/^[a-zA-Z0-9_\\-.@]+@[a-zA-Z0-9_\\-.]+\\.[a-zA-Z]{2,5}$/'.\nIF sy-subrc <> 0.\n  WRITE: / 'Invalid email address'.\nELSE.\n  WRITE: / 'Valid email address'.\nENDIF.\n"
    },
    {
        "instruction": "Identify a potential bug in the following code.",
        "input": "def add(a, b):\n    c = a + b\n    return c",
        "output": "A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition.",
        "abap": "REPORT ztest.\n\nTYPES: BEGIN OF ty_data,\n         a TYPE p DECIMAL DIGITS 16,\n         b TYPE p DECIMAL DIGITS 16,\n       END OF ty_data.\nDATA: ls_data TYPE ty_data.\nPARAMETERS: p_a TYPE f LENGTH 10 OBLIGATORY DEFAULT '5',\n            p_b TYPE f LENGTH 10 OBLIGATORY DEFAULT '3'.\n\nls_data-a = p_a.\nls_data-b = p_b.\n\nDATA: lv_c TYPE f VALUE '0'.\nDATA: ls_new TYPE ty_data.\nls_new-a = ls_data-a + ls_data-b.\nlv_c = ls_data-a + ls_data-b.\n\nWRITE:/ ls_data-a.\nWRITE:/ ls_data-b.\nWRITE:/ ls_new-a.\n"
    },
    {
        "instruction": "Using the following code, clean up the bugs and make sure the output functions correctly.",
        "input": "def example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"])",
        "output": "def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])",
        "abap": "CLASS z_example_class DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      example_func\n        IMPORTING\n          !lst TYPE STANDARD TABLE OF any\n        EXPORTING\n          !output_lst TYPE STANDARD TABLE OF i.\n\nENDCLASS.\n\nCLASS z_example_class IMPLEMENTATION.\n  METHOD example_func.\n    DATA: lr_output TYPE STANDARD TABLE OF i,\n           li_element TYPE i,\n           lv_tmp TYPE string.\n\n    LOOP AT lst INTO DATA(lv_element).\n      IF lv_element TYPE i.\n        ADD 5 TO lv_element ASSIGNING li_element.\n        APPEND li_element TO output_lst.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lr_result TYPE STANDARD TABLE OF i,\n       lt_input TYPE STANDARD TABLE OF any.\n\nlt_input = VALUE #( ( 1 ) ( 2 ) (\"hello\") ).\n\nCALL METHOD z_example_class=>example_func\n  EXPORTING\n    lst         = lt_input\n  IMPORTING\n    output_lst  = lr_result.\n\nWRITE: / \"Example input:\", lt_input.\nWRITE: / \"Result:\", lr_result.\n"
    },
    {
        "instruction": "Write an SQL query to calculate the average salary of all employees in a table, rounded to the nearest integer.",
        "input": "",
        "output": "SELECT ROUND(AVG(salary))\nFROM employees;",
        "abap": "DATA: lv_avg_salary TYPE f.\n\nSELECT AVG salary FROM employees INTO CORRESPONDING FIELDS OF @DATA(lt_salaries).\nlv_avg_salary = lt_salaries[ 1 ].\nWRITE: / |{ lv_avg_salary }|.\n\n\" or with ROUND function\nlv_avg_salary = ROUND( ( SELECT AVG salary FROM employees ) ).\nWRITE: / |{ lv_avg_salary }|.\n"
    },
    {
        "instruction": "Write a JavaScript code to add two numbers using a prompt.",
        "input": "",
        "output": "let a = prompt('Enter the first number:');\nlet b = prompt('Enter the second number:');\nlet sum = parseInt(a) + parseInt(b);\nconsole.log(sum);",
        "abap": "DATA: lv_first_num TYPE i,\n       lv_second_num TYPE i,\n       lv_sum TYPE i.\n\nlv_first_num = cl_input=>request( 'Enter the first number:' ).\nlv_second_num = cl_input=>request( 'Enter the second number:' ).\n\n\" Handle potential errors when converting input to numbers\nIF sy-subrc <> 0.\n  MESSAGE id 'E' type 'E' number sy-msgno\n      message v1 sy-msgv1 v2 sy-msgv2\n      v3 sy-msgv3 v4 sy-msgv4-raalign 'C'.\nELSE.\n  lv_sum = lv_first_num + lv_second_num.\n\n  WRITE: / lv_sum.\nENDIF.\n"
    },
    {
        "instruction": "Given an array, write a program that checks if any two numbers sum to 0.",
        "input": "arr = [-3, -2, 1, 2, 3]",
        "output": "def check_if_sum_zero(arr): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] + arr[j] == 0): \n                return True\n    return False\n\nprint(check_if_sum_zero([-3, -2, 1, 2, 3]))",
        "abap": "CLASS lcl_check_if_sum_zero DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      check_if_sum_zero IMPORTING\n        it_arr TYPE i4t_table\n      RETURNING\n        VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_check_if_sum_zero IMPLEMENTATION.\n  METHOD check_if_sum_zero.\n    DATA: ls_iter1 LIKE LINE OF it_arr,\n          ls_iter2 LIKE LINE OF it_arr.\n\n    LOOP AT it_arr INTO ls_iter1.\n      LOOP AT it_arr FROM sy-tabix + 1 INTO ls_iter2.\n        IF ls_iter1 + ls_iter2 = 0.\n          rv_result = abap_true.\n          RETURN.\n        ENDIF.\n      ENDLOOP.\n    ENDLOOP.\n\n    rv_result = abap_false.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: lt_arr TYPE i4t_table,\n      lv_result TYPE abap_bool.\n\nlt_arr = VALUE #( -3 -2 1 2 3 ).\n\nlv_result = lcl_check_if_sum_zero=>check_if_sum_zero( it_arr = lt_arr ).\nWRITE: / lv_result.\n"
    },
    {
        "instruction": "Write an SQL query to select the names of all employees from the table 'employees' with an age greater than 25.",
        "input": "",
        "output": "SELECT name FROM employees WHERE age > 25;",
        "abap": "TYPES: BEGIN OF ty_employee,\n          name TYPE string,\n        END OF ty_employee.\n\nDATA: lt_employees TYPE STANDARD TABLE OF ty_employee.\n\nSELECT name INTO CORRESPONDING FIELDS OF TABLE lt_employees\n  FROM employees\n  WHERE age > 25.\n"
    },
    {
        "instruction": "Sort a list of 5 numbers in descending order.",
        "input": "[123, 45, 287, 398, 135]",
        "output": "[398, 287, 135, 123, 45]",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\nAPPEND 398 TO lv_array.\nAPPEND 287 TO lv_array.\nAPPEND 135 TO lv_array.\nAPPEND 123 TO lv_array.\nAPPEND 45 TO lv_array.\n\nWRITE: lv_array.\n"
    },
    {
        "instruction": "Generate a random string of 12 characters using Python.",
        "input": "",
        "output": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))",
        "abap": "DATA: lv_random_string TYPE string.\n\nlv_random_string = cl_abap_char_utilities=>random_create( 12 ).\n\nwrite: / lv_random_string.\n"
    },
    {
        "instruction": "Write an SQL query to display all the employee names in the 'students' table.",
        "input": "",
        "output": "SELECT name FROM students;",
        "abap": "REPORT zstudents.\n\nDATA: lt_students TYPE STANDARD TABLE OF student,\n      ls_student  TYPE student.\n\nSELECT name FROM students INTO CORRESPONDING FIELDS OF TABLE lt_students.\nLOOP AT lt_students INTO ls_student.\nWRITE: / ls_student-name.\nENDLOOP.\n"
    },
    {
        "instruction": "Develop a function to swap the position of two elements in an array.",
        "input": "",
        "output": "def swap_elements(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr",
        "abap": "CLASS lcl_swap DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      swap_elements\n        IMPORTING\n          it_arr TYPE STANDARD TABLE OF i\n          ii TYPE i\n          ij TYPE i\n        EXPORTING\n          et_arr TYPE STANDARD TABLE OF i .\nENDCLASS.\n\nCLASS lcl_swap IMPLEMENTATION.\n  METHOD swap_elements.\n    DATA: li1 TYPE i,\n          li2 TYPE i.\n\n    READ TABLE it_arr INDEX ii INTO li1.\n    READ TABLE it_arr INDEX ij INTO li2.\n\n    IF ii < lines( it_arr ) AND ij < lines( it_arr ).\n      MODIFY TABLE it_arr FROM ( li2 ) INDEX ii.\n      MODIFY TABLE it_arr FROM ( li1 ) INDEX ij.\n    ENDIF.\n\n    et_arr = it_arr.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function in Python for printing a given 2D array.",
        "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]",
        "output": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)",
        "abap": "REPORT ztest.\n\nCLASS lcl_print_2d_array DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      print_2d_array TYPE REF TO data.\nENDCLASS.\n\nCLASS lcl_print_2d_array IMPLEMENTATION.\n  METHOD print_2d_array.\n    DATA: lv_row LIKE LINE OF itab,\n          itab TYPE TABLE OF string.\n\n    LOOP AT itab INTO lv_row.\n      LOOP AT lv_row INTO DATA(lv_element).\n        WRITE: lv_element, space.\n      ENDLOOP.\n      WRITE:/.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n\nDATA: arr TYPE STANDARD TABLE OF string VALUE '1' \" first row\n                        VALUE '2'.          \" second row\n\nCALL METHOD lcl_print_2d_array=>print_2d_array(\n  EXPORTING\n    itab = arr ).\n"
    },
    {
        "instruction": "Write a Python program to remove all instances of a given value from a given list.",
        "input": "[1, 2, 3, 2, 3, 4], 2",
        "output": "def remove_value(nums, val):\n    res = []\n    for num in nums:\n        if num != val:\n            res.append(num)\n    return res",
        "abap": "CLASS lcl_remove_value DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      remove_value\n        IMPORTING\n          iv_nums TYPE STANDARD TABLE OF i\n          iv_val  TYPE i\n        EXPORTING\n          et_res  TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS lcl_remove_value IMPLEMENTATION.\n  METHOD remove_value.\n    DATA: lt_result TYPE STANDARD TABLE OF i.\n\n    LOOP AT iv_nums INTO DATA(ls_num).\n      IF ls_num <> iv_val.\n        APPEND ls_num TO lt_result.\n      ENDIF.\n    ENDLOOP.\n\n    et_res = lt_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a method that prints out all the prime numbers between 1 and 100.",
        "input": "",
        "output": "public static void printPrimeNumbers(){ \n    System.out.println(\"Prime numbers between 1 to 100 are : \"); \n    for (int i = 1; i <= 100; i++) { \n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                isPrime = false;\n                break; \n            } \n        } \n        if (isPrime) \n            System.out.print(i + \" \"); \n    } \n} \n\n// Output:\n// Prime numbers between 1 to 100 are : \n// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97",
        "abap": "REPORT zprime_numbers.\n\nDATA: lv_n TYPE i,\n      lt_primes TYPE STANDARD TABLE OF i.\n\nSTART-OF-SELECTION.\n  WRITE: / 'Prime numbers between 1 to 100 are :'.\n  DO 100 TIMES.\n    DATA(lv_is_prime) = abap_true.\n    DO 99 TIMES.\n      IF ( lv_n MOD sy-index - 1 ) EQ 0.\n        lv_is_prime = abap_false.\n        EXIT.\n      ENDIF.\n    ENDDO.\n    IF lv_is_prime = abap_true.\n      APPEND lv_n TO lt_primes.\n    ENDIF.\n    lv_n = sy-index.\n  ENDDO.\n\n  LOOP AT lt_primes INTO DATA(lv_prime).\n    WRITE: / lv_prime.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Design an algorithm that takes a list of strings and returns the longest string.",
        "input": "list = [\"cat\", \"dog\", \"lion\", \"bird\"]",
        "output": "def find_longest(list):\n    \"\"\"Return the longest string from a list of strings.\"\"\" \n    longest = list[0]\n    for item in list:\n        if len(item) > len(longest):\n            longest = item\n    return longest",
        "abap": "CLASS lcl_find_longest DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: find_longest\n      IMPORTING\n        !iv_list TYPE STANDARD TABLE OF string\n      RETURNING\n        VALUE(rv_longest) TYPE string.\n\nENDCLASS.\n\nCLASS lcl_find_longest IMPLEMENTATION.\n  METHOD find_longest.\n    DATA: lv_longest TYPE string.\n\n    IF iv_list IS NOT INITIAL.\n      SORT iv_list BY LENGTH DESCENDING.\n      READ TABLE iv_list INTO lv_longest INDEX 1.\n    ENDIF.\n\n    rv_longest = lv_longest.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a function to find the number of distinct states in a given matrix.",
        "input": "matrix = [[1, 0, 0],\n          [1, 0, 1],\n          [1, 1, 1]]",
        "output": "def find_num_distinct_states(matrix):\n    states = set()\n    for row in matrix:\n        state = \"\".join([str(x) for x in row])\n        states.add(state)\n    return len(states)",
        "abap": "TYPES: BEGIN OF ty_row,\n          col1 TYPE i,\n          col2 TYPE i,\n          ...\n        ENDS OF ty_row.\n\nDATA: lt_matrix TYPE STANDARD TABLE OF ty_row,\n      lv_states TYPE i,\n      lv_state  TYPE string.\n\nLOOP AT lt_matrix INTO DATA(ls_row).\n  lv_state = ls_row-col1 && ls_row-col2. \" concatenate the values of each row into a single string\n  APPEND lv_state TO DATA(lt_states).\nENDLOOP.\n\nDELETE ADJACENT DUPLICATE LINEs FROM lt_states.\n\nlv_states = lines( val = lt_states ).\n\nWRITE lv_states.\n"
    },
    {
        "instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.",
        "input": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]",
        "output": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix",
        "abap": "CLASS lcl_longest_common_prefix DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      longest_common_prefix\n        IMPORTING\n          it_dict TYPE ty_tab_of_dicts\n        RETURNING\n          VALUE(rv_prefix) TYPE string.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_longest_common_prefix IMPLEMENTATION.\n  METHOD longest_common_prefix.\n    DATA: lv_prefix TYPE string,\n          lt_keys  TYPE STANDARD TABLE OF ty_key.\n\n    IF sy-subrc <> 0 OR it_dict[] IS INITIAL.\n      RETURN.\n    ENDIF.\n\n    \" Get keys of the first dictionary\n    lt_keys = VALUE #( BASE it_dict[ 1 ]-keys ).\n\n    WHILE lv_prefix CS lt_keys[ 1 ][ 1 ] IS NOT INITIAL AND lines( it_dict ) > 0.\n      DATA(lv_char) = lt_keys[ 1 ][ 1 ].\n\n      \" Check if all dictionaries have the same character at this position\n      LOOP AT it_dict INTO DATA(ls_dict).\n        IF ls_dict-keys[ 1 ][ 1 ] <> lv_char.\n          RETURN.\n        ENDIF.\n      ENDLOOP.\n\n      \" Add character to prefix\n      lv_prefix = lv_prefix && lv_char.\n\n      \" Move to next character\n      lt_keys = VALUE #( BASE it_dict[ 1 ]-keys ).\n    ENDWHILE.\n\n    rv_prefix = lv_prefix.\n  ENDMETHOD.\nENDCLASS.\n\nTYPES:\n  BEGIN OF ty_key,\n    name TYPE string,\n  END OF ty_key,\n  tt_keys TYPE STANDARD TABLE OF ty_key.\n\nTYPES: BEGIN OF ty_dict,\n          keys TYPE tt_keys,\n        END OF ty_dict,\n        tt_dicts TYPE STANDARD TABLE OF ty_dict.\n"
    },
    {
        "instruction": "Write a database query to retrieve the names of all authors.",
        "input": "",
        "output": "SELECT name \nFROM authors;",
        "abap": "REPORT zauthor.\n\nDATA: lv_author TYPE string.\nSELECT SINGLE name INTO lv_author FROM authors.\nWRITE: / lv_author.\n"
    },
    {
        "instruction": "Write a C++ function to generate a random integer between 0 and 10.",
        "input": "",
        "output": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \nusing namespace std; \n\nint randomIntGenerator() \n{ \n   // Setting the seed \n   srand(time(0)); \n\n   // Generating random integer \n   return (rand()%11); \n}",
        "abap": "REPORT zrandom_int_generator.\n\nDATA: lv_random_int TYPE i.\n\nINITIALIZATION.\n  \" Setting the seed\n  DATA(lv_seed) = sy-datum + sy-uzeit * 1 / ( sy-uzeit * 1 ).\n  IF NOT lv_seed IS INITIAL.\n    CALL FUNCTION 'RANDOM_GET'\n      IMPORTING\n        value_random = lv_seed.\n  ENDIF.\n\nSTART-OF-SELECTION.\n  \" Generating random integer between 0 and 10\n  CALL FUNCTION 'RANDOM_INT'\n    EXPORTING\n      lower_bound = 0\n      upper_bound = 11\n    IMPORTING\n      p_value      = lv_random_int\n    EXCEPTIONS\n      error        = 1\n      OTHERS       = 2.\n  IF sy-subrc <> 0.\n    MESSAGE 'Error generating random integer' TYPE 'E'.\n  ENDIF.\n\nWRITE: / lv_random_int.\n"
    },
    {
        "instruction": "Classify the given code as either functional programming or object-oriented programming.",
        "input": "def double(x):\n  return x * 2",
        "output": "The given code is an example of functional programming.",
        "abap": "Functional programming often employs higher-order functions and immutable data structures to achieve its goals.\n\nHowever, I don't see any code provided yet. Can you please paste the code you would like me to translate into ABAP? I'll do my best to provide a translation that adheres to functional programming principles within the constraints of ABAP's syntax and features."
    },
    {
        "instruction": "Construct a program to parse a JSON array.",
        "input": "[{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]",
        "output": "import json\n\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\n\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')",
        "abap": "DATA: ls_data TYPE STANDARD TABLE OF ty_data,\n      ls_entry LIKE LINE OF ls_data.\n\nTYPES:\n  BEGIN TYPE-BUILDING.\n    TYPES: BEGIN OF ty_data,\n             name  TYPE string,\n             age   TYPE i,\n           END OF ty_data.\n  END OF type-building.\n\nls_data = VALUE #( ( name  = 'John'\n                     age   = 30 )\n                   ( name  = 'Alice'\n                     age   = 25 ) ).\n\nLOOP AT ls_data INTO ls_entry.\n  WRITE: / |The name is { ls_entry-name } and age is { ls_entry-age }|.\nENDLOOP.\n"
    },
    {
        "instruction": "Implement a function that takes two integers and returns the smaller one.",
        "input": "",
        "output": "def min_integer(a, b):\n    \"\"\"This function returns the minimum of two integers\"\"\"\n    return min(a, b)",
        "abap": "FORM min_integer\n  USING\n    p_a TYPE i\n    p_b TYPE i\n  RETURNING\n    VALUE(r_result) TYPE i.\n\n  r_result = MIN( val1 = p_a val2 = p_b ).\n\nENDFORM.\n"
    },
    {
        "instruction": "Given a string, write a Python program to find the first non-repeating character in it.",
        "input": "input_str = \"aaaaabbbbccc\"",
        "output": "def first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\n\nprint(first_non_repeating_char(input_str))",
        "abap": "CLASS lcl_first_non_repeating_char DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      first_non_repeating_char\n        IMPORTING\n          input_str TYPE string\n        RETURNING\n          VALUE(result) TYPE c.\n\nENDCLASS.\n\nCLASS lcl_first_non_repeating_char IMPLEMENTATION.\n  METHOD first_non_repeating_char.\n\n    DATA: lv_char_count TYPE STANDARD TABLE OF REF TO data,\n          lv_ch TYPE string.\n\n    LOOP AT input_str INTO lv_ch.\n      IF line_exists( char_count[ lv_ch ] ).\n        \" Increment count\n        char_count[ lv_ch ]-+ 1.\n      ELSE.\n        \" Add to table with count 1\n        INSERT VALUE( REF TO data ) INTO TABLE char_count[] TYPE TYPE string VALUE `lv_ch`.\n        SET PARAMETER ID 'count' VALUE 1.\n      ENDIF.\n    ENDLOOP.\n\n    LOOP AT input_str INTO lv_ch.\n      IF line_exists( char_count[ lv_ch ] ) AND ( char_count[ lv_ch ] = 1 ).\n        result = lv_ch.\n        RETURN.\n      ENDIF.\n    ENDLOOP.\n\n    result = ''.\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "Write a JavaScript function to capitalize the first letter of each word in a string.",
        "input": "String: \"This is an example\".",
        "output": "function capitalizeFirstLetter(str) {\n    return str.replace(/\\w\\S*/g, function(txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}\ncapitalizeFirstLetter('This is an example');",
        "abap": "FORM capitalize_first_letter\n  CHANGING cs_str TYPE string.\n  DATA: lv_pos TYPE i.\n\n  DO.\n    IF lv_pos > strlen( cs_str ).\n      EXIT.\n    ENDIF.\n    IF cs_str+lv_pos(1) = space.\n      CONTINUE.\n    ENDIF.\n    REPLACE cs_str+lv_pos(1) WITH |{ cs_str+lv_pos(1) }| TO cs_str LOWERED.\n    lv_pos = lv_pos + 1.\n  ENDDO.\n\nENDFORM.\n\nDATA: ls_example TYPE string VALUE 'This is an example'.\n\nCALL FUNCTION 'capitalize_first_letter'\n  CHANGING\n    cs_str = ls_example.\n\nWRITE: / ls_example.\n"
    },
    {
        "instruction": "Generate a code snippet to find the highest common factor of two given numbers",
        "input": "",
        "output": "function highestCommonFactor(m, n) {\n  if (m === 0 || n === 0) {\n      return 0;\n  }\n\n  let a = Math.max(m, n);\n  let b = Math.min(m, n);\n\n  while (b !== 0) {\n      let c = b;\n      b = a % b;\n      a = c;\n  }\n\n  return a;\n}",
        "abap": "FORM highest_common_factor\n  USING\n    p_m TYPE i\n    p_n TYPE i\n  RETURNING\n    VALUE(result) TYPE i.\n\n  IF p_m = 0 OR p_n = 0.\n    result = 0.\n    RETURN.\n  ENDIF.\n\n  DATA: lv_a TYPE i,\n        lv_b TYPE i,\n        lv_c TYPE i.\n\n  \" Calculate max and min values\n  IF p_m > p_n.\n    lv_a = p_m.\n    lv_b = p_n.\n  ELSE.\n    lv_a = p_n.\n    lv_b = p_m.\n  ENDIF.\n\n  DO.\n    TRANSFER lv_b TO lv_c.\n    lv_b = lv_a MOD lv_b.\n    IF lv_b <> 0.\n      CONTINUE.\n    ENDIF.\n    EXIT.\n  ENDDO.\n\n  result = lv_a.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write an SQL query that selects the maximum price from all products.",
        "input": "Table Name: Products\nColumns: Name (varchar), Price (decimal)",
        "output": "SELECT MAX(Price) FROM Products;",
        "abap": "DATA: lv_max_price TYPE f.\n\nSELECT SINGLE max( price ) INTO lv_max_price\n  FROM products.\n"
    },
    {
        "instruction": "Fill in the blanks at the end of the Java code to find the sum of an array.",
        "input": "public int sumArray(int[] arr){\n    int sum = 0;\n    ______________\n    ______________\n    return sum;\n}",
        "output": "public int sumArray(int[] arr){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}",
        "abap": "FORM z_sum_array USING p_arr TYPE STANDARD TABLE OF i\n                 CHANGING p_result TYPE i.\n\n  DATA: lv_sum TYPE i.\n  LOOP AT p_arr INTO DATA(ls_element).\n    lv_sum = ls_element + lv_sum.\n  ENDLOOP.\n  p_result = lv_sum.\n\nENDFORM.\n"
    },
    {
        "instruction": "Create a list of car models that includes \"Honda Accord\", \"Toyota Corolla\", and \"Ford F150\".",
        "input": "",
        "output": "car_models = [\"Honda Accord\", \"Toyota Corolla\", \"Ford F150\"]",
        "abap": "DATA: lt_car_models TYPE STANDARD TABLE OF string.\nlt_car_models = VALUE #( ( 'Honda Accord' ) ( 'Toyota Corolla' ) ( 'Ford F-150' ) ).\n\n\" or, if you prefer a more traditional ABAP coding style:\nDATA: ls_car_model LIKE LINE OF car_models.\ncar_models = VALUE #( BASE ty_table( \"Honda Accord\", \"Toyota Corolla\", \"Ford F-150\" ).\n"
    },
    {
        "instruction": "Create a list comprehension that takes all the elements of list_one and creates a new list where all the elements are doubled.",
        "input": "list_one = [1, 2, 3, 4, 5]",
        "output": "[x*2 for x in list_one]",
        "abap": "DATA: lv_result TYPE STANDARD TABLE OF i.\n\nLOOP AT list_one INTO DATA(ls_item).\n  APPEND ls_item * 2 TO lv_result.\nENDLOOP.\n"
    },
    {
        "instruction": "Write an algorithm to perform binary search on a sorted array.",
        "input": "",
        "output": "def binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    if guess > item:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None",
        "abap": "REPORT zbinary_search.\n\nCLASS lcl_binary_search DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      binary_search IMPORTING\n        array     TYPE STANDARD TABLE OF i\n        item      TYPE i\n        RETURNING\n          result   TYPE i.\nENDCLASS.\n\nCLASS lcl_binary_search IMPLEMENTATION.\n  METHOD binary_search.\n    DATA: low TYPE i,\n          high TYPE i,\n          mid  TYPE i.\n\n    \" Initialize the search boundaries\n    low = 0.\n    high = lines( array ) - 1.\n\n    WHILE low <= high.\n      \" Calculate the midpoint of the current range\n      mid = ( low + high ) / 2.\n\n      \" Retrieve the item at the midpoint index\n      DATA: guess TYPE i,\n            READ TABLE array INDEX mid INTO guess.\n\n      IF guess == item.\n        \" The target item was found, return its index\n        result = mid.\n        RETURN.\n      ENDIF.\n\n      IF guess > item.\n        \" If the midpoint value is greater than the target, move the upper boundary down\n        high = mid - 1.\n      ELSE.\n        \" If the midpoint value is less than the target, move the lower boundary up\n        low = mid + 1.\n      ENDIF.\n\n    ENDDO.\n\n    \" The item was not found in the array; return -1 to indicate failure\n    result = -1.\n\n  ENDMETHOD.\n\nENDCLASS.\n"
    },
    {
        "instruction": "What is the purpose of a try-catch block in Python?",
        "input": "",
        "output": "The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.",
        "abap": "TRY.\n    \" Code that may raise an exception is placed here\n\n    IF ... THEN\n        RAISE EXCEPTION TYPE '...'.\n    ELSEIF ... THEN\n        RAIS_EXCEPTION TYPE '...'..\n    ENDIF.\n\nCATCH cx_static_check INTO DATA(lx_static_check).\n    \" Code to handle a static check error\n    WRITE: / lx_static_check->if_t100_message~text.\nENDTRY.\n\nFINALLY.\n    \" Clean-up code is placed here, regardless of whether an exception occurred or not\n\n    FREE: l_x_static_check.\nENDFINALLY.\n"
    },
    {
        "instruction": "Create an array of ten unique numbers within the range 10 to 50.",
        "input": "",
        "output": "int[] numbers = {10, 13, 16, 23, 25, 37, 41, 45, 48, 50};",
        "abap": "DATA: lv_numbers TYPE STANDARD TABLE OF i.\n\nlv_numbers = VALUE #( ( 10 ) ( 13 ) ( 16 ) ( 23 ) ( 25 )\n                      ( 37 ) ( 41 ) ( 45 ) ( 48 ) ( 50 ) ).\n"
    },
    {
        "instruction": "Create a function to find the greatest common divisor of two numbers in Python.",
        "input": "",
        "output": "def gcd(a, b):\n     while b != 0:\n        a, b = b, a % b\n     return a",
        "abap": "FORM calculate_gcd\n  USING\n    p_a TYPE i\n    p_b TYPE i\n  RETURNING\n    value(p_result) TYPE i.\n\n  WHILE p_b <> 0.\n    DATA: lv_temp TYPE i.\n\n    lv_temp = p_b.\n    p_b = p_a MOD p_b.\n    p_a = lv_temp.\n  ENDWHILE.\n\n  p_result = p_a.\n\nENDFORM.\n"
    },
    {
        "instruction": "Write a function to find the number of occurrences of an element in a list.",
        "input": "arr = [10, 20, 10, 40, 40, 40, 50]",
        "output": "def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    return count\n\nprint(count_occurrences(arr, 40)) # Outputs: 3",
        "abap": "FORM count_occurrences USING it_array TYPE ti_fcat\n                              p_element TYPE i\n                      CHANGING p_count TYPE i.\n\n  DATA: lr_iterator TYPE REF TO cl_ltf_iterator,\n         lv_count    TYPE i.\n\n  CLEAR p_count.\n  p_count = 0.\n  DO.\n    TRY.\n      CALL METHOD mo_iterator->fetch_chained( IMPORTING ev_exit = abap_false ).\n      IF sy-subrc <> 0.\n        EXIT.\n      ENDIF.\n      READ TABLE mo_iterator->it_result WITH KEY table_line = p_element INTO DATA(lr_table_line).\n      IF sy-subrc <> 0.\n        CONTINUE.\n      ENDIF.\n    CATCH cx_sy_itab_is_read_overflow.\n      EXIT.\n    ENDTRY.\n\n    \" Check if the element is in the current iteration\n    IF lr_table_line IS NOT BOUND.\n      CONTINUE.\n    ELSEIF lr_table_line->* = p_element.\n      p_count = p_count + 1.\n    ENDIF.\n  ENDDO.\n\nENDFORM.\n\n\" Example usage:\nDATA: lv_array TYPE STANDARD TABLE OF i VALUE 10,20,30,40,50,\n       lt_result LIKE LINE OF lv_array,\n       lv_count TYPE i.\n\nINSERT lv_array INTO TABLE lv_array.\n\nCALL FUNCTION 'COUNT_OCCURRENCES'\n  EXPORTING\n    it_array   = lv_array\n  CHANGING\n    p_element  = 40\n  IMPORTING\n    p_count    = lt_result.\n\" Output: 3\n"
    },
    {
        "instruction": "Sort the array in ascending order.",
        "input": "arr = [3, 2, 1, 5, 4]",
        "output": "arr.sort() # [1, 2, 3, 4, 5]",
        "abap": "DATA: lv_array TYPE STANDARD TABLE OF i.\n\nlv_array = value #( 1 2 3 4 5 ).\nSORT lv_array.\n WRITE: / lv_array. \" [1, 2, 3, 4, 5]\"\n"
    },
    {
        "instruction": "Create a JSON object with three key-value pairs.",
        "input": "",
        "output": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30\n}",
        "abap": "TYPES: BEGIN OF ty_data,\n          first_name TYPE string,\n          last_name  TYPE string,\n          age        TYPE i,\n        END OF ty_data.\n\nDATA: ls_data TYPE ty_data.\nls_data-first_name = 'John'.\nls_data-last_name  = 'Doe'.\nls_data-age       = 30.\n\nWRITE ls_data-first_name TO cl_abap_char_utilities=>cr lf.\nWRITE ls_data-last_name  TO cl_abap_char_utilities=>cr lf.\nWRITE: / ls_data-age.\n"
    },
    {
        "instruction": "Write a shell script to print the top 3  most frequently used commands.",
        "input": "",
        "output": "#!/bin/bash\n# Store all commands used in the last hour in command_list.\nhistory | tail -$(($(date +%H) * 60)) -n $(($(date +%M)+1)) | cut -d ' ' -f 5 > command_list\n# Create frequency database and store them in frequency.dat\ncat command_list | sort | uniq -c | sort -rn > frequency.dat\n# Print top 3 commands\nhead -3 frequency.dat",
        "abap": "REPORT zcommand_frequency.\n\nTYPES: BEGIN OF ty_command,\n         command TYPE string,\n       END OF ty_command.\n\nDATA: lt_commands TYPE STANDARD TABLE OF ty_command,\n      lv_hour     TYPE i,\n      lv_minute   TYPE i,\n      lv_file    TYPE string VALUE 'command_list'.\n\n\" Store all commands used in the last hour in lt_commands.\nDATA: ls_line TYPE cl_gui_input_line=>sc_line,\n      ls_command TYPE ty_command.\n\nCALL FUNCTION 'USER_COMMAND_HISTORY'\n  EXPORTING\n    max_lines        = 60\n    start_time       = sy-datum sy-uzeit + ( lv_hour = ( sy-uzeit+1(2) - 1 ) MOD 24 )\n  IMPORTING\n    lines            = lt_commands[].\n\" Create frequency database and store them in 'frequency.dat'\nDATA: lv_file TYPE string VALUE 'frequency.dat'.\n\nLOOP AT lt_commands INTO ls_command.\n  READ TABLE lt_commands INTO ls_command WITH KEY command = ls_command-command.\n  IF sy-subrc <> 0.\n    APPEND ls_command TO lt_commands.\n  ENDIF.\nENDLOOP.\n\nSORT lt_commands BY command.\nDELETE ADJACENT DUPLICATES FROM lt_commands.\n\nDATA: lv_line TYPE string,\n      lv_count TYPE i.\n\n\" Write frequency to 'frequency.dat'\nFILE-OPEN : \n  EXPORTING\n    file_name = lv_file\n    write_mode = cl_abap_char_utilities_if=>text_mode\n  IMPORTING\n    file_status =\n  EXCEPTIONS\n    OTHERS          = 0\n .\n IF sy-subrc <> 0.\n   MESSAGE 'Could not open file' TYPE 'I'.\n ENDIF.\n\nLOOP AT lt_commands INTO ls_command.\n  lv_count = lines( lt_commands[ command = ls_command-command ] ).\n  WRITE : ls_command-command ls_command-command ls_command-command ls_command-command  ls_command-command ls_command-command ls_command-command ls_command-command ls_command-command\n            ls_command-command ls_command-command ls_command-command ls_command-command ls_command-command ls_command-command ls_command-command\n            lv_count\n            LV_COUNT\n            LV_COUNT\n            LV_COUNT.\nENDLOOP.\n\n\" Print top 3 commands\nDATA: lt_sorted TYPE STANDARD TABLE OF ty_command,\n      ls_sorted TYPE ty_command.\n\nSORT lt_commands BY count DESCENDING.\nLOOP AT lt_commands INTO ls_command.\n  APPEND ls_command TO lt_sorted.\n  IF sy-msgty <> 'S'.\n    EXIT.\n  ENDIF.\nENDLOOP.\n\nMODIFY lt_sorted INDEX 1 FROM ls_sorted[ 2 ].\nMODIFY lt_sorted INDEX 2 FROM ls_sorted[ 3 ].\n\nWRITE : ls_sorted[ 1 ]-command ls_sorted[ 2 ]-command ls_sorted[ 3 ]-command\n        ls_sorted[ 1 ]-count ls_sorted[ 2 ]-count ls_sorted[ 3 ]-count.\n"
    },
    {
        "instruction": "Convert the following string to camelCase.",
        "input": "this_string_should_be_converted_to_camelCase",
        "output": "thisStringShouldBeConvertedToCamelCase",
        "abap": "DATA: ls_input TYPE string.\n\nls_input = 'this_string_should_be_converted_to_camel_case'.\n\nDATA: lv_output TYPE string.\nDO.\n  lv_output = ls_input+0(1).\n  LOOP AT ls_input FROM 2 INTO DATA(lv_char) IN BYTE MODE.\n    IF lv_char EQ space.\n      EXIT.\n    ELSEIF lv_char CA 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n      CONCATENATE lv_output lv_char INTO lv_output SEPARATED BY ''.\n    ELSE.\n      CONCATENATE lv_output lv_char INTO lv_output SEPARATED BY space.\n    ENDIF.\n  ENDDO.\n\nWRITE: lv_output.\n"
    },
    {
        "instruction": "Create an algorithm to sort a given array in ascending order using Bubble sort.",
        "input": "",
        "output": "def bubble_sort(arr): \n    # length of the array \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "abap": "TYPES: ty_array TYPE STANDARD TABLE OF i.\n\nDATA: lv_arr  TYPE ty_array,\n      lv_n    TYPE i,\n      lv_i    TYPE i,\n      lv_j    TYPE i.\n\n\" Function to implement bubble sort algorithm \"\nPERFORM bubble_sort USING lv_arr CHANGING lv_arr.\n\nFORM bubble_sort\n  USING   \" Import parameters\n          it_arr TYPE ty_array  \" Input array\n         CHANGING ct_arr TYPE ty_array.  \" Output array\n\n  DATA: lr_arr TYPE STANDARD TABLE OF i.\n    CLEAR ct_arr[].\n\n  DO.\n    IF it_arr[] IS INITIAL OR lt_arr[] IS INITIAL.\n      RETURN.\n    ENDIF.\n\n    \" Get the length of the array\n    lv_n = lines( it_arr ).\n\n    \" Traverse through all array elements\n    PERFORM sort USING lv_n CHANGING ct_arr.\n  ENDDO.\n\n\" Function to implement bubble sort algorithm \"\nFORM sort\n  USING   \" Import parameters\n          li_n TYPE i,   \" Length of the array\n         CHANGING ct_arr TYPE STANDARD TABLE OF i.  \" Output array\n\n    DATA: lr_arr TYPE STANDARD TABLE OF i.\n\n    DO.\n      IF ct_arr[] IS INITIAL OR li_n = 0.\n        RETURN.\n      ENDIF.\n\n      PERFORM sort_next USING li_n-1 CHANGING ct_arr.\n\n      \" Reduce the length of the array\n      li_n = li_n - 1.\n    ENDDO.\n\n\" Function to implement bubble sort algorithm for next step \"\nFORM sort_next\n  USING   \" Import parameters\n          li_n TYPE i,   \" Length of the array\n         CHANGING ct_arr TYPE STANDARD TABLE OF i.  \" Output array\n\n    DATA: lr_arr TYPE STANDARD TABLE OF i,\n      lv_i   TYPE i,\n      lv_j   TYPE i.\n\n    DO.\n      IF li_n = 0 OR ct_arr[] IS INITIAL.\n        RETURN.\n      ENDIF.\n\n      \" Traverse through all array elements\n      PERFORM sort_element USING li_n CHANGING ct_arr.\n\n      \" Reduce the length of the array\n      li_n = li_n - 1.\n    ENDDO.\n\n\" Function to implement bubble sort algorithm for each element \"\nFORM sort_element\n  USING   \" Import parameters\n          li_n TYPE i,   \" Length of the array\n         CHANGING ct_arr TYPE STANDARD TABLE OF i.  \" Output array\n\n    DATA: lr_arr TYPE STANDARD TABLE OF i,\n      lv_i   TYPE i,\n      lv_j   TYPE i.\n\n    DO.\n      IF li_n = 0 OR ct_arr[] IS INITIAL.\n        RETURN.\n      ENDIF.\n\n      PERFORM swap USING ct_arr CHANGING lt_arr.\n\n      \" Reduce the length of the array\n      li_n = li_n - 1.\n    ENDDO.\n\n\" Function to implement swapping elements \"\nFORM swap\n  USING   \" Import parameters\n          it_arr TYPE STANDARD TABLE OF i,   \" Input array\n         CHANGING ct_arr TYPE STANDARD TABLE OF i.  \" Output array\n\n    DATA: lv_j TYPE i,\n      lr_arr TYPE STANDARD TABLE OF i.\n\n    DO.\n      IF it_arr[] IS INITIAL OR ct_arr[] IS INITIAL.\n        RETURN.\n      ENDIF.\n\n      lv_j = sy-index - 1.\n\n      \" Check if the element found is greater than next\n      IF it_arr[ sy-index ] > it_arr[ sy-index + 1 ].\n        PERFORM move USING it_arr CHANGING lt_arr.\n      ENDIF.\n\n    ENDDO.\n\n\" Function to implement moving elements \"\nFORM move\n  USING   \" Import parameters\n          it_arr TYPE STANDARD TABLE OF i,   \" Input array\n         CHANGING ct_arr TYPE STANDARD TABLE OF i.  \" Output array\n\n    DATA: lr_arr TYPE STANDARD TABLE OF i,\n      lv_i   TYPE i.\n\n    lv_i = sy-index.\n\n    \" Move elements to right side of the array\n    ct_arr[ sy-index ] = it_arr[ sy-index + 1 ].\n    ct_arr[ sy-index + 1 ] = it_arr[ sy-index ].\n"
    },
    {
        "instruction": "Write an algorithm to generate the Fibonacci series up to the nth term",
        "input": "",
        "output": "def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b",
        "abap": "REPORT zfibonacci.\n\nCLASS lcl_fibonacci DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      fibonacci IMPORTING n TYPE i RETURNING value(r_result) TYPE i.\nENDCLASS.\n\nCLASS lcl_fibonacci IMPLEMENTATION.\n  METHOD fibonacci.\n    DATA: a TYPE i,\n          b TYPE i.\n\n    IF n < 0.\n      MESSAGE 'Incorrect input' TYPE 'E'.\n    ELSEIF n = 0 OR n = 1.\n      r_result = n.\n    ELSE.\n      DO n TIMES.\n        a = b.\n        b = a + b - 1. \" Note: ABAP doesn't have direct equivalent of Python's -= operator\n        ENDDO.\n      r_result = b.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: l_n TYPE i,\n      l_r TYPE i.\n\nl_n = 10.\nWRITE: / 'Fibonacci number for', l_n, 'is:', ( lcl_fibonacci=>fibonacci( n = l_n ) ).\n"
    },
    {
        "instruction": "Debug the following Python code",
        "input": "def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1",
        "output": "\"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation",
        "abap": "def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n"
    },
    {
        "instruction": "Generate valid HTML tags for a two-column table.",
        "input": "",
        "output": "<table>\n    <tr>\n        <th> Column 1 </th>\n        <th> Column 2 </th>\n    </tr>\n    <tr>\n        <td> </td>\n        <td> </td>\n    </tr>\n</table>",
        "abap": "DATA: lv_column_1 TYPE string,\n      lv_column_2 TYPE string.\n\nWRITE:\n  / '<table>'.\n  WRITE: '<tr>'.\n  WRITE: '<th> Column 1 </th>'.\n  WRITE: '<th> Column 2 </th>'.\n  WRITE: '</tr>'.\n  WRITE: '<tr>'.\n  WRITE: '<td> ', lv_column_1, ' </td>'.\n  WRITE: '<td> ', lv_column_2, ' </td>'.\n  WRITE: '</tr>'.\n  WRITE: '</table>'.\n"
    },
    {
        "instruction": "Generate a Frequency Table for the following sequence of characters using Python.",
        "input": "'aabbccddee'",
        "output": "# Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\n\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})",
        "abap": "DATA: lv_string TYPE string VALUE 'aabbccddee',\n      lt_freq_table TYPE STANDARD TABLE OF ty_frequency.\n\nTYPES: BEGIN OF ty_frequency,\n         character TYPE c LENGTH 1,\n         frequency TYPE i,\n       END OF ty_frequency.\n\n\" create a table with the frequency of each character\nLOOP AT lv_string INTO DATA(lv_char).\n  READ TABLE lt_freq_table WITH KEY character = lv_char.\n  IF sy-subrc <> 0.\n    APPEND VALUE #( character = lv_char frequency = 1 ) TO lt_freq_table.\n  ELSE.\n    MODIFY TABLE lt_freq_table INDEX sy-tabix ASSIGNING FIELD-SYMBOL(<fs_item>).\n    <fs_item>-frequency = <fs_item>-frequency + 1.\n  ENDIF.\nENDLOOP.\n\n\" print the table\nLOOP AT lt_freq_table INTO DATA(ls_freq).\n  WRITE: |{ ls_freq-character } : { ls_freq-frequency }|.\nENDLOOP.\n"
    },
    {
        "instruction": "Edit the above PHP function so that it also checks if a given number is prime.",
        "input": "",
        "output": "function isPrime($n) {\n  if ($n == 1) {\n    return false;\n  } \n  elseif ($n == 2) {\n    return true;\n  } \n  else {\n    for ($i = 2; $i <= sqrt($n); $i++) {\n      if ($n % $i == 0) {\n        return false;\n        break;\n      }\n    }\n    return true;\n  }\n}",
        "abap": "FUNCTION z_is_prime\n  IMPORTING\n    VALUE(iv_number) TYPE i\n  EXPORTING\n    VALUE(cv_result) TYPE abap_bool.\n\n  DATA: lv_sqrt TYPE f.\n\n  IF iv_number = 1.\n    cv_result = abap_false.\n  ELSEIF iv_number = 2.\n    cv_result = abap_true.\n  ELSE.\n    DO.\n      lv_sqrt = sqrt( iv_number ).\n      DATA(lv_i) = sy-index.\n      IF lv_i > lv_sqrt.\n        EXIT.\n      ENDIF.\n\n      IF iv_number MOD lv_i = 0.\n        cv_result = abap_false.\n        EXIT.\n      ENDIF.\n    ENDDO.\n    cv_result = abap_true.\n  ENDIF.\nENDFUNCTION.\n"
    },
    {
        "instruction": "Initialize an empty list in Python and then add three items to it.",
        "input": "",
        "output": "my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")",
        "abap": "TYPES: ty_string TYPE string.\nDATA: lv_list TYPE STANDARD TABLE OF ty_string.\n\nAPPEND \"item1\" TO lv_list.\nAPPEND \"item2\" TO lv_list.\nAPPEND \"item3\" TO lv_list.\n"
    },
    {
        "instruction": "Generate a function to multiply two integers.",
        "input": "",
        "output": "def multiply_ints(x, y): \n    return x * y",
        "abap": "CLASS lcl_multiply DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      multiply_ints IMPORTING\n                        iv_x TYPE i\n                        iv_y TYPE i\n        EXPORTING\n          ev_result TYPE i .\nENDCLASS.\n\nCLASS lcl_multiply IMPLEMENTATION.\n  METHOD multiply_ints.\n    ev_result = iv_x * iv_y.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Generate a function which will validate a phone number using regular expression.",
        "input": "",
        "output": "def validate_phone(phone_number):\n    regex = '^\\+?(\\d[\\d-. ]+)?(\\([\\d-. ]+\\))?[\\d-. ]+\\d$'\n    if re.match(regex, phone_number):\n        return True\n    return False",
        "abap": "REPORT zvalidate_phone.\n\nCLASS lcl_validate_phone DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      validate_phone\n        IMPORTING\n          iv_phone_number TYPE string\n        RETURNING\n          VALUE(rv_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_validate_phone IMPLEMENTATION.\n  METHOD validate_phone.\n    DATA: lv_regex TYPE string,\n          lr_match TYPE REF TO cl_abap_MATCHER.\n\n    lv_regex = '^\\\\+?(?:[\\\\d-\\\\. ]+)?(?:\\\\(\\\\[\\\\d-\\\\. ]+\\\\))?[-.\\\\s]+\\\\d$'.\n\n    CREATE OBJECT lr_match\n      EXPORTING\n        pattern  = lv_regex\n        ignore_case = abap_true.\n\n    IF lr_match->match( val = iv_phone_number ) <> cl_abap_matcher=>no_match.\n      rv_result = abap_true.\n    ELSE.\n      rv_result = abap_false.\n    ENDIF.\n\n    DESTROY lr_match.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lv_phone_number TYPE string,\n        lv_valid        TYPE abap_bool.\n\n  lv_phone_number = '+1 (123) 456-7890'.\n\n  lv_valid = lcl_validate_phone=>validate_phone( iv_phone_number = lv_phone_number ).\n\n  WRITE:/ 'Is phone number valid:', lv_valid.\n"
    },
    {
        "instruction": "Find the index of a given item in an array",
        "input": "arr = [1, 4, 6, 8, 9]\nitem = 8",
        "output": "def find_index(arr, item):\n    \"\"\"\n    Finds the index of a given item in an array\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == item:\n            return i\n    return -1",
        "abap": "REPORT zfind_index.\n\nCLASS lcl_find_index DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_index\n        IMPORTING\n          iv_arr TYPE STANDARD TABLE OF i\n          item   TYPE i\n        EXPORTING\n          ev_index TYPE i\n        RAISING\n          cx_found_nothing.\nENDCLASS.\n\nCLASS lcl_find_index IMPLEMENTATION.\n  METHOD find_index.\n    DATA: lv_index TYPE i.\n\n    LOOP AT iv_arr INTO DATA(ls_num).\n      IF ls_num = item.\n        ev_index = sy-tabix - 1.\n        RETURN.\n      ENDIF.\n    ENDLOOP.\n    RAISE EXCEPTION TYPE cx_found_nothing MESSAGE 'Item not found in array'.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write an HTML template to display a greeting message. The message should include the name of the user who visits the website.",
        "input": "username = \"John\"",
        "output": "<html>\n\t<head>\n\t\t<title>Greeting Message</title>\n\t</head>\n\t<body>\n\t\t<h1>Hello, {{ username }}!</h1>\n\t</body>\n</html>",
        "abap": "REPORT zhello.\n\nDATA: ls_username TYPE string.\n\nls_username = 'John'. \" Replace with actual user input or data\n\nWRITE:/ |H1|Hello, { ls_username }!|.\n"
    },
    {
        "instruction": "Deploy a basic HTML page to a server.",
        "input": "",
        "output": "Clone the repository containing the HTML page to the server.\nConfigure the web server so that it will serve the HTML page when requested.",
        "abap": "REPORT zhttp_server_example.\n\nTYPES: BEGIN OF ty_html,\n          content TYPE string,\n        END OF ty_html.\n\nDATA: ls_html TYPE ty_html.\n\n\" Define the HTML page as a string\nls_html-content = '<html><body><h1>Hello, World!</h1></body></html>'.\n\n\" Create a file to store the HTML page on the server\nDATA: lv_filename TYPE string.\nlv_filename = 'C:\\http_server\\index.html'. \" Replace with your desired path\n\nCREATE OR REPLACE FILE lv_filename TYPE text ENCODING binary LENGTH 1024.\nWRITE TO file lv_filename ls_html-content.\n\n\" Define a callback function to serve the HTML page when requested\nCLASS-lcl_http_server DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      handle_request IMPORTING\n                         p_url         TYPE string\n                       EXPORTING\n                         e_response    TYPE string,\n      get_current_time IMPORTING\n                          p_time        TYPE i\n                        CHANGING\n                          p_current_time TYPE i.\nENDCLASS.\n\nCLASS lcl_http_server IMPLEMENTATION.\n  METHOD handle_request.\n    CASE p_url.\n      WHEN 'index.html'.\n        e_response = ls_html-content.\n      WHEN OTHERS.\n        \" Handle other requests as needed\n        e_response = 'Not Found'.\n    ENDCASE.\n  ENDMETHOD.\nENDCLASS.\n\n\" Set up the HTTP server to serve the HTML page\nDATA: lv_server_ip TYPE i,\n      lv_port      TYPE i,\n      lv_timeout   TYPE i.\n\nlv_server_ip = '127.0.0.1'. \" Replace with your desired IP address\nlv_port      = 8080.         \" Replace with your desired port number\nlv_timeout   = 60.           \" Replace with your desired timeout\n\n\" Create an HTTP server object\nDATA: lo_http_server TYPE REF TO cl_server.\n\nCREATE OBJECT lo_http_server\n  EXPORTING\n    ip_address     = lv_server_ip\n    port_number    = lv_port\n    max_queue_size = 1000\n    time_out       = lv_timeout.\n\n\" Set up the request handler function\nlo_http_server->set_request_handler(\n  new lcl_http_server=>handle_request( ) ).\n\n\" Start the server\nlo_http_server->start( ).\n"
    },
    {
        "instruction": "Write a Java program to print the sum of all integers from 1 to given integer.",
        "input": "integer = 5",
        "output": "public class SumIntegers {\n \n    public static void main(String[] args) {\n        int n = 5;\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of integers from 1 to \"+n+\": \"+sum);\n    }\n \n}\n// Output: Sum of integers from 1 to 5: 15",
        "abap": "REPORT zsum_integers.\n\nDATA: lv_n TYPE i VALUE '5',\n      lv_sum TYPE i.\n\nDO.\n  lv_sum = 0.\n  DO lv_n TIMES.\n    lv_sum = lv_sum + sy-index.\n  ENDDO.\n  WRITE: / 'Sum of integers from 1 to ', lv_n, ':', lv_sum.\nENDDO.\n"
    },
    {
        "instruction": "Given a list of numbers, find the minimum and maximum elements.",
        "input": "[3, 4, 8, 1, 5, 0, 9]",
        "output": "min_el = 0\nmax_el = 9",
        "abap": "DATA: min_el TYPE i VALUE 0,\n      max_el TYPE i VALUE 9.\n"
    },
    {
        "instruction": "Create a dictionary containing the key-value pair of a given string.",
        "input": "string = \"test string\"",
        "output": "\"\"\"\nCreate a dictionary containing the key-value pair of a given string\n\"\"\"\n\n# Given string\nstring = \"test string\"\n\n# Initialising an empty dictionary\nmy_dict = {}\n\n# Looping through the given string\nfor char in string:\n    # If the character is not already in dictionary\n    if char not in my_dict:\n        # Adding the character to the dictionary\n        my_dict[char] = 1\n    # If the character already exists in dictionary\n    else:\n        # Incrementing the frequency\n        my_dict[char] += 1\n        \n# Printing the dictionary\nprint(my_dict)",
        "abap": "REPORT ztest.\n\nDATA: lv_string TYPE string VALUE 'test string',\n      lt_chars   TYPE STANDARD TABLE OF REF TO data,\n      lv_char    TYPE string,\n      lt_dict    LIKE LINE OF ty_dictionary.\n\nTYPES: BEGIN OF ty_dictionary,\n         char  TYPE string,\n         count TYPE i,\n       END OF ty_dictionary.\n\n\" Initialize an empty dictionary\nCREATE OBJECT lt_dict.\nLOOP AT lv_string INTO lv_char.\n  IF sy-tabix = 1. \" Avoid index out of bounds error when it's the first character\n    APPEND VALUE #( char = lv_char count = 0 ) TO lt_dict.\n  ELSE.\n    READ TABLE lt_dict WITH KEY char = lv_char TRANSPORTING NO FIELDS.\n    IF sy-subrc <> 0.\n      INSERT VALUE #( char = lv_char count = 1 ) INTO TABLE lt_dict.\n    ELSE.\n      MODIFY lt_dict INDEX sy-tabix REFRESH CHANGING DATA = VALUE #( count = lt_dict[ char = lv_char ] + 1 ).\n    ENDIF.\n  ENDIF.\nENDLOOP.\n\n\" Print the dictionary\n LOOP AT lt_dict INTO DATA(ls_item).\n   WRITE: ls_item-char, ls_item-count.\n ENDLOOP.\n"
    },
    {
        "instruction": "Create function to return the cube of a number.",
        "input": "",
        "output": "def cube_number(x):\n    return x**3",
        "abap": "FORM cube_number\n  USING\n    p_x TYPE i \" Input number to calculate cube\n  RETURNING\n    value(result) TYPE f.\n\n  result = p_x ** 3.\nENDFORM.\n"
    },
    {
        "instruction": "Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3",
        "input": "",
        "output": "\"\"\"\nCreate a program to create a list of all the numbers from 1 to 10 which are divisible by 3\n\"\"\"\n\ndef divisible_by_three():\n    divisible_by_three_list = []\n    for i in range(1, 11):\n        if i % 3 == 0:\n            divisible_by_three_list.append(i)\n    return divisible_by_three_list\n\nif __name__ == '__main__':\n    print(divisible_by_three())",
        "abap": "REPORT zdivisible_by_three.\n\nCLASS z_divisible_by_three DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      divisible_by_three RETURNING VALUE(result) TYPE STANDARD TABLE OF i.\nENDCLASS.\n\nCLASS z_divisible_by_three IMPLEMENTATION.\n  METHOD divisible_by_three.\n    DATA: lt_numbers TYPE STANDARD TABLE OF i,\n          lv_number TYPE i.\n\n    DO 10 TIMES.\n      lv_number = sy-index - 1.\n      IF lv_number MOD 3 = 0.\n        APPEND lv_number TO result.\n      ENDIF.\n    ENDDO.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA: lt_divisible_by_three TYPE TABLE OF i,\n        lo_divisible_by_three TYPE REF TO z_divisible_by_three.\n\n  CREATE OBJECT lo_divisible_by_three TYPE z_divisible_by_three.\n  CALL METHOD lo_divisible_by_three->divisible_by_three CHANGING result = lt_divisible_by_three.\n  WRITE: / lt_divisible_by_three.\n"
    },
    {
        "instruction": "Using the numpy library, create a 3x3 Identity Matrix.",
        "input": "",
        "output": "iden_matrix = numpy.identity(3) \nprint(iden_matrix)",
        "abap": "DATA: lv_matrix TYPE abapint4x3.\n\nlv_matrix = cl_abap_matrix=>create_filled\n  ( i_lines    = 3\n   i_columns  = 3\n   it_data    = VALUE #( ( 1 0 0 )\n                        ( 0 1 0 )\n                        ( 0 0 1 ) )\n   ).\n\nWRITE: / lv_matrix.\n"
    },
    {
        "instruction": "Write a code to create a 3 x 3 matrix containing all 0s.",
        "input": "",
        "output": "\"\"\"\nWrite a code to create a 3 x 3 matrix containing all 0s\n\"\"\"\n\n# Creating an empty 3 x 3 matrix\nmatrix = [[0 for x in range(3)] for y in range(3)] \n  \n# Printing the matrix\nprint(matrix)",
        "abap": "DATA: lv_matrix TYPE ty_2d TYPE STANDARD TABLE OF ty_row.\n\nTYPES:\n  BEGIN OF ty_row,\n    \" Each row of the matrix has 3 columns, so we define it as follows\n    column1 TYPE i,\n    column2 TYPE i,\n    column3 TYPE i,\n  END OF ty_row.\nDATA: BEGIN OF ls_matrix,\n       column1 TYPE i,\n       column2 TYPE i,\n       column3 TYPE i,\n     END OF ls_matrix.\n\nlv_matrix = VALUE #( ( ls_matrix ) FOR <fs_matrix> IN lv_matrix ).\n\nDO 3 TIMES.\n  DATA(ls_row) = VALUE ty_row( ).\n  DO 3 TIMES.\n    APPEND ls_row TO lv_matrix.\n  ENDDO.\nENDDO.\n\n\" Print the matrix\nLOOP AT lv_matrix INTO ls_matrix.\n  WRITE:/ ls_matrix-column1 ls_matrix-column2 ls_matrix-column3.\nENDLOOP.\n"
    },
    {
        "instruction": "Read the input text and reverse it character by character.",
        "input": "This is a sample text",
        "output": "txet elpmas a si sihT",
        "abap": "That looks like some garbled text!\n\nIf you'd like to have me translate it, I'll do my best. Can you give me a hint about the language or context of the text? Or would you like me to simply try to decipher it as is?\n\nAlso, if you're looking for someone to help with translating code from another programming language into ABAP (which stands for Advanced Business Application Programming), please feel free to share the code and I'll do my best to assist you!"
    },
    {
        "instruction": "Write a Python program to determine if a given number is an Armstrong number.",
        "input": "",
        "output": "def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = temp % 10\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False",
        "abap": "CLASS lcl_armstrong_number DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      is_armstrong_number IMPORTING p_num TYPE i\n                          RETURNING VALUE(p_result) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_armstrong_number IMPLEMENTATION.\n  METHOD is_armstrong_number.\n    DATA: lv_sum TYPE i,\n          lv_temp TYPE i,\n          lv_digit TYPE i.\n\n    lv_sum = 0.\n    lv_temp = p_num.\n    WHILE lv_temp > 0.\n      lv_digit = lv_temp MOD 10.\n      lv_sum = lv_sum + lv_digit ** 3.\n      lv_temp = lv_temp DIV 10.\n    ENDWHILE.\n\n    IF p_num = lv_sum.\n      p_result = abap_true.\n    ELSE.\n      p_result = abap_false.\n    ENDIF.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Design a program to find the longest element in the given list.",
        "input": "[10, 100, 200, 500, 400]",
        "output": "def longest_element(list):\n  max_length = 0\n  max_length_item = None\n\n  for item in list:\n    if len(item) > max_length:\n      max_length = len(item)\n      max_length_item = item\n\n  return max_length_item\n\nlist = [10, 100, 200, 500, 400]\nlongest_element(list) # 500",
        "abap": "CLASS lcl_longest_element DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      longest_element\n        IMPORTING\n          list       TYPE ty_list\n        RETURNING\n          VALUE(rval) TYPE string.\nENDCLASS.\n\nCLASS lcl_longest_element IMPLEMENTATION.\n  METHOD longest_element.\n    DATA: max_length TYPE i,\n          item       LIKE LINE OF val_type-ty_list.\n\n    \" Find the longest element in the input list\n    MAX_LENGTH = strlen( val_type-ty_list[ val_type-ty_list( line = list[ 1 ] )-str_val ] ).\n    LOOP AT list INTO DATA(new_item).\n      IF strlen( new_item-str_val ) > max_length.\n        max_length = strlen( new_item-str_val ).\n        item = new_item.\n      ENDIF.\n    ENDLOOP.\n\n    \" Return the longest element\n    rval = item-str_val.\n\n  ENDMETHOD.\nENDCLASS.\n\nDATA: list TYPE ty_list.\nAPPEND INITIAL LINE TO list.\nlist[ 1 ]-str_val = '10'.\nAPPEND INITIAL LINE TO list.\nlist[ 2 ]-str_val = '100'.\nAPPEND INITIAL LINE TO list.\nlist[ 3 ]-str_val = '200'.\nAPPEND INITIAL LINE TO list.\nlist[ 4 ]-str_val = '500'.\n\nDATA(rval) = lcl_longest_element=>longest_element( list ).\nWRITE: rval. \" outputs: 500\n"
    },
    {
        "instruction": "Using the given SQL command, print out all rows from the \"users\" table.",
        "input": "SELECT * FROM users",
        "output": "SELECT * FROM users; \n \nThis will return all rows from the \"users\" table.",
        "abap": "DATA: lt_users TYPE STANDARD TABLE OF ty_user.\n\nTYPES: BEGIN OF ty_user.\n  field1 TYPE string,\n  field2 TYPE string,\nEND OF ty_user.\n\nSELECT * FROM users INTO TABLE lt_users.\n"
    },
    {
        "instruction": "Calculate the circumference of a circle.",
        "input": "Radius: 3",
        "output": "18.85",
        "abap": "DATA: lv_number TYPE p DECIMAL3 VALUE '18.85'.\n"
    },
    {
        "instruction": "Write a regular expression to extract all email addresses from a string.",
        "input": "string = \"My email address is john@doe.com and your email address is jane@doe.com\"",
        "output": "import re\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", string)\nprint(emails)",
        "abap": "CLASS lcl_email_regex DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      find_emails IMPORTING\n        string TYPE string\n      EXPORTING\n        emails TYPE stdntable OF REF TO data.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS lcl_email_regex IMPLEMENTATION.\n  METHOD find_emails.\n    DATA: lr_pattern TYPE regex,\n          lt_emails  TYPE TABLE OF REF TO data.\n\n    CREATE OBJECT lr_pattern TYPE regex\n      VALUE `(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-.]+$)` .\n\n    lr_pattern->match_count( string ) = lines( lt_emails ).\n\n    DO.\n      WHILE lr_pattern->get_match( CHANGING match = DATA(lv_email) ).\n      APPEND lv_email TO lt_emails.\n    ENDDO.\n\n    assign = lt_emails .\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  TYPES: BEGIN OF ty_string,\n           string TYPE string,\n         END OF ty_string.\n\n  DATA: lr_email_regex TYPE REF TO lcl_email_regex,\n        ls_string      TYPE ty_string,\n        lt_emails     TYPE STANDARD TABLE OF REF TO data.\n\n  ls_string-string = 'example@example.com example2@example2.com' .\n  CREATE OBJECT lr_email_regex TYPE lcl_email_regex .\n\n  lr_email_regex->find_emails( EXPORTING string = ls_string-string\n                               IMPORTING emails = lt_emails ).\n\n  LOOP AT lt_emails INTO DATA(lv_email).\n    WRITE: / lv_email->*.\n  ENDLOOP.\n"
    },
    {
        "instruction": "Improve the following code in order to create a balanced binary search tree.",
        "input": "Node insert(int x, Node root) \n{ \n    if (root == NULL) { \n        root = new Node; \n        root->key = x; \n        root->left = root->right = NULL; \n    } \n    else    if (x < root->key) \n        root->left = insert(x, root->left); \n    else \n        root->right = insert(x, root->right); \n    return root; \n}",
        "output": "Node insert(int x, Node root) \n{ \n    if (root == NULL) { \n        root = new Node; \n        root->key = x; \n        root->left = root->right = NULL; \n    } \n    else    if (x < root->key) \n        root->left = insert(x, root->left); \n    else \n        root->right = insert(x, root->right); \n    root = balance(root); \n    return root; \n} \n\nNode balance(Node root) \n{ \n    int left_height = height(root->left); \n    int right_height = height(root->right); \n    if (abs(left_height - right_height) > 1) { \n        if (right_height > left_height) \n            root = leftRotate(root); \n        else\n            root = rightRotate(root); \n    } \n    return root; \n}",
        "abap": "CLASS lcl_tree DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES if_oo_adt_classrun.\n\n    TYPES: BEGIN OF ty_node,\n             key TYPE i,\n             left  TYPE REF TO lcl_tree,\n             right TYPE REF TO lcl_tree,\n           END OF ty_node.\n\n    CLASS-METHOD:\n      insert\n        IMPORTING\n          iv_key     TYPE i\n          io_root    TYPE REF TO lcl_tree\n        RETURNING\n          VALUE(ro_new_root) TYPE REF TO lcl_tree.\n  PRIVATE SECTION.\n    CLASS-METHOD:\n      balance\n        IMPORTING\n          io_root  TYPE REF TO lcl_tree\n        RETURNING\n          VALUE(ro_balanced_root) TYPE REF TO lcl_tree.\n\nENDCLASS.\n\nCLASS lcl_tree IMPLEMENTATION.\n  METHOD if_oo_adt_classrun~execute.\n\n  ENDMETHOD.\n\n  METHOD insert.\n    IF io_root IS INITIAL.\n      CREATE OBJECT ro_new_root.\n      ro_new_root->key = iv_key.\n      ro_new_root->left = NEW #( ).\n      ro_new_root->right = NEW #( ).\n    ELSEIF iv_key < io_root->key.\n      io_root->left = insert( iv_key io_root->left ).\n    ELSE.\n      io_root->right = insert( iv_key io_root->right ).\n    ENDIF.\n\n    ro_new_root = balance( io_root ).\n\n  ENDMETHOD.\n\n  METHOD balance.\n    DATA: lv_left_height TYPE i,\n          lv_right_height TYPE i.\n\n    IF io_root IS BOUND.\n      lv_left_height = height( io_root->left ).\n      lv_right_height = height( io_root->right ).\n\n      IF abs( lv_left_height - lv_right_height ) > 1.\n        IF lv_right_height > lv_left_height.\n          io_root = left_rotate( io_root ).\n        ELSE.\n          io_root = right_rotate( io_root ).\n        ENDIF.\n      ENDIF.\n\n    ENDIF.\n\n    ro_balanced_root = io_root.\n\n  ENDMETHOD.\n\n  METHOD height.\n    DATA: lv_height TYPE i,\n          lv_node  TYPE REF TO lcl_tree.\n\n    IF io_node IS BOUND.\n      lv_node = io_node.\n      lv_height = 0.\n      DO.\n        lv_height = lv_height + 1.\n        IF lv_node->left IS INITIAL AND lv_node->right IS INITIAL.\n          EXIT.\n        ELSEIF lv_node->left IS BOUND.\n          lv_node = lv_node->left.\n        ELSE.\n          lv_node = lv_node->right.\n        ENDIF.\n      ENDDO.\n\n      height = lv_height.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD left_rotate.\n    DATA: lo_right TYPE REF TO lcl_tree,\n          lo_new_root TYPE REF TO lcl_tree.\n\n    IF io_root IS BOUND AND io_root->left IS BOUND.\n      lo_right = io_root->right.\n      CREATE OBJECT lo_new_root.\n      MOVE-CORRESPONDING io_root->* TO lo_new_root.\n      lo_new_root->left = io_root->left.\n      io_root->left = NEW #( ).\n      io_root->key = lo_right->key.\n      io_root->right = lo_right->right.\n      lo_right->left = io_root.\n\n      RETURN io_new_root = lo_new_root.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD right_rotate.\n    DATA: lo_left TYPE REF TO lcl_tree,\n          lo_new_root TYPE REF TO lcl_tree.\n\n    IF io_root IS BOUND AND io_root->right IS BOUND.\n      lo_left = io_root->left.\n      CREATE OBJECT lo_new_root.\n      MOVE-CORRESPONDING io_root->* TO lo_new_root.\n      lo_new_root->right = io_root->right.\n      io_root->right = NEW #( ).\n      io_root->key = lo_left->key.\n      io_root->left = lo_left->left.\n      lo_left->right = io_root.\n\n      RETURN io_new_root = lo_new_root.\n    ENDIF.\n\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a jQuery code snippet to retrieve the value of an input field with an id of \"name\".",
        "input": "",
        "output": "$(\"#name\").val();",
        "abap": "DATA: lv_name TYPE string.\n\nlv_name = 'input-field-name'. \" Replace with actual input field name\nCALL METHOD cl_gui_front_end_services=>get_current_screen(\n  IMPORTING\n    current_screen = DATA(lc_screen)\n  ).\n\nDATA: lt_fields TYPE ty_layout,\n      ls_field  TYPE ty_field.\n\nlt_fields = lc_screen->ls_tab[].\n\nLOOP AT lt_fields INTO ls_field.\n  IF ls_field-name CP lv_name. \" Replace with actual field name\n    lv_name = ls_field-value.\n  ENDIF.\nENDLOOP.\n\nMESSAGE 'Name: ' && lv_name(10).\n"
    },
    {
        "instruction": "Follow the comments to complete the code that finds the maximum value in an array.",
        "input": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n# TODO",
        "output": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n\nmax_value = arr[0]\nfor i in range(1, len(arr)):\n    if arr[i] > max_value:\n        max_value = arr[i]\n\nprint(max_value)",
        "abap": "REPORT zfind_max.\n\nDATA: lv_arr TYPE STANDARD TABLE OF i,\n      lv_max  TYPE i VALUE 0.\n\nlv_arr = value #( (4)\n                  (5)\n                  (2)\n                  (8)\n                  (7) ).\n\nLOOP AT lv_arr INTO DATA(lv_value).\n  IF lv_value > lv_max.\n    lv_max = lv_value.\n  ENDIF.\nENDLOOP.\n\nWRITE: / lv_max.\n"
    },
    {
        "instruction": "Determine the average of 3 numbers.",
        "input": "30, 20, 60",
        "output": "The average of the 3 numbers is 36.",
        "abap": "DATA: lv_num1 TYPE i,\n      lv_num2 TYPE i,\n      lv_num3 TYPE i.\n\nlv_num1 = 0.\nlv_num2 = 0.\nlv_num3 = 0.\n\n\" Assume the average of the three numbers is 36\nDO 10 TIMES.\n  lv_num1 = lv_num1 + ( 36 * 3 / 10 ).\n  lv_num2 = lv_num2 + ( 36 * 3 / 10 ).\n  lv_num3 = lv_num3 + ( 36 * 3 / 10 ).\nENDDO.\n\nWRITE: / 'Number 1:', lv_num1.\nWRITE: / 'Number 2:', lv_num2.\nWRITE: / 'Number 3:', lv_num3.\n"
    },
    {
        "instruction": "Multiply each element in the following list with 10.",
        "input": "my_list = [2, 4, 6]",
        "output": "my_list = [x * 10 for x in my_list]",
        "abap": "DATA: lv_list TYPE STANDARD TABLE OF i.\n\n\" Assuming lv_list has been initialized with values\nLOOP AT lv_list INTO DATA(lv_element).\n  lv_element = lv_element * 10.\n  MODIFY TABLE lv_list FROM lv_element.\nENDLOOP.\n"
    },
    {
        "instruction": "Write Python code to generate a random password of 8 alphanumeric characters.",
        "input": "",
        "output": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n\n// Output:\n// h5Kp0FHc",
        "abap": "REPORT zgenerate_password.\n\nDATA: lv_chars TYPE string,\n       lv_size  TYPE i,\n       lv_password TYPE string,\n       lr_random TYPE REF TO cl_abap_random.\n\nCREATE OBJECT lr_random.\nlv_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.\nlv_size = 8.\n\nDO lv_size TIMES.\n  DATA(lv_char) = lr_random->value( lv_chars ).\n  CONCATENATE lv_password lv_char INTO lv_password.\nENDDO.\n\nWRITE: / lv_password.\n"
    },
    {
        "instruction": "Given a list of integers, create code to remove the duplicates.",
        "input": "my_list = [1, 4, 4, 6, 6, 8]",
        "output": "unique_list = list(set(my_list))",
        "abap": "DATA: lt_unique_list TYPE STANDARD TABLE OF i.\n\nTYPES: BEGIN OF ty_item,\n         value  TYPE string,\n       END OF ty_item.\n\nDATA: lt_my_list TYPE STANDARD TABLE OF ty_item.\n\nlt_my_list = VALUE #( ( value 'item1' )\n                      ( value 'item2' )\n                      ( value 'item3' ) ).\n\nlt_unique_list = VALUE #( FOR <ls_item> IN lt_my_list ( value <ls_item>-value ) ).\nlt_unique_list = UNIQUE lt_unique_list.\n"
    },
    {
        "instruction": "Classify the following sentence as positive or negative sentiment.",
        "input": "This is the worst experience ever.",
        "output": "Negative sentiment.",
        "abap": "DATA: ls_sentiment TYPE string VALUE 'Negative sentiment'.\n"
    },
    {
        "instruction": "Write a JavaScript function to generate a random whole number.",
        "input": "",
        "output": "function getRandomNumber() {\n return Math.floor(Math.random() * 100);\n}",
        "abap": "CLASS lcl_random DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      get_random_number\n        RETURNING\n          VALUE(result) TYPE i.\nENDCLASS.\n\nCLASS lcl_random IMPLEMENTATION.\n  METHOD get_random_number.\n    DATA: lv_random TYPE p LENGTH 10,\n          lv_result TYPE i.\n\n    \" Get a random number between 0 and 99\n    DO 1 TIMES.\n      CALL 'RAND' INTO lv_random.\n      TRANSLATE lv_random NO-GAP TO UPPER CASE.\n      lv_result = lv_random - 48.\n\n      IF lv_result LT 100 AND lv_result > 0.\n        EXIT.\n      ENDIF.\n    ENDDO.\n\n    result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Write a Python code to calculate the sum of natural numbers up to n.",
        "input": "",
        "output": "def n_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum",
        "abap": "FORM f_n_sum USING p_n TYPE i\n              CHANGING cp_sum TYPE i.\n\n  DATA: l_sum TYPE i.\n\n  DO n = 0 AT p_n.\n    ADD n TO l_sum.\n  ENDDO.\n\n  cp_sum = l_sum.\n\nENDFORM.\n"
    },
    {
        "instruction": "Edit the code so that it calculates the exponential of a given number.",
        "input": "public double calculatePower(double base, double power) {\n    return base * power;\n}",
        "output": "public double calculatePower(double base, double power) {\n    return Math.pow(base, power);\n}",
        "abap": "CLASS lcl_power_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calculate_power\n        IMPORTING\n          iv_base TYPE f\n          iv_power TYPE f\n        EXPORTING\n          ev_result TYPE f.\nENDCLASS.\n\nCLASS lcl_power_calculator IMPLEMENTATION.\n  METHOD calculate_power.\n    DATA: lv_result TYPE f.\n\n    lv_result = iv_base ** iv_power.\n    ev_result = lv_result.\n  ENDMETHOD.\nENDCLASS.\n"
    },
    {
        "instruction": "Use the 'subprocess' library to execute a shell command and store its output.",
        "input": "command = \"echo hello world\"",
        "output": "import subprocess\n\nresult = subprocess.run(command, shell=True, capture_output=True)\nprint(result.stdout.decode('utf-8'))",
        "abap": "DATA: lv_command TYPE string,\n       lv_result  TYPE i,\n       lv_stdout  TYPE string.\n\nlv_command = 'your-shell-command-here'.\n\nCALL FUNCTION 'EXECUTE_COMMAND_AND_CAPTURE_OUTPUT'\n    EXPORTING\n        command         = lv_command\n    IMPORTING\n        result          = lv_result\n    TABLES\n        stdout_lines   = VALUE #( )\n        stderr_lines   = VALUE #( )\n    EXCEPTIONS\n        others         = 1\n    .\n\nIF sy-subrc <> 0.\n  MESSAGE 'Error executing command' TYPE 'E'.\nENDIF.\n\nlv_stdout = cl_cons_line=>concat_lines_to_string( it_table[ ] ).\n\nWRITE: / lv_stdout.\n"
    },
    {
        "instruction": "Count the number of vowels in a sentence.",
        "input": "\"Hi there, how are you doing?\"",
        "output": "int countVowels = 0;\nString sentence = \"Hi there, how are you doing?\";\nfor (int i = 0; i < sentence.length(); i++) {\n    if (sentence.charAt(i) == 'a' || sentence.charAt(i) == 'e' || sentence.charAt(i) == 'i' \n    || sentence.charAt(i) == 'o' || sentence.charAt(i) == 'u') {\n        countVowels++;\n    }\n}\nSystem.out.println(\"Number of vowels in the string: \" + countVowels);",
        "abap": "TYPES: BEGIN OF ty_count_vowels,\n  value TYPE i,\nEND OF ty_count_vowels.\n\nDATA: ls_count_vowels TYPE ty_count_vowels.\nls_count_vowels-value = 0.\nDATA: lv_sentence TYPE string VALUE 'Hi there, how are you doing?'.\nDO.\n  IF sy-index > strlen( lv_sentence ).\n    EXIT.\n  ENDIF.\n  IF lv_sentence+sy-index(1) CA 'AEIOU'.\n    ls_count_vowels-value = ls_count_vowels-value + 1.\n  ENDIF.\n  sy-index = sy-index + 1.\nENDDO.\n\nWRITE: / 'Number of vowels in the string: ', ls_count_vowels-value.\n"
    }
]